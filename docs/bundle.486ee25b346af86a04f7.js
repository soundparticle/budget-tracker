!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=28)}([function(e,t,n){e.exports=n(39)()},function(e,t,n){"use strict";e.exports=n(29)},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,a,i,u],c=0;(l=new Error(t.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";e.exports=function(){}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){var r={},o=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),a=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),i=null,u=0,l=[],s=n(48);function c(e,t){for(var n=0;n<e.length;n++){var o=e[n],a=r[o.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](o.parts[i]);for(;i<o.parts.length;i++)a.parts.push(y(o.parts[i],t))}else{var u=[];for(i=0;i<o.parts.length;i++)u.push(y(o.parts[i],t));r[o.id]={id:o.id,refs:1,parts:u}}}}function f(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],u={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(u):n.push(r[i]={id:i,parts:[u]})}return n}function p(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(e.insertAt.before,n);n.insertBefore(t,o)}}function d(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function h(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return m(t,e.attrs),p(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var l=u++;n=i||(i=h(t)),r=g.bind(null,n,l,!1),o=g.bind(null,n,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),p(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=s(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),u=e.href;e.href=URL.createObjectURL(i),u&&URL.revokeObjectURL(u)}.bind(null,n,t),o=function(){d(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){d(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return c(n,t),function(e){for(var o=[],a=0;a<n.length;a++){var i=n[a];(u=r[i.id]).refs--,o.push(u)}e&&c(f(e,t),t);for(a=0;a<o.length;a++){var u;if(0===(u=o[a]).refs){for(var l=0;l<u.parts.length;l++)u.parts[l]();delete r[u.id]}}}};var v=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function g(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=v(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n(0),a=n.n(o),i=a.a.shape({trySubscribe:a.a.func.isRequired,tryUnsubscribe:a.a.func.isRequired,notifyNestedSubs:a.a.func.isRequired,isSubscribed:a.a.func.isRequired}),u=a.a.shape({subscribe:a.a.func.isRequired,dispatch:a.a.func.isRequired,getState:a.a.func.isRequired});function l(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return a[t]=n.store,a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:u.isRequired,children:a.a.element.isRequired},o.childContextTypes=((e={})[t]=u.isRequired,e[n]=i,e),o}var s=l(),c=n(11),f=n.n(c),p=n(2),d=n.n(p);var h=null,m={notify:function(){}};var y=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=m}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=function(){var e=[],t=[];return{clear:function(){t=h,e=h},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==h&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}}())},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=m)},e}(),v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var g=0,b={};function E(){}function w(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=o.getDisplayName,l=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,s=o.methodName,c=void 0===s?"connectAdvanced":s,p=o.renderCountProp,h=void 0===p?void 0:p,m=o.shouldHandleStateChanges,w=void 0===m||m,x=o.storeKey,C=void 0===x?"store":x,A=o.withRef,k=void 0!==A&&A,_=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),T=C+"Subscription",O=g++,S=((t={})[C]=u,t[T]=i,t),P=((n={})[T]=i,n);return function(t){d()("function"==typeof t,"You must pass a component to the function returned by "+c+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=l(n),a=v({},_,{getDisplayName:l,methodName:c,renderCountProp:h,shouldHandleStateChanges:w,storeKey:C,withRef:k,displayName:o,wrappedComponentName:n,WrappedComponent:t}),i=function(n){function i(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=O,r.state={},r.renderCount=0,r.store=e[C]||t[C],r.propsMode=Boolean(e[C]),r.setWrappedInstance=r.setWrappedInstance.bind(r),d()(r.store,'Could not find "'+C+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+C+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,n),i.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[T]=t||this.context[T],e},i.prototype.componentDidMount=function(){w&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},i.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},i.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},i.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=E,this.store=null,this.selector.run=E,this.selector.shouldComponentUpdate=!1},i.prototype.getWrappedInstance=function(){return d()(k,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+c+"() call."),this.wrappedInstance},i.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},i.prototype.initSelector=function(){var t=e(this.store.dispatch,a);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},i.prototype.initSubscription=function(){if(w){var e=(this.propsMode?this.props:this.context)[T];this.subscription=new y(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},i.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(b)):this.notifyNestedSubs()},i.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},i.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},i.prototype.addExtraProps=function(e){if(!(k||h||this.propsMode&&this.subscription))return e;var t=v({},e);return k&&(t.ref=this.setWrappedInstance),h&&(t[h]=this.renderCount++),this.propsMode&&this.subscription&&(t[T]=this.subscription),t},i.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},i}(r.Component);return i.WrappedComponent=t,i.displayName=o,i.childContextTypes=P,i.contextTypes=S,i.propTypes=S,f()(i,t)}}var x=Object.prototype.hasOwnProperty;function C(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function A(e,t){if(C(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!x.call(t,n[o])||!C(e[n[o]],t[n[o]]))return!1;return!0}var k=n(16),_=n(26),T="object"==typeof self&&self&&self.Object===Object&&self,O=(_.a||T||Function("return this")()).Symbol,S=Object.prototype;S.hasOwnProperty,S.toString,O&&O.toStringTag;Object.prototype.toString;O&&O.toStringTag;Object.getPrototypeOf,Object;var P=Function.prototype,R=Object.prototype,j=P.toString;R.hasOwnProperty,j.call(Object);function N(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function M(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function B(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=M(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=M(o),o=r(t,n)),o},r}}var U=[function(e){return"function"==typeof e?B(e):void 0},function(e){return e?void 0:N(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?N(function(t){return Object(k.bindActionCreators)(e,t)}):void 0}];var I=[function(e){return"function"==typeof e?B(e):void 0},function(e){return e?void 0:N(function(){return{}})}],D=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function L(e,t,n){return D({},n,e,t)}var F=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,a=!1,i=void 0;return function(t,n,u){var l=e(t,n,u);return a?r&&o(l,i)||(i=l):(a=!0,i=l),i}}}(e):void 0},function(e){return e?void 0:function(){return L}}];function z(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function H(e,t,n,r,o){var a=o.areStatesEqual,i=o.areOwnPropsEqual,u=o.areStatePropsEqual,l=!1,s=void 0,c=void 0,f=void 0,p=void 0,d=void 0;function h(o,l){var h=!i(l,c),m=!a(o,s);return s=o,c=l,h&&m?(f=e(s,c),t.dependsOnOwnProps&&(p=t(r,c)),d=n(f,p,c)):h?(e.dependsOnOwnProps&&(f=e(s,c)),t.dependsOnOwnProps&&(p=t(r,c)),d=n(f,p,c)):m?function(){var t=e(s,c),r=!u(t,f);return f=t,r&&(d=n(f,p,c)),d}():d}return function(o,a){return l?h(o,a):function(o,a){return f=e(s=o,c=a),p=t(r,c),d=n(f,p,c),l=!0,d}(o,a)}}function q(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),u=r(e,a),l=o(e,a);return(a.pure?H:z)(i,u,l,e,a)}var W=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function V(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function G(e,t){return e===t}var $=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?w:t,r=e.mapStateToPropsFactories,o=void 0===r?I:r,a=e.mapDispatchToPropsFactories,i=void 0===a?U:a,u=e.mergePropsFactories,l=void 0===u?F:u,s=e.selectorFactory,c=void 0===s?q:s;return function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},u=a.pure,s=void 0===u||u,f=a.areStatesEqual,p=void 0===f?G:f,d=a.areOwnPropsEqual,h=void 0===d?A:d,m=a.areStatePropsEqual,y=void 0===m?A:m,v=a.areMergedPropsEqual,g=void 0===v?A:v,b=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),E=V(e,o,"mapStateToProps"),w=V(t,i,"mapDispatchToProps"),x=V(r,l,"mergeProps");return n(c,W({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:E,initMapDispatchToProps:w,initMergeProps:x,pure:s,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:y,areMergedPropsEqual:g},b))}}();n.d(t,"Provider",function(){return s}),n.d(t,"createProvider",function(){return l}),n.d(t,"connectAdvanced",function(){return w}),n.d(t,"connect",function(){return $})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.error=function(e=null,{type:t,payload:n}){switch(t){case r:return n;case a:case o:return null;default:return e}},t.loading=function(e=!1,{type:t}){switch(t){case a:return!0;case i:return!1;default:return e}};const r=t.ERROR="ERROR",o=t.ERROR_CLEAR="ERROR_CLEAR",a=t.LOAD_START="LOAD_START",i=t.LOAD_END="LOAD_END";t.getError=(e=>e.error),t.getLoading=(e=>e.loading)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.categories=function(e=[],{type:t,payload:n}){switch(t){case r:return n;case o:return[...e,n];case a:return e.map(e=>e.key===n.key?n:e);case i:return e.filter(e=>e.key!==n);default:return e}};const r=t.CATEGORY_LOAD="CATEGORY_LOAD",o=t.CATEGORY_ADD="CATEGORY_ADD",a=t.CATEGORY_UPDATE="CATEGORY_UPDATE",i=t.CATEGORY_REMOVE="CATEGORY_REMOVE";t.getCategories=(e=>e.categories)},function(e,t,n){var r=n(41);e.exports=h,e.exports.parse=a,e.exports.compile=function(e,t){return l(a(e,t))},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,u="",l=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(u+=e.slice(i,d),i=d+f.length,p)u+=p[1];else{var h=e[i],m=n[2],y=n[3],v=n[4],g=n[5],b=n[6],E=n[7];u&&(r.push(u),u="");var w=null!=m&&null!=h&&h!==m,x="+"===b||"*"===b,C="?"===b||"*"===b,A=n[2]||l,k=v||g;r.push({name:y||a++,prefix:m||"",delimiter:A,optional:C,repeat:x,partial:w,asterisk:!!E,pattern:k?c(k):E?".*":"[^"+s(A)+"]+?"})}}return i<e.length&&(u+=e.substr(i)),u&&r.push(u),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){return encodeURI(e).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var a="",l=n||{},s=(o||{}).pretty?i:encodeURIComponent,c=0;c<e.length;c++){var f=e[c];if("string"!=typeof f){var p,d=l[f.name];if(null==d){if(f.optional){f.partial&&(a+=f.prefix);continue}throw new TypeError('Expected "'+f.name+'" to be defined')}if(r(d)){if(!f.repeat)throw new TypeError('Expected "'+f.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(f.optional)continue;throw new TypeError('Expected "'+f.name+'" to not be empty')}for(var h=0;h<d.length;h++){if(p=s(d[h]),!t[c].test(p))throw new TypeError('Expected all "'+f.name+'" to match "'+f.pattern+'", but received `'+JSON.stringify(p)+"`");a+=(0===h?f.prefix:f.delimiter)+p}}else{if(p=f.asterisk?u(d):s(d),!t[c].test(p))throw new TypeError('Expected "'+f.name+'" to match "'+f.pattern+'", but received "'+p+'"');a+=f.prefix+p}}else a+=f}return a}}function s(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function f(e,t){return e.keys=t,e}function p(e){return e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",u=0;u<e.length;u++){var l=e[u];if("string"==typeof l)i+=s(l);else{var c=s(l.prefix),d="(?:"+l.pattern+")";t.push(l),l.repeat&&(d+="(?:"+c+d+")*"),i+=d=l.optional?l.partial?c+"("+d+")?":"(?:"+c+"("+d+"))?":c+"("+d+")"}}var h=s(n.delimiter||"/"),m=i.slice(-h.length)===h;return o||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&m?"":"(?="+h+"|$)",f(new RegExp("^"+i,p(n)),t)}function h(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return f(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(h(e[o],t,n).source);return f(new RegExp("(?:"+r.join("|")+")",p(n)),t)}(e,t,n):function(e,t,n){return d(a(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a=Object.defineProperty,i=Object.getOwnPropertyNames,u=Object.getOwnPropertySymbols,l=Object.getOwnPropertyDescriptor,s=Object.getPrototypeOf,c=s&&s(Object);e.exports=function e(t,n,f){if("string"!=typeof n){if(c){var p=s(n);p&&p!==c&&e(t,p,f)}var d=i(n);u&&(d=d.concat(u(n)));for(var h=0;h<d.length;++h){var m=d[h];if(!(r[m]||o[m]||f&&f[m])){var y=l(n,m);try{a(t,m,y)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.remove=t.update=t.add=t.load=void 0;var r=n(9),o=n(23);t.load=(()=>({type:r.CATEGORY_LOAD,payload:(0,o.loadCategories)()})),t.add=(e=>(e.timestamp=(new Date).toLocaleString(),{type:r.CATEGORY_ADD,payload:(0,o.addCategory)(e)})),t.update=(e=>({type:r.CATEGORY_UPDATE,payload:(0,o.updateCategory)(e)})),t.remove=(e=>({type:r.CATEGORY_REMOVE,payload:(0,o.removeCategory)(e).then(()=>e)}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeExpense=t.updateExpense=t.addExpense=void 0;var r=n(14),o=n(23);t.addExpense=((e,t)=>(t.timestamp=(new Date).toLocaleString(),t.categoryId=e,{type:r.EXPENSE_ADD,payload:(0,o.addExpenseToCategory)(t)})),t.updateExpense=(e=>({type:r.EXPENSE_UPDATE,payload:(0,o.updateExpenseCategory)(e)})),t.removeExpense=(e=>({type:r.EXPENSE_REMOVE,payload:(0,o.removeExpenseCategory)(e).then(()=>e)}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getExpensesByCategory=t.getExpenses=t.EXPENSE_REMOVE=t.EXPENSE_UPDATE=t.EXPENSE_ADD=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.expensesByCategory=function(e=[],{type:t,payload:n}){switch(t){case o.CATEGORY_LOAD:return n.reduce((e,t)=>(e[t.key]=t.expenses,e),{});case o.CATEGORY_ADD:return r({},e,{[n.key]:[]});case o.CATEGORY_REMOVE:{const t=r({},e);return delete t[n.id],t}case a:return r({},e,{[n.categoryId]:[...e[n.categoryId],n]});case i:return r({},e,{[n.categoryId]:e[n.categoryId].map(e=>e.key===n.key?n:e)});case u:{const t=r({},e),o=t[n.categoryId].filter(e=>e.key!==n.key);return t[n.categoryId]=o,t}default:return e}};var o=n(9);const a=t.EXPENSE_ADD="EXPENSE_ADD",i=t.EXPENSE_UPDATE="EXPENSE_UPDATE",u=t.EXPENSE_REMOVE="EXPENSE_REMOVE",l=t.getExpenses=(e=>e.expensesByCategory);t.getExpensesByCategory=((e,t)=>l(e)[t])},function(e,t,n){"use strict";n.r(t);var r=n(3),o=n.n(r),a=n(1),i=n.n(a),u=n(0),l=n.n(u),s=n(4),c=n.n(s),f=n(2),p=n.n(f);function d(e){return"/"===e.charAt(0)}function h(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var m=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],o=e&&d(e),a=t&&d(t),i=o||a;if(e&&d(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var u=void 0;if(r.length){var l=r[r.length-1];u="."===l||".."===l||""===l}else u=!1;for(var s=0,c=r.length;c>=0;c--){var f=r[c];"."===f?h(r,c):".."===f?(h(r,c),s++):s&&(h(r,c),s--)}if(!i)for(;s--;s)r.unshift("..");!i||""===r[0]||r[0]&&d(r[0])||r.unshift("");var p=r.join("/");return u&&"/"!==p.substr(-1)&&(p+="/"),p},y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var v=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var r=void 0===t?"undefined":y(t);if(r!==(void 0===n?"undefined":y(n)))return!1;if("object"===r){var o=t.valueOf(),a=n.valueOf();if(o!==t||a!==n)return e(o,a);var i=Object.keys(t),u=Object.keys(n);return i.length===u.length&&i.every(function(r){return e(t[r],n[r])})}return!1},g=function(e){return"/"===e.charAt(0)?e:"/"+e},b=function(e){return"/"===e.charAt(0)?e.substr(1):e},E=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)},w=function(e,t){return E(e,t)?e.substr(t.length):e},x=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},C=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o},A=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},k=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=A({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=m(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},_=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&v(e.state,t.state)},T=function(){var e=null,t=[];return{setPrompt:function(t){return c()(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):(c()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}},O=!("undefined"==typeof window||!window.document||!window.document.createElement),S=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},P=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},R=function(e,t){return t(window.confirm(e))},j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},N=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},M=function(){try{return window.history.state||{}}catch(e){return{}}},B=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};p()(O,"Browser history needs a DOM");var t=window.history,n=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history}(),r=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e.forceRefresh,a=void 0!==o&&o,i=e.getUserConfirmation,u=void 0===i?R:i,l=e.keyLength,s=void 0===l?6:l,f=e.basename?x(g(e.basename)):"",d=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return c()(!f||E(a,f),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+f+'".'),f&&(a=w(a,f)),k(a,r,n)},h=function(){return Math.random().toString(36).substr(2,s)},m=T(),y=function(e){N(q,e),q.length=t.length,m.notifyListeners(q.location,q.action)},v=function(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||_(d(e.state))},b=function(){_(d(M()))},A=!1,_=function(e){A?(A=!1,y()):m.confirmTransitionTo(e,"POP",u,function(t){t?y({action:"POP",location:e}):B(e)})},B=function(e){var t=q.location,n=I.indexOf(t.key);-1===n&&(n=0);var r=I.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(A=!0,L(o))},U=d(M()),I=[U.key],D=function(e){return f+C(e)},L=function(e){t.go(e)},F=0,z=function(e){1===(F+=e)?(S(window,"popstate",v),r&&S(window,"hashchange",b)):0===F&&(P(window,"popstate",v),r&&P(window,"hashchange",b))},H=!1,q={length:t.length,action:"POP",location:U,createHref:D,push:function(e,r){c()(!("object"===(void 0===e?"undefined":j(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=k(e,r,h(),q.location);m.confirmTransitionTo(o,"PUSH",u,function(e){if(e){var r=D(o),i=o.key,u=o.state;if(n)if(t.pushState({key:i,state:u},null,r),a)window.location.href=r;else{var l=I.indexOf(q.location.key),s=I.slice(0,-1===l?0:l+1);s.push(o.key),I=s,y({action:"PUSH",location:o})}else c()(void 0===u,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,r){c()(!("object"===(void 0===e?"undefined":j(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=k(e,r,h(),q.location);m.confirmTransitionTo(o,"REPLACE",u,function(e){if(e){var r=D(o),i=o.key,u=o.state;if(n)if(t.replaceState({key:i,state:u},null,r),a)window.location.replace(r);else{var l=I.indexOf(q.location.key);-1!==l&&(I[l]=o.key),y({action:"REPLACE",location:o})}else c()(void 0===u,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:L,goBack:function(){return L(-1)},goForward:function(){return L(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=m.setPrompt(e);return H||(z(1),H=!0),function(){return H&&(H=!1,z(-1)),t()}},listen:function(e){var t=m.appendListener(e);return z(1),function(){z(-1),t()}}};return q},U=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},I={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+b(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:b,decodePath:g},slash:{encodePath:g,decodePath:g}},D=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},L=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)},F=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};p()(O,"Hash history needs a DOM");var t=window.history,n=-1===window.navigator.userAgent.indexOf("Firefox"),r=e.getUserConfirmation,o=void 0===r?R:r,a=e.hashType,i=void 0===a?"slash":a,u=e.basename?x(g(e.basename)):"",l=I[i],s=l.encodePath,f=l.decodePath,d=function(){var e=f(D());return c()(!u||E(e,u),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+u+'".'),u&&(e=w(e,u)),k(e)},h=T(),m=function(e){U(V,e),V.length=t.length,h.notifyListeners(V.location,V.action)},y=!1,v=null,b=function(){var e=D(),t=s(e);if(e!==t)L(t);else{var n=d(),r=V.location;if(!y&&_(r,n))return;if(v===C(n))return;v=null,A(n)}},A=function(e){y?(y=!1,m()):h.confirmTransitionTo(e,"POP",o,function(t){t?m({action:"POP",location:e}):j(e)})},j=function(e){var t=V.location,n=F.lastIndexOf(C(t));-1===n&&(n=0);var r=F.lastIndexOf(C(e));-1===r&&(r=0);var o=n-r;o&&(y=!0,z(o))},N=D(),M=s(N);N!==M&&L(M);var B=d(),F=[C(B)],z=function(e){c()(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},H=0,q=function(e){1===(H+=e)?S(window,"hashchange",b):0===H&&P(window,"hashchange",b)},W=!1,V={length:t.length,action:"POP",location:B,createHref:function(e){return"#"+s(u+C(e))},push:function(e,t){c()(void 0===t,"Hash history cannot push state; it is ignored");var n=k(e,void 0,void 0,V.location);h.confirmTransitionTo(n,"PUSH",o,function(e){if(e){var t=C(n),r=s(u+t);if(D()!==r){v=t,function(e){window.location.hash=e}(r);var o=F.lastIndexOf(C(V.location)),a=F.slice(0,-1===o?0:o+1);a.push(t),F=a,m({action:"PUSH",location:n})}else c()(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),m()}})},replace:function(e,t){c()(void 0===t,"Hash history cannot replace state; it is ignored");var n=k(e,void 0,void 0,V.location);h.confirmTransitionTo(n,"REPLACE",o,function(e){if(e){var t=C(n),r=s(u+t);D()!==r&&(v=t,L(r));var o=F.indexOf(C(V.location));-1!==o&&(F[o]=t),m({action:"REPLACE",location:n})}})},go:z,goBack:function(){return z(-1)},goForward:function(){return z(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=h.setPrompt(e);return W||(q(1),W=!0),function(){return W&&(W=!1,q(-1)),t()}},listen:function(e){var t=h.appendListener(e);return q(1),function(){q(-1),t()}}};return V},z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},H=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},q=function(e,t,n){return Math.min(Math.max(e,t),n)},W=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,r=void 0===n?["/"]:n,o=e.initialIndex,a=void 0===o?0:o,i=e.keyLength,u=void 0===i?6:i,l=T(),s=function(e){H(y,e),y.length=y.entries.length,l.notifyListeners(y.location,y.action)},f=function(){return Math.random().toString(36).substr(2,u)},p=q(a,0,r.length-1),d=r.map(function(e){return k(e,void 0,"string"==typeof e?f():e.key||f())}),h=C,m=function(e){var n=q(y.index+e,0,y.entries.length-1),r=y.entries[n];l.confirmTransitionTo(r,"POP",t,function(e){e?s({action:"POP",location:r,index:n}):s()})},y={length:d.length,action:"POP",location:d[p],index:p,entries:d,createHref:h,push:function(e,n){c()(!("object"===(void 0===e?"undefined":z(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var r=k(e,n,f(),y.location);l.confirmTransitionTo(r,"PUSH",t,function(e){if(e){var t=y.index+1,n=y.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),s({action:"PUSH",location:r,index:t,entries:n})}})},replace:function(e,n){c()(!("object"===(void 0===e?"undefined":z(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var r=k(e,n,f(),y.location);l.confirmTransitionTo(r,"REPLACE",t,function(e){e&&(y.entries[y.index]=r,s({action:"REPLACE",location:r}))})},go:m,goBack:function(){return m(-1)},goForward:function(){return m(1)},canGo:function(e){var t=y.index+e;return t>=0&&t<y.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return l.setPrompt(e)},listen:function(e){return l.appendListener(e)}};return y},V=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function G(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var $=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=G(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props.history.location.pathname)},G(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:V({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;p()(null==n||1===i.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?i.a.Children.only(e):null},t}(i.a.Component);$.propTypes={history:l.a.object.isRequired,children:l.a.node},$.contextTypes={router:l.a.object},$.childContextTypes={router:l.a.object.isRequired};var Y=$,K=Y;function X(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Q=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=X(this,e.call.apply(e,[this].concat(a))),r.history=B(r.props),X(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(K,{history:this.history,children:this.props.children})},t}(i.a.Component);Q.propTypes={basename:l.a.string,forceRefresh:l.a.bool,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var J=Q;function Z(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ee=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=Z(this,e.call.apply(e,[this].concat(a))),r.history=F(r.props),Z(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(K,{history:this.history,children:this.props.children})},t}(i.a.Component);ee.propTypes={basename:l.a.string,getUserConfirmation:l.a.func,hashType:l.a.oneOf(["hashbang","noslash","slash"]),children:l.a.node};var te=ee,ne=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function re(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var oe=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},ae=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=re(this,e.call.apply(e,[this].concat(a))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!oe(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,a=n.to;o?t.replace(a):t.push(a)}},re(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);p()(this.context.router,"You should not use <Link> outside a <Router>"),p()(void 0!==t,'You must specify the "to" property');var o=this.context.router.history,a="string"==typeof t?k(t,null,null,o.location):t,u=o.createHref(a);return i.a.createElement("a",ne({},r,{onClick:this.handleClick,href:u,ref:n}))},t}(i.a.Component);ae.propTypes={onClick:l.a.func,target:l.a.string,replace:l.a.bool,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired,innerRef:l.a.oneOfType([l.a.string,l.a.func])},ae.defaultProps={replace:!1},ae.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired,createHref:l.a.func.isRequired}).isRequired}).isRequired};var ie=ae;function ue(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var le=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=ue(this,e.call.apply(e,[this].concat(a))),r.history=W(r.props),ue(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(Y,{history:this.history,children:this.props.children})},t}(i.a.Component);le.propTypes={initialEntries:l.a.array,initialIndex:l.a.number,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var se=le,ce=n(10),fe=n.n(ce),pe={},de=0,he=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,o=r.path,a=r.exact,i=void 0!==a&&a,u=r.strict,l=void 0!==u&&u,s=r.sensitive,c=void 0!==s&&s;if(null==o)return n;var f=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=pe[n]||(pe[n]={});if(r[e])return r[e];var o=[],a={re:fe()(e,o,t),keys:o};return de<1e4&&(r[e]=a,de++),a}(o,{end:i,strict:l,sensitive:c}),p=f.re,d=f.keys,h=p.exec(e);if(!h)return null;var m=h[0],y=h.slice(1),v=e===m;return i&&!v?null:{path:o,url:"/"===o&&""===m?"/":m,isExact:v,params:d.reduce(function(e,t,n){return e[t.name]=y[n],e},{})}},me=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function ye(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ve=function(e){return 0===i.a.Children.count(e)},ge=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=ye(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props,r.context.router)},ye(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:me({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,a=e.strict,i=e.exact,u=e.sensitive;if(n)return n;p()(t,"You should not use <Route> or withRouter() outside a <Router>");var l=t.route,s=(r||l.location).pathname;return he(s,{path:o,strict:a,exact:i,sensitive:u},l.match)},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!ve(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!ve(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,a=this.context.router,u=a.history,l=a.route,s=a.staticContext,c={match:e,location:this.props.location||l.location,history:u,staticContext:s};return r?e?i.a.createElement(r,c):null:o?e?o(c):null:"function"==typeof n?n(c):n&&!ve(n)?i.a.Children.only(n):null},t}(i.a.Component);ge.propTypes={computedMatch:l.a.object,path:l.a.string,exact:l.a.bool,strict:l.a.bool,sensitive:l.a.bool,component:l.a.func,render:l.a.func,children:l.a.oneOfType([l.a.func,l.a.node]),location:l.a.object},ge.contextTypes={router:l.a.shape({history:l.a.object.isRequired,route:l.a.object.isRequired,staticContext:l.a.object})},ge.childContextTypes={router:l.a.object.isRequired};var be=ge,Ee=be,we=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},xe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var Ce=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,a=e.activeClassName,u=e.className,l=e.activeStyle,s=e.style,c=e.isActive,f=e["aria-current"],p=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),d="object"===(void 0===t?"undefined":xe(t))?t.pathname:t,h=d&&d.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return i.a.createElement(Ee,{path:h,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(c?c(r,n):r);return i.a.createElement(ie,we({to:t,className:o?[u,a].filter(function(e){return e}).join(" "):u,style:o?we({},s,l):s,"aria-current":o&&f||null},p))}})};Ce.propTypes={to:ie.propTypes.to,exact:l.a.bool,strict:l.a.bool,location:l.a.object,activeClassName:l.a.string,className:l.a.string,activeStyle:l.a.object,style:l.a.object,isActive:l.a.func,"aria-current":l.a.oneOf(["page","step","location","date","time","true"])},Ce.defaultProps={activeClassName:"active","aria-current":"page"};var Ae=Ce;var ke=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(i.a.Component);ke.propTypes={when:l.a.bool,message:l.a.oneOfType([l.a.func,l.a.string]).isRequired},ke.defaultProps={when:!0},ke.contextTypes={router:l.a.shape({history:l.a.shape({block:l.a.func.isRequired}).isRequired}).isRequired};var _e=ke,Te={},Oe=0,Se=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"/"===e?e:function(e){var t=e,n=Te[t]||(Te[t]={});if(n[e])return n[e];var r=fe.a.compile(e);return Oe<1e4&&(n[e]=r,Oe++),r}(e)(t,{pretty:!0})},Pe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Re=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=k(e.to),n=k(this.props.to);_(t,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,n=e.to;return t?"string"==typeof n?Se(n,t.params):Pe({},n,{pathname:Se(n.pathname,t.params)}):n},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,n=this.computeTo(this.props);t?e.push(n):e.replace(n)},t.prototype.render=function(){return null},t}(i.a.Component);Re.propTypes={computedMatch:l.a.object,push:l.a.bool,from:l.a.string,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired},Re.defaultProps={push:!1},Re.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired}).isRequired,staticContext:l.a.object}).isRequired};var je=Re,Ne=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function Me(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Be=function(e){return"/"===e.charAt(0)?e:"/"+e},Ue=function(e,t){return e?Ne({},t,{pathname:Be(e)+t.pathname}):t},Ie=function(e){return"string"==typeof e?e:C(e)},De=function(e){return function(){p()(!1,"You cannot %s with <StaticRouter>",e)}},Le=function(){},Fe=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=Me(this,e.call.apply(e,[this].concat(a))),r.createHref=function(e){return Be(r.props.basename+Ie(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=Ue(n,k(e)),o.url=Ie(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=Ue(n,k(e)),o.url=Ie(o.location)},r.handleListen=function(){return Le},r.handleBlock=function(){return Le},Me(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=Be(e);return 0!==t.pathname.indexOf(n)?t:Ne({},t,{pathname:t.pathname.substr(n.length)})}(t,k(n)),push:this.handlePush,replace:this.handleReplace,go:De("go"),goBack:De("goBack"),goForward:De("goForward"),listen:this.handleListen,block:this.handleBlock};return i.a.createElement(Y,Ne({},r,{history:o}))},t}(i.a.Component);Fe.propTypes={basename:l.a.string,context:l.a.object.isRequired,location:l.a.oneOfType([l.a.string,l.a.object])},Fe.defaultProps={basename:"",location:"/"},Fe.childContextTypes={router:l.a.object.isRequired};var ze=Fe;var He=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){o()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,o=void 0;return i.a.Children.forEach(t,function(t){if(null==r&&i.a.isValidElement(t)){var a=t.props,u=a.path,l=a.exact,s=a.strict,c=a.sensitive,f=a.from,p=u||f;o=t,r=he(n.pathname,{path:p,exact:l,strict:s,sensitive:c},e.match)}}),r?i.a.cloneElement(o,{location:n,computedMatch:r}):null},t}(i.a.Component);He.contextTypes={router:l.a.shape({route:l.a.object.isRequired}).isRequired},He.propTypes={children:l.a.node,location:l.a.object};var qe=He,We=Se,Ve=he,Ge=n(11),$e=n.n(Ge),Ye=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Ke=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return i.a.createElement(be,{children:function(t){return i.a.createElement(e,Ye({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:l.a.func},$e()(t,e)};n.d(t,"BrowserRouter",function(){return J}),n.d(t,"HashRouter",function(){return te}),n.d(t,"Link",function(){return ie}),n.d(t,"MemoryRouter",function(){return se}),n.d(t,"NavLink",function(){return Ae}),n.d(t,"Prompt",function(){return _e}),n.d(t,"Redirect",function(){return je}),n.d(t,"Route",function(){return Ee}),n.d(t,"Router",function(){return K}),n.d(t,"StaticRouter",function(){return ze}),n.d(t,"Switch",function(){return qe}),n.d(t,"generatePath",function(){return We}),n.d(t,"matchPath",function(){return Ve}),n.d(t,"withRouter",function(){return Ke})},function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return l}),n.d(t,"combineReducers",function(){return c}),n.d(t,"bindActionCreators",function(){return p}),n.d(t,"applyMiddleware",function(){return h}),n.d(t,"compose",function(){return d}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(17),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function u(e){if("object"!==(void 0===e?"undefined":a(e))||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function l(e,t,n){var i;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(l)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var s=e,c=t,f=[],p=f,d=!1;function h(){p===f&&(p=f.slice())}function m(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function y(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return h(),p.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,h();var n=p.indexOf(e);p.splice(n,1)}}}function v(e){if(!u(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,c=s(c,e)}finally{d=!1}for(var t=f=p,n=0;n<t.length;n++){(0,t[n])()}return e}return v({type:o.INIT}),(i={dispatch:v,subscribe:y,getState:m,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");s=e,v({type:o.REPLACE})}})[r.a]=function(){var e,t=y;return(e={subscribe:function(e){if("object"!==(void 0===e?"undefined":a(e))||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(m())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},i}function s(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var a=t[r];0,"function"==typeof e[a]&&(n[a]=e[a])}var i=Object.keys(n);var u=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){u=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(u)throw u;for(var r=!1,o={},a=0;a<i.length;a++){var l=i[a],c=n[l],f=e[l],p=c(f,t);if(void 0===p){var d=s(l,t);throw new Error(d)}o[l]=p,r=r||p!==f}return r?o:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function p(e,t){if("function"==typeof e)return f(e,t);if("object"!==(void 0===e?"undefined":a(e))||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":void 0===e?"undefined":a(e))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var i=n[o],u=e[i];"function"==typeof u&&(r[i]=f(u,t))}return r}function d(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var a=e.apply(void 0,r),u=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},l={getState:a.getState,dispatch:function(){return u.apply(void 0,arguments)}},s=t.map(function(e){return e(l)});return u=d.apply(void 0,s)(a.dispatch),i({},a,{dispatch:u})}}}},function(e,t,n){"use strict";(function(e,r){var o,a=n(27);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n(22),n(44)(e))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var s in n=Object(arguments[l]))o.call(n,s)&&(u[s]=n[s]);if(r){i=r(n);for(var c=0;c<i.length;c++)a.call(n,i[c])&&(u[i[c]]=n[i[c]])}}return u}},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,u,l){if(r(t),!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,a,i,u,l],f=0;(s=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeExpenseCategory=t.updateExpenseCategory=t.addExpenseToCategory=t.removeCategory=t.updateCategory=t.addCategory=t.loadCategories=void 0;var r=n(60);const o="https://budget-tracker-5bf52.firebaseio.com//categories",a=e=>`${o}/${e}.json`,i=(e,t)=>`${o}/${e}/expenses/${t}.json`,u=e=>e?Object.keys(e).map(t=>{const n=e[t];return n.key=t,n}):[];t.loadCategories=(()=>(0,r.get)(`${o}.json`).then(e=>{const t=u(e);return t.forEach(e=>e.expenses=u(e.expenses)),t})),t.addCategory=(e=>{if("error"===e.name)return Promise.reject("This is an error");const t=`${o}.json`;return(0,r.post)(t,e).then(t=>(e.key=t.name,e))}),t.updateCategory=(e=>{const t=a(e.key);return(0,r.put)(t,e)}),t.removeCategory=(e=>{const t=a(e);return(0,r.del)(t)}),t.addExpenseToCategory=(e=>{const t=`${o}/${e.categoryId}/expenses.json`;return(0,r.post)(t,e).then(t=>(e.key=t.name,e))}),t.updateExpenseCategory=(e=>{const t=i(e.categoryId,e.key);return(0,r.put)(t,e)}),t.removeExpenseCategory=(e=>{const t=i(e.categoryId,e.key);return(0,r.del)(t)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=u(r),a=u(n(0)),i=u(n(66));function u(e){return e&&e.__esModule?e:{default:e}}class l extends r.Component{constructor(...e){var t;return t=super(...e),this.state={editing:!1,id:null,name:"",price:""},this.handleChange=(({target:e})=>{this.setState({[e.name]:e.value})}),this.handleSubmit=(e=>{e.preventDefault();const{name:t,price:n,key:r}=this.state,o={name:t,price:n};r&&(o.key=r),this.props.expense&&(o.categoryId=this.props.expense.categoryId),this.props.onComplete(o),this.setState({name:"",price:""})}),t}componentDidMount(){const{expense:e}=this.props;if(!e)return null;this.setState(e)}render(){const{key:e,name:t,price:n}=this.state,{onCancel:r}=this.props;return o.default.createElement("form",{onSubmit:this.handleSubmit},o.default.createElement("label",null,"Name:",o.default.createElement("input",{name:"name",value:t,onChange:this.handleChange})),o.default.createElement("label",null,"Price:",o.default.createElement("input",{name:"price",value:n,onChange:this.handleChange})),o.default.createElement("span",{className:i.default.formButtons},o.default.createElement("button",{type:"submit"},e?"Update":"Add"),e&&o.default.createElement("button",{type:"button",onClick:r},"Cancel")),o.default.createElement("div",null))}}l.propTypes={expense:a.default.object,onComplete:a.default.func.isRequired,onCancel:a.default.func,categoryId:a.default.string.isRequired},t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=i(r),a=i(n(0));function i(e){return e&&e.__esModule?e:{default:e}}class u extends r.Component{constructor(...e){var t;return t=super(...e),this.state={editing:!1,key:null,name:"",budget:"",expenses:[],category:null},this.handleSubmit=(e=>{e.preventDefault();const{name:t,budget:n,key:r}=this.state,o={name:t,budget:n};r&&(o.key=r),this.props.onComplete(o),this.setState({name:"",budget:""})}),this.handleChange=(({target:e})=>{this.setState({[e.name]:e.value})}),t}componentDidMount(){const{category:e}=this.props;e&&this.setState(e)}render(){const{key:e,name:t,budget:n}=this.state,{onCancel:r}=this.props;return o.default.createElement("form",{onSubmit:this.handleSubmit},o.default.createElement("label",null,"Name:",o.default.createElement("input",{name:"name",value:t,onChange:this.handleChange})),o.default.createElement("label",null,"Budget:",o.default.createElement("input",{name:"budget",value:n,onChange:this.handleChange})),o.default.createElement("div",null,o.default.createElement("span",null,o.default.createElement("button",{type:"submit"},e?"Update":"Add"),e&&o.default.createElement("button",{type:"button",onClick:r},"Cancel"))))}}u.propTypes={category:a.default.object,onComplete:a.default.func.isRequired,onCancel:a.default.func},t.default=u},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(22))},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=l(n(1)),o=l(n(30)),a=l(n(38)),i=n(7),u=l(n(78));function l(e){return e&&e.__esModule?e:{default:e}}n(81),o.default.render(r.default.createElement(i.Provider,{store:u.default},r.default.createElement(a.default,null)),document.getElementById("root"))},function(e,t,n){"use strict";
/** @license React v16.4.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(18),o=n(19),a=n(20),i=n(21),u="function"==typeof Symbol&&Symbol.for,l=u?Symbol.for("react.element"):60103,s=u?Symbol.for("react.portal"):60106,c=u?Symbol.for("react.fragment"):60107,f=u?Symbol.for("react.strict_mode"):60108,p=u?Symbol.for("react.profiler"):60114,d=u?Symbol.for("react.provider"):60109,h=u?Symbol.for("react.context"):60110,m=u?Symbol.for("react.async_mode"):60111,y=u?Symbol.for("react.forward_ref"):60112;u&&Symbol.for("react.timeout");var v="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function E(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||b}function w(){}function x(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||b}E.prototype.isReactComponent={},E.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},E.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=E.prototype;var C=x.prototype=new w;C.constructor=x,r(C,E.prototype),C.isPureReactComponent=!0;var A={current:null},k=Object.prototype.hasOwnProperty,_={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r=void 0,o={},a=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!_.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:l,type:e,key:a,ref:i,props:o,_owner:A.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var S=/\/+/g,P=[];function R(e,t,n,r){if(P.length){var o=P.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function j(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function N(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case l:case s:a=!0}}if(a)return n(r,e,""===t?"."+M(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var i=0;i<e.length;i++){var u=t+M(o=e[i],i);a+=N(o,u,n,r)}else if(null===e||void 0===e?u=null:u="function"==typeof(u=v&&e[v]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),i=0;!(o=e.next()).done;)a+=N(o=o.value,u=t+M(o,i++),n,r);else"object"===o&&g("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return a}function M(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function B(e,t){e.func.call(e.context,t,e.count++)}function U(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?I(e,r,n,i.thatReturnsArgument):null!=e&&(O(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(S,"$&/")+"/")+n,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function I(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(S,"$&/")+"/"),t=R(t,a,r,o),null==e||N(e,"",U,t),j(t)}var D={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return I(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=R(null,null,t,n),null==e||N(e,"",B,t),j(t)},count:function(e){return null==e?0:N(e,"",i.thatReturnsNull,null)},toArray:function(e){var t=[];return I(e,t,null,i.thatReturnsArgument),t},only:function(e){return O(e)||g("143"),e}},createRef:function(){return{current:null}},Component:E,PureComponent:x,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:h,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:y,render:e}},Fragment:c,StrictMode:f,unstable_AsyncMode:m,unstable_Profiler:p,createElement:T,cloneElement:function(e,t,n){(null===e||void 0===e)&&g("267",e);var o=void 0,a=r({},e.props),i=e.key,u=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,s=A.current),void 0!==t.key&&(i=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)k.call(t,o)&&!_.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:l,type:e.type,key:i,ref:u,props:a,_owner:s}},createFactory:function(e){var t=T.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.4.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:A,assign:r}},L={default:D},F=L&&D||L;e.exports=F.default?F.default:F},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(31)},function(e,t,n){"use strict";
/** @license React v16.4.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(19),o=n(1),a=n(32),i=n(18),u=n(21),l=n(33),s=n(34),c=n(35),f=n(20);function p(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||p("227");var d={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,a,i,u,l){(function(e,t,n,r,o,a,i,u,l){this._hasCaughtError=!1,this._caughtError=null;var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(d,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,a,i,u,l){if(d.invokeGuardedCallback.apply(this,arguments),d.hasCaughtError()){var s=d.clearCaughtError();d._hasRethrowError||(d._hasRethrowError=!0,d._rethrowError=s)}},rethrowCaughtError:function(){return function(){if(d._hasRethrowError){var e=d._rethrowError;throw d._rethrowError=null,d._hasRethrowError=!1,e}}.apply(d,arguments)},hasCaughtError:function(){return d._hasCaughtError},clearCaughtError:function(){if(d._hasCaughtError){var e=d._caughtError;return d._caughtError=null,d._hasCaughtError=!1,e}p("198")}};var h=null,m={};function y(){if(h)for(var e in m){var t=m[e],n=h.indexOf(e);if(-1<n||p("96",e),!g[n])for(var r in t.extractEvents||p("97",e),g[n]=t,n=t.eventTypes){var o=void 0,a=n[r],i=t,u=r;b.hasOwnProperty(u)&&p("99",u),b[u]=a;var l=a.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&v(l[o],i,u);o=!0}else a.registrationName?(v(a.registrationName,i,u),o=!0):o=!1;o||p("98",r,e)}}}function v(e,t,n){E[e]&&p("100",e),E[e]=t,w[e]=t.eventTypes[n].dependencies}var g=[],b={},E={},w={};function x(e){h&&p("101"),h=Array.prototype.slice.call(e),y()}function C(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];m.hasOwnProperty(t)&&m[t]===r||(m[t]&&p("102",t),m[t]=r,n=!0)}n&&y()}var A={plugins:g,eventNameDispatchConfigs:b,registrationNameModules:E,registrationNameDependencies:w,possibleRegistrationNames:null,injectEventPluginOrder:x,injectEventPluginsByName:C},k=null,_=null,T=null;function O(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=T(r),d.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function S(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function P(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var R=null;function j(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)O(e,t,n[o],r[o]);else n&&O(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function N(e){return j(e,!0)}function M(e){return j(e,!1)}var B={injectEventPluginOrder:x,injectEventPluginsByName:C};function U(e,t){var n=e.stateNode;if(!n)return null;var r=k(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,typeof n),n)}function I(e,t){null!==e&&(R=S(R,e)),e=R,R=null,e&&(P(e,t?N:M),R&&p("95"),d.rethrowCaughtError())}function D(e,t,n,r){for(var o=null,a=0;a<g.length;a++){var i=g[a];i&&(i=i.extractEvents(e,t,n,r))&&(o=S(o,i))}I(o,!1)}var L={injection:B,getListener:U,runEventsInBatch:I,runExtractedEventsInBatch:D},F=Math.random().toString(36).slice(2),z="__reactInternalInstance$"+F,H="__reactEventHandlers$"+F;function q(e){if(e[z])return e[z];for(;!e[z];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[z]).tag||6===e.tag?e:null}function W(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function V(e){return e[H]||null}var G={precacheFiberNode:function(e,t){t[z]=e},getClosestInstanceFromNode:q,getInstanceFromNode:function(e){return!(e=e[z])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:W,getFiberCurrentPropsFromNode:V,updateFiberProps:function(e,t){e[H]=t}};function $(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Y(e,t,n){for(var r=[];e;)r.push(e),e=$(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function K(e,t,n){(t=U(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function X(e){e&&e.dispatchConfig.phasedRegistrationNames&&Y(e._targetInst,K,e)}function Q(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;Y(t=t?$(t):null,K,e)}}function J(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=U(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&J(e._targetInst,null,e)}function ee(e){P(e,X)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,a=r,i=0,u=o;u;u=$(u))i++;u=0;for(var l=a;l;l=$(l))u++;for(;0<i-u;)o=$(o),i--;for(;0<u-i;)a=$(a),u--;for(;i--;){if(o===a||o===a.alternate)break e;o=$(o),a=$(a)}o=null}else o=null;for(a=o,o=[];n&&n!==a&&(null===(i=n.alternate)||i!==a);)o.push(n),n=$(n);for(n=[];r&&r!==a&&(null===(i=r.alternate)||i!==a);)n.push(r),r=$(r);for(r=0;r<o.length;r++)J(o[r],"bubbled",e);for(e=n.length;0<e--;)J(n[e],"captured",t)}var ne={accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){P(e,Q)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){P(e,Z)}};function re(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var oe={animationend:re("Animation","AnimationEnd"),animationiteration:re("Animation","AnimationIteration"),animationstart:re("Animation","AnimationStart"),transitionend:re("Transition","TransitionEnd")},ae={},ie={};function ue(e){if(ae[e])return ae[e];if(!oe[e])return e;var t,n=oe[e];for(t in n)if(n.hasOwnProperty(t)&&t in ie)return ae[e]=n[t];return e}a.canUseDOM&&(ie=document.createElement("div").style,"AnimationEvent"in window||(delete oe.animationend.animation,delete oe.animationiteration.animation,delete oe.animationstart.animation),"TransitionEvent"in window||delete oe.transitionend.transition);var le=ue("animationend"),se=ue("animationiteration"),ce=ue("animationstart"),fe=ue("transitionend"),pe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),de=null;function he(){return!de&&a.canUseDOM&&(de="textContent"in document.documentElement?"textContent":"innerText"),de}var me={_root:null,_startText:null,_fallbackText:null};function ye(){if(me._fallbackText)return me._fallbackText;var e,t,n=me._startText,r=n.length,o=ve(),a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return me._fallbackText=o.slice(e,1<t?1-t:void 0),me._fallbackText}function ve(){return"value"in me._root?me._root.value:me._root[he()]}var ge="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),be={type:null,target:null,currentTarget:u.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function Ee(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?u.thatReturnsTrue:u.thatReturnsFalse,this.isPropagationStopped=u.thatReturnsFalse,this}function we(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function xe(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Ce(e){e.eventPool=[],e.getPooled=we,e.release=xe}i(Ee.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=u.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=u.thatReturnsTrue)},persist:function(){this.isPersistent=u.thatReturnsTrue},isPersistent:u.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ge.length;t++)this[ge[t]]=null}}),Ee.Interface=be,Ee.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,Ce(n),n},Ce(Ee);var Ae=Ee.extend({data:null}),ke=Ee.extend({data:null}),_e=[9,13,27,32],Te=a.canUseDOM&&"CompositionEvent"in window,Oe=null;a.canUseDOM&&"documentMode"in document&&(Oe=document.documentMode);var Se=a.canUseDOM&&"TextEvent"in window&&!Oe,Pe=a.canUseDOM&&(!Te||Oe&&8<Oe&&11>=Oe),Re=String.fromCharCode(32),je={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Ne=!1;function Me(e,t){switch(e){case"keyup":return-1!==_e.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Be(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ue=!1;var Ie={eventTypes:je,extractEvents:function(e,t,n,r){var o=void 0,a=void 0;if(Te)e:{switch(e){case"compositionstart":o=je.compositionStart;break e;case"compositionend":o=je.compositionEnd;break e;case"compositionupdate":o=je.compositionUpdate;break e}o=void 0}else Ue?Me(e,n)&&(o=je.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=je.compositionStart);return o?(Pe&&(Ue||o!==je.compositionStart?o===je.compositionEnd&&Ue&&(a=ye()):(me._root=r,me._startText=ve(),Ue=!0)),o=Ae.getPooled(o,t,n,r),a?o.data=a:null!==(a=Be(n))&&(o.data=a),ee(o),a=o):a=null,(e=Se?function(e,t){switch(e){case"compositionend":return Be(t);case"keypress":return 32!==t.which?null:(Ne=!0,Re);case"textInput":return(e=t.data)===Re&&Ne?null:e;default:return null}}(e,n):function(e,t){if(Ue)return"compositionend"===e||!Te&&Me(e,t)?(e=ye(),me._root=null,me._startText=null,me._fallbackText=null,Ue=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Pe?null:t.data;default:return null}}(e,n))?((t=ke.getPooled(je.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===a?t:null===t?a:[a,t]}},De=null,Le={injectFiberControlledHostComponent:function(e){De=e}},Fe=null,ze=null;function He(e){if(e=_(e)){De&&"function"==typeof De.restoreControlledState||p("194");var t=k(e.stateNode);De.restoreControlledState(e.stateNode,e.type,t)}}function qe(e){Fe?ze?ze.push(e):ze=[e]:Fe=e}function We(){return null!==Fe||null!==ze}function Ve(){if(Fe){var e=Fe,t=ze;if(ze=Fe=null,He(e),t)for(e=0;e<t.length;e++)He(t[e])}}var Ge={injection:Le,enqueueStateRestore:qe,needsStateRestore:We,restoreStateIfNeeded:Ve};function $e(e,t){return e(t)}function Ye(e,t,n){return e(t,n)}function Ke(){}var Xe=!1;function Qe(e,t){if(Xe)return e(t);Xe=!0;try{return $e(e,t)}finally{Xe=!1,We()&&(Ke(),Ve())}}var Je={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ze(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Je[e.type]:"textarea"===t}function et(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function tt(e,t){return!(!a.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function nt(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function rt(e){e._valueTracker||(e._valueTracker=function(e){var t=nt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ot(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=nt(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var at=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,it="function"==typeof Symbol&&Symbol.for,ut=it?Symbol.for("react.element"):60103,lt=it?Symbol.for("react.portal"):60106,st=it?Symbol.for("react.fragment"):60107,ct=it?Symbol.for("react.strict_mode"):60108,ft=it?Symbol.for("react.profiler"):60114,pt=it?Symbol.for("react.provider"):60109,dt=it?Symbol.for("react.context"):60110,ht=it?Symbol.for("react.async_mode"):60111,mt=it?Symbol.for("react.forward_ref"):60112,yt=it?Symbol.for("react.timeout"):60113,vt="function"==typeof Symbol&&Symbol.iterator;function gt(e){return null===e||void 0===e?null:"function"==typeof(e=vt&&e[vt]||e["@@iterator"])?e:null}function bt(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case ht:return"AsyncMode";case dt:return"Context.Consumer";case st:return"ReactFragment";case lt:return"ReactPortal";case ft:return"Profiler("+e.pendingProps.id+")";case pt:return"Context.Provider";case ct:return"StrictMode";case yt:return"Timeout"}if("object"==typeof t&&null!==t)switch(t.$$typeof){case mt:return""!==(e=t.render.displayName||t.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function Et(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=bt(e),a=null;n&&(a=bt(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":a?" (created by "+a+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var wt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,xt=Object.prototype.hasOwnProperty,Ct={},At={};function kt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var _t={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){_t[e]=new kt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];_t[t]=new kt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){_t[e]=new kt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){_t[e]=new kt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){_t[e]=new kt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){_t[e]=new kt(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){_t[e]=new kt(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){_t[e]=new kt(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){_t[e]=new kt(e,5,!1,e.toLowerCase(),null)});var Tt=/[\-:]([a-z])/g;function Ot(e){return e[1].toUpperCase()}function St(e,t,n,r){var o=_t.hasOwnProperty(t)?_t[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!xt.call(At,e)||!xt.call(Ct,e)&&(wt.test(e)?At[e]=!0:(Ct[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Pt(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Rt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Ut(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function jt(e,t){null!=(t=t.checked)&&St(e,"checked",t,!1)}function Nt(e,t){jt(e,t);var n=Ut(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?Bt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Bt(e,t.type,Ut(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Mt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){t=""+e._wrapperState.initialValue;var r=e.value;n||t===r||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==n&&(e.name=n)}function Bt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ut(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Tt,Ot);_t[t]=new kt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Tt,Ot);_t[t]=new kt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Tt,Ot);_t[t]=new kt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),_t.tabIndex=new kt("tabIndex",1,!1,"tabindex",null);var It={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Dt(e,t,n){return(e=Ee.getPooled(It.change,e,t,n)).type="change",qe(n),ee(e),e}var Lt=null,Ft=null;function zt(e){I(e,!1)}function Ht(e){if(ot(W(e)))return e}function qt(e,t){if("change"===e)return t}var Wt=!1;function Vt(){Lt&&(Lt.detachEvent("onpropertychange",Gt),Ft=Lt=null)}function Gt(e){"value"===e.propertyName&&Ht(Ft)&&Qe(zt,e=Dt(Ft,e,et(e)))}function $t(e,t,n){"focus"===e?(Vt(),Ft=n,(Lt=t).attachEvent("onpropertychange",Gt)):"blur"===e&&Vt()}function Yt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Ht(Ft)}function Kt(e,t){if("click"===e)return Ht(t)}function Xt(e,t){if("input"===e||"change"===e)return Ht(t)}a.canUseDOM&&(Wt=tt("input")&&(!document.documentMode||9<document.documentMode));var Qt={eventTypes:It,_isInputEventSupported:Wt,extractEvents:function(e,t,n,r){var o=t?W(t):window,a=void 0,i=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?a=qt:Ze(o)?Wt?a=Xt:(a=Yt,i=$t):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Kt),a&&(a=a(e,t)))return Dt(a,n,r);i&&i(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Bt(o,"number",o.value)}},Jt=Ee.extend({view:null,detail:null}),Zt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function en(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Zt[e])&&!!t[e]}function tn(){return en}var nn=Jt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:tn,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),rn=nn.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),on={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},an={eventTypes:on,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,t=(t=n.relatedTarget||n.toElement)?q(t):null):a=null,a===t)return null;var i=void 0,u=void 0,l=void 0,s=void 0;return"mouseout"===e||"mouseover"===e?(i=nn,u=on.mouseLeave,l=on.mouseEnter,s="mouse"):"pointerout"!==e&&"pointerover"!==e||(i=rn,u=on.pointerLeave,l=on.pointerEnter,s="pointer"),e=null==a?o:W(a),o=null==t?o:W(t),(u=i.getPooled(u,a,n,r)).type=s+"leave",u.target=e,u.relatedTarget=o,(n=i.getPooled(l,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=e,te(u,n,a,t),[u,n]}};function un(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function ln(e){2!==un(e)&&p("188")}function sn(e){var t=e.alternate;if(!t)return 3===(t=un(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var i=o.child;i;){if(i===n)return ln(o),e;if(i===r)return ln(o),t;i=i.sibling}p("188")}if(n.return!==r.return)n=o,r=a;else{i=!1;for(var u=o.child;u;){if(u===n){i=!0,n=o,r=a;break}if(u===r){i=!0,r=o,n=a;break}u=u.sibling}if(!i){for(u=a.child;u;){if(u===n){i=!0,n=a,r=o;break}if(u===r){i=!0,r=a,n=o;break}u=u.sibling}i||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}function cn(e){if(!(e=sn(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var fn=Ee.extend({animationName:null,elapsedTime:null,pseudoElement:null}),pn=Ee.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),dn=Jt.extend({relatedTarget:null});function hn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var mn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},yn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},vn=Jt.extend({key:function(e){if(e.key){var t=mn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=hn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?yn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:tn,charCode:function(e){return"keypress"===e.type?hn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?hn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),gn=nn.extend({dataTransfer:null}),bn=Jt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:tn}),En=Ee.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),wn=nn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),xn=[["abort","abort"],[le,"animationEnd"],[se,"animationIteration"],[ce,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[fe,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],Cn={},An={};function kn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},Cn[e]=t,An[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){kn(e,!0)}),xn.forEach(function(e){kn(e,!1)});var _n={eventTypes:Cn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=An[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=An[e];if(!o)return null;switch(e){case"keypress":if(0===hn(n))return null;case"keydown":case"keyup":e=vn;break;case"blur":case"focus":e=dn;break;case"click":if(2===n.button)return null;case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=nn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=bn;break;case le:case se:case ce:e=fn;break;case fe:e=En;break;case"scroll":e=Jt;break;case"wheel":e=wn;break;case"copy":case"cut":case"paste":e=pn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=rn;break;default:e=Ee}return ee(t=e.getPooled(o,t,n,r)),t}},Tn=_n.isInteractiveTopLevelEventType,On=[];function Sn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=q(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],D(e.topLevelType,t,e.nativeEvent,et(e.nativeEvent))}var Pn=!0;function Rn(e){Pn=!!e}function jn(e,t){if(!t)return null;var n=(Tn(e)?Mn:Bn).bind(null,e);t.addEventListener(e,n,!1)}function Nn(e,t){if(!t)return null;var n=(Tn(e)?Mn:Bn).bind(null,e);t.addEventListener(e,n,!0)}function Mn(e,t){Ye(Bn,e,t)}function Bn(e,t){if(Pn){var n=et(t);if(null===(n=q(n))||"number"!=typeof n.tag||2===un(n)||(n=null),On.length){var r=On.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Qe(Sn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>On.length&&On.push(e)}}}var Un={get _enabled(){return Pn},setEnabled:Rn,isEnabled:function(){return Pn},trapBubbledEvent:jn,trapCapturedEvent:Nn,dispatchEvent:Bn},In={},Dn=0,Ln="_reactListenersID"+(""+Math.random()).slice(2);function Fn(e){return Object.prototype.hasOwnProperty.call(e,Ln)||(e[Ln]=Dn++,In[e[Ln]]={}),In[e[Ln]]}function zn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Hn(e,t){var n,r=zn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=zn(r)}}function qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Wn=a.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Vn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Gn=null,$n=null,Yn=null,Kn=!1;function Xn(e,t){if(Kn||null==Gn||Gn!==l())return null;var n=Gn;return"selectionStart"in n&&qn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Yn&&s(Yn,n)?null:(Yn=n,(e=Ee.getPooled(Vn.select,$n,e,t)).type="select",e.target=Gn,ee(e),e)}var Qn={eventTypes:Vn,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Fn(a),o=w.onSelect;for(var i=0;i<o.length;i++){var u=o[i];if(!a.hasOwnProperty(u)||!a[u]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?W(t):window,e){case"focus":(Ze(a)||"true"===a.contentEditable)&&(Gn=a,$n=t,Yn=null);break;case"blur":Yn=$n=Gn=null;break;case"mousedown":Kn=!0;break;case"contextmenu":case"mouseup":return Kn=!1,Xn(n,r);case"selectionchange":if(Wn)break;case"keydown":case"keyup":return Xn(n,r)}return null}};B.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=G.getFiberCurrentPropsFromNode,_=G.getInstanceFromNode,T=G.getNodeFromInstance,B.injectEventPluginsByName({SimpleEventPlugin:_n,EnterLeaveEventPlugin:an,ChangeEventPlugin:Qt,SelectEventPlugin:Qn,BeforeInputEventPlugin:Ie});var Jn="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,Zn=Date,er=setTimeout,tr=clearTimeout,nr=void 0;if("object"==typeof performance&&"function"==typeof performance.now){var rr=performance;nr=function(){return rr.now()}}else nr=function(){return Zn.now()};var or=void 0,ar=void 0;if(a.canUseDOM){var ir="function"==typeof Jn?Jn:function(){p("276")},ur=null,lr=null,sr=-1,cr=!1,fr=!1,pr=0,dr=33,hr=33,mr={didTimeout:!1,timeRemaining:function(){var e=pr-nr();return 0<e?e:0}},yr=function(e,t){var n=e.scheduledCallback,r=!1;try{n(t),r=!0}finally{ar(e),r||(cr=!0,window.postMessage(vr,"*"))}},vr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===vr&&(cr=!1,null!==ur)){if(null!==ur){var t=nr();if(!(-1===sr||sr>t)){e=-1;for(var n=[],r=ur;null!==r;){var o=r.timeoutTime;-1!==o&&o<=t?n.push(r):-1!==o&&(-1===e||o<e)&&(e=o),r=r.next}if(0<n.length)for(mr.didTimeout=!0,t=0,r=n.length;t<r;t++)yr(n[t],mr);sr=e}}for(e=nr();0<pr-e&&null!==ur;)e=ur,mr.didTimeout=!1,yr(e,mr),e=nr();null===ur||fr||(fr=!0,ir(gr))}},!1);var gr=function(e){fr=!1;var t=e-pr+hr;t<hr&&dr<hr?(8>t&&(t=8),hr=t<dr?dr:t):dr=t,pr=e+hr,cr||(cr=!0,window.postMessage(vr,"*"))};or=function(e,t){var n=-1;return null!=t&&"number"==typeof t.timeout&&(n=nr()+t.timeout),(-1===sr||-1!==n&&n<sr)&&(sr=n),e={scheduledCallback:e,timeoutTime:n,prev:null,next:null},null===ur?ur=e:null!==(t=e.prev=lr)&&(t.next=e),lr=e,fr||(fr=!0,ir(gr)),e},ar=function(e){if(null!==e.prev||ur===e){var t=e.next,n=e.prev;e.next=null,e.prev=null,null!==t?null!==n?(n.next=t,t.prev=n):(t.prev=null,ur=t):null!==n?(n.next=null,lr=n):lr=ur=null}}}else{var br=new Map;or=function(e){var t={scheduledCallback:e,timeoutTime:0,next:null,prev:null},n=er(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})});return br.set(e,n),t},ar=function(e){var t=br.get(e.scheduledCallback);br.delete(e),tr(t)}}function Er(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function wr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function xr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Cr(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ar(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function kr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function _r(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Tr={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Or(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Sr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Or(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Pr=void 0,Rr=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Tr.svg||"innerHTML"in e)e.innerHTML=t;else{for((Pr=Pr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Pr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function jr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Nr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Mr=["Webkit","ms","Moz","O"];function Br(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,a=t[n];o=null==a||"boolean"==typeof a||""===a?"":r||"number"!=typeof a||0===a||Nr.hasOwnProperty(o)&&Nr[o]?(""+a).trim():a+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Nr).forEach(function(e){Mr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Nr[t]=Nr[e]})});var Ur=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ir(e,t,n){t&&(Ur[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",n()))}function Dr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Lr=u.thatReturns("");function Fr(e,t){var n=Fn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Nn("scroll",e);break;case"focus":case"blur":Nn("focus",e),Nn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":tt(o,!0)&&Nn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===pe.indexOf(o)&&jn(o,e)}n[o]=!0}}}function zr(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Tr.html&&(r=Or(e)),r===Tr.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function Hr(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function qr(e,t,n,r){var o=Dr(t,n);switch(t){case"iframe":case"object":jn("load",e);var a=n;break;case"video":case"audio":for(a=0;a<pe.length;a++)jn(pe[a],e);a=n;break;case"source":jn("error",e),a=n;break;case"img":case"image":case"link":jn("error",e),jn("load",e),a=n;break;case"form":jn("reset",e),jn("submit",e),a=n;break;case"details":jn("toggle",e),a=n;break;case"input":Rt(e,n),a=Pt(e,n),jn("invalid",e),Fr(r,"onChange");break;case"option":a=Er(e,n);break;case"select":xr(e,n),a=i({},n,{value:void 0}),jn("invalid",e),Fr(r,"onChange");break;case"textarea":Ar(e,n),a=Cr(e,n),jn("invalid",e),Fr(r,"onChange");break;default:a=n}Ir(t,a,Lr);var l,s=a;for(l in s)if(s.hasOwnProperty(l)){var c=s[l];"style"===l?Br(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&Rr(e,c):"children"===l?"string"==typeof c?("textarea"!==t||""!==c)&&jr(e,c):"number"==typeof c&&jr(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(E.hasOwnProperty(l)?null!=c&&Fr(r,l):null!=c&&St(e,l,c,o))}switch(t){case"input":rt(e),Mt(e,n,!1);break;case"textarea":rt(e),_r(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?wr(e,!!n.multiple,t,!1):null!=n.defaultValue&&wr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=u)}}function Wr(e,t,n,r,o){var a=null;switch(t){case"input":n=Pt(e,n),r=Pt(e,r),a=[];break;case"option":n=Er(e,n),r=Er(e,r),a=[];break;case"select":n=i({},n,{value:void 0}),r=i({},r,{value:void 0}),a=[];break;case"textarea":n=Cr(e,n),r=Cr(e,r),a=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=u)}Ir(t,r,Lr),t=e=void 0;var l=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var s=n[e];for(t in s)s.hasOwnProperty(t)&&(l||(l={}),l[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(E.hasOwnProperty(e)?a||(a=[]):(a=a||[]).push(e,null));for(e in r){var c=r[e];if(s=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&c!==s&&(null!=c||null!=s))if("style"===e)if(s){for(t in s)!s.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(l||(l={}),l[t]="");for(t in c)c.hasOwnProperty(t)&&s[t]!==c[t]&&(l||(l={}),l[t]=c[t])}else l||(a||(a=[]),a.push(e,l)),l=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(a=a||[]).push(e,""+c)):"children"===e?s===c||"string"!=typeof c&&"number"!=typeof c||(a=a||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(E.hasOwnProperty(e)?(null!=c&&Fr(o,e),a||s===c||(a=[])):(a=a||[]).push(e,c))}return l&&(a=a||[]).push("style",l),a}function Vr(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&jt(e,o),Dr(n,r),r=Dr(n,o);for(var a=0;a<t.length;a+=2){var i=t[a],u=t[a+1];"style"===i?Br(e,u):"dangerouslySetInnerHTML"===i?Rr(e,u):"children"===i?jr(e,u):St(e,i,u,r)}switch(n){case"input":Nt(e,o);break;case"textarea":kr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?wr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?wr(e,!!o.multiple,o.defaultValue,!0):wr(e,!!o.multiple,o.multiple?[]:"",!1))}}function Gr(e,t,n,r,o){switch(t){case"iframe":case"object":jn("load",e);break;case"video":case"audio":for(r=0;r<pe.length;r++)jn(pe[r],e);break;case"source":jn("error",e);break;case"img":case"image":case"link":jn("error",e),jn("load",e);break;case"form":jn("reset",e),jn("submit",e);break;case"details":jn("toggle",e);break;case"input":Rt(e,n),jn("invalid",e),Fr(o,"onChange");break;case"select":xr(e,n),jn("invalid",e),Fr(o,"onChange");break;case"textarea":Ar(e,n),jn("invalid",e),Fr(o,"onChange")}for(var a in Ir(t,n,Lr),r=null,n)if(n.hasOwnProperty(a)){var i=n[a];"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):E.hasOwnProperty(a)&&null!=i&&Fr(o,a)}switch(t){case"input":rt(e),Mt(e,n,!0);break;case"textarea":rt(e),_r(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=u)}return r}function $r(e,t){return e.nodeValue!==t}var Yr={createElement:zr,createTextNode:Hr,setInitialProperties:qr,diffProperties:Wr,updateProperties:Vr,diffHydratedProperties:Gr,diffHydratedText:$r,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Nt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=V(r);o||p("90"),ot(r),Nt(r,o)}}}break;case"textarea":kr(e,n);break;case"select":null!=(t=n.value)&&wr(e,!!n.multiple,t,!1)}}},Kr=null,Xr=null;function Qr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Jr(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html}var Zr=nr,eo=or,to=ar;function no(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function ro(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var oo=[],ao=-1;function io(e){return{current:e}}function uo(e){0>ao||(e.current=oo[ao],oo[ao]=null,ao--)}function lo(e,t){oo[++ao]=e.current,e.current=t}var so=io(f),co=io(!1),fo=f;function po(e){return mo(e)?fo:so.current}function ho(e,t){var n=e.type.contextTypes;if(!n)return f;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function mo(e){return 2===e.tag&&null!=e.type.childContextTypes}function yo(e){mo(e)&&(uo(co),uo(so))}function vo(e){uo(co),uo(so)}function go(e,t,n){so.current!==f&&p("168"),lo(so,t),lo(co,n)}function bo(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||p("108",bt(e)||"Unknown",o);return i({},t,n)}function Eo(e){if(!mo(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,fo=so.current,lo(so,t),lo(co,co.current),!0}function wo(e,t){var n=e.stateNode;if(n||p("169"),t){var r=bo(e,fo);n.__reactInternalMemoizedMergedChildContext=r,uo(co),uo(so),lo(so,r)}else uo(co);lo(co,t)}function xo(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Co(e,t,n){var r=e.alternate;return null===r?((r=new xo(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Ao(e,t,n){var r=e.type,o=e.key;if(e=e.props,"function"==typeof r)var a=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)a=5;else switch(r){case st:return ko(e.children,t,n,o);case ht:a=11,t|=3;break;case ct:a=11,t|=2;break;case ft:return(r=new xo(15,e,o,4|t)).type=ft,r.expirationTime=n,r;case yt:a=16,t|=2;break;default:e:{switch("object"==typeof r&&null!==r?r.$$typeof:null){case pt:a=13;break e;case dt:a=12;break e;case mt:a=14;break e;default:p("130",null==r?r:typeof r,"")}a=void 0}}return(t=new xo(a,e,o,t)).type=r,t.expirationTime=n,t}function ko(e,t,n,r){return(e=new xo(10,e,r,t)).expirationTime=n,e}function _o(e,t,n){return(e=new xo(6,e,null,t)).expirationTime=n,e}function To(e,t,n){return(t=new xo(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Oo(e,t,n){return e={current:t=new xo(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e}var So=null,Po=null;function Ro(e){return function(t){try{return e(t)}catch(e){}}}function jo(e){"function"==typeof So&&So(e)}function No(e){"function"==typeof Po&&Po(e)}var Mo=!1;function Bo(e){return{expirationTime:0,baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Uo(e){return{expirationTime:e.expirationTime,baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Io(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Do(e,t,n){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t),(0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n)}function Lo(e,t,n){var r=e.alternate;if(null===r){var o=e.updateQueue,a=null;null===o&&(o=e.updateQueue=Bo(e.memoizedState))}else o=e.updateQueue,a=r.updateQueue,null===o?null===a?(o=e.updateQueue=Bo(e.memoizedState),a=r.updateQueue=Bo(r.memoizedState)):o=e.updateQueue=Uo(a):null===a&&(a=r.updateQueue=Uo(o));null===a||o===a?Do(o,t,n):null===o.lastUpdate||null===a.lastUpdate?(Do(o,t,n),Do(a,t,n)):(Do(o,t,n),a.lastUpdate=t)}function Fo(e,t,n){var r=e.updateQueue;null===(r=null===r?e.updateQueue=Bo(e.memoizedState):zo(e,r)).lastCapturedUpdate?r.firstCapturedUpdate=r.lastCapturedUpdate=t:(r.lastCapturedUpdate.next=t,r.lastCapturedUpdate=t),(0===r.expirationTime||r.expirationTime>n)&&(r.expirationTime=n)}function zo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Uo(t)),t}function Ho(e,t,n,r,o,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,o):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null===(o="function"==typeof(e=n.payload)?e.call(a,r,o):e)||void 0===o)break;return i({},r,o);case 2:Mo=!0}return r}function qo(e,t,n,r,o){if(Mo=!1,!(0===t.expirationTime||t.expirationTime>o)){for(var a=(t=zo(e,t)).baseState,i=null,u=0,l=t.firstUpdate,s=a;null!==l;){var c=l.expirationTime;c>o?(null===i&&(i=l,a=s),(0===u||u>c)&&(u=c)):(s=Ho(e,0,l,s,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(c=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f>o?(null===c&&(c=l,null===i&&(a=s)),(0===u||u>f)&&(u=f)):(s=Ho(e,0,l,s,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===i&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===c&&(a=s),t.baseState=a,t.firstUpdate=i,t.firstCapturedUpdate=c,t.expirationTime=u,e.memoizedState=s}}function Wo(e,t){"function"!=typeof e&&p("191",e),e.call(t)}function Vo(e,t,n){for(null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),e=t.firstEffect,t.firstEffect=t.lastEffect=null;null!==e;){var r=e.callback;null!==r&&(e.callback=null,Wo(r,n)),e=e.nextEffect}for(e=t.firstCapturedEffect,t.firstCapturedEffect=t.lastCapturedEffect=null;null!==e;)null!==(t=e.callback)&&(e.callback=null,Wo(t,n)),e=e.nextEffect}function Go(e,t){return{value:e,source:t,stack:Et(t)}}var $o=io(null),Yo=io(null),Ko=io(0);function Xo(e){var t=e.type._context;lo(Ko,t._changedBits),lo(Yo,t._currentValue),lo($o,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode}function Qo(e){var t=Ko.current,n=Yo.current;uo($o),uo(Yo),uo(Ko),(e=e.type._context)._currentValue=n,e._changedBits=t}var Jo={},Zo=io(Jo),ea=io(Jo),ta=io(Jo);function na(e){return e===Jo&&p("174"),e}function ra(e,t){lo(ta,t),lo(ea,e),lo(Zo,Jo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Sr(null,"");break;default:t=Sr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}uo(Zo),lo(Zo,t)}function oa(e){uo(Zo),uo(ea),uo(ta)}function aa(e){ea.current===e&&(uo(Zo),uo(ea))}function ia(e,t,n){var r=e.memoizedState;r=null===(t=t(n,r))||void 0===t?r:i({},r,t),e.memoizedState=r,null!==(e=e.updateQueue)&&0===e.expirationTime&&(e.baseState=r)}var ua={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===un(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=bi(),o=Io(r=vi(r,e));o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Lo(e,o,r),gi(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=bi(),o=Io(r=vi(r,e));o.tag=1,o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Lo(e,o,r),gi(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=bi(),r=Io(n=vi(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),Lo(e,r,n),gi(e,n)}};function la(e,t,n,r,o,a){var i=e.stateNode;return e=e.type,"function"==typeof i.shouldComponentUpdate?i.shouldComponentUpdate(n,o,a):!e.prototype||!e.prototype.isPureReactComponent||(!s(t,n)||!s(r,o))}function sa(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ua.enqueueReplaceState(t,t.state,null)}function ca(e,t){var n=e.type,r=e.stateNode,o=e.pendingProps,a=po(e);r.props=o,r.state=e.memoizedState,r.refs=f,r.context=ho(e,a),null!==(a=e.updateQueue)&&(qo(e,a,o,r,t),r.state=e.memoizedState),"function"==typeof(a=e.type.getDerivedStateFromProps)&&(ia(e,a,o),r.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(n=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),n!==r.state&&ua.enqueueReplaceState(r,r.state,null),null!==(a=e.updateQueue)&&(qo(e,a,o,r,t),r.state=e.memoizedState)),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var fa=Array.isArray;function pa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),r=n.stateNode),r||p("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&p("148"),n._owner||p("254",e)}return e}function da(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function ha(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Co(e,t,n)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function i(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=_o(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function l(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=pa(e,t,n),r.return=e,r):((r=Ao(n,e.mode,r)).ref=pa(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=To(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function c(e,t,n,r,a){return null===t||10!==t.tag?((t=ko(n,e.mode,r,a)).return=e,t):((t=o(t,n,r)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=_o(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ut:return(n=Ao(t,e.mode,n)).ref=pa(e,null,t),n.return=e,n;case lt:return(t=To(t,e.mode,n)).return=e,t}if(fa(t)||gt(t))return(t=ko(t,e.mode,n,null)).return=e,t;da(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ut:return n.key===o?n.type===st?c(e,t,n.props.children,r,o):l(e,t,n,r):null;case lt:return n.key===o?s(e,t,n,r):null}if(fa(n)||gt(n))return null!==o?null:c(e,t,n,r,null);da(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ut:return e=e.get(null===r.key?n:r.key)||null,r.type===st?c(t,e,r.props.children,o,r.key):l(t,e,r,o);case lt:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(fa(r)||gt(r))return c(t,e=e.get(n)||null,r,o,null);da(t,r)}return null}function m(o,i,u,l){for(var s=null,c=null,p=i,m=i=0,y=null;null!==p&&m<u.length;m++){p.index>m?(y=p,p=null):y=p.sibling;var v=d(o,p,u[m],l);if(null===v){null===p&&(p=y);break}e&&p&&null===v.alternate&&t(o,p),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v,p=y}if(m===u.length)return n(o,p),s;if(null===p){for(;m<u.length;m++)(p=f(o,u[m],l))&&(i=a(p,i,m),null===c?s=p:c.sibling=p,c=p);return s}for(p=r(o,p);m<u.length;m++)(y=h(p,o,m,u[m],l))&&(e&&null!==y.alternate&&p.delete(null===y.key?m:y.key),i=a(y,i,m),null===c?s=y:c.sibling=y,c=y);return e&&p.forEach(function(e){return t(o,e)}),s}function y(o,i,u,l){var s=gt(u);"function"!=typeof s&&p("150"),null==(u=s.call(u))&&p("151");for(var c=s=null,m=i,y=i=0,v=null,g=u.next();null!==m&&!g.done;y++,g=u.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=d(o,m,g.value,l);if(null===b){m||(m=v);break}e&&m&&null===b.alternate&&t(o,m),i=a(b,i,y),null===c?s=b:c.sibling=b,c=b,m=v}if(g.done)return n(o,m),s;if(null===m){for(;!g.done;y++,g=u.next())null!==(g=f(o,g.value,l))&&(i=a(g,i,y),null===c?s=g:c.sibling=g,c=g);return s}for(m=r(o,m);!g.done;y++,g=u.next())null!==(g=h(m,o,y,g.value,l))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),i=a(g,i,y),null===c?s=g:c.sibling=g,c=g);return e&&m.forEach(function(e){return t(o,e)}),s}return function(e,r,a,u){var l="object"==typeof a&&null!==a&&a.type===st&&null===a.key;l&&(a=a.props.children);var s="object"==typeof a&&null!==a;if(s)switch(a.$$typeof){case ut:e:{for(s=a.key,l=r;null!==l;){if(l.key===s){if(10===l.tag?a.type===st:l.type===a.type){n(e,l.sibling),(r=o(l,a.type===st?a.props.children:a.props,u)).ref=pa(e,l,a),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}a.type===st?((r=ko(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Ao(a,e.mode,u)).ref=pa(e,r,a),u.return=e,e=u)}return i(e);case lt:e:{for(l=a.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[],u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=To(a,e.mode,u)).return=e,e=r}return i(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a,u)).return=e,e=r):(n(e,r),(r=_o(a,e.mode,u)).return=e,e=r),i(e);if(fa(a))return m(e,r,a,u);if(gt(a))return y(e,r,a,u);if(s&&da(e,a),void 0===a&&!l)switch(e.tag){case 2:case 1:p("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var ma=ha(!0),ya=ha(!1),va=null,ga=null,ba=!1;function Ea(e,t){var n=new xo(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function wa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function xa(e){if(ba){var t=ga;if(t){var n=t;if(!wa(e,t)){if(!(t=no(n))||!wa(e,t))return e.effectTag|=2,ba=!1,void(va=e);Ea(va,n)}va=e,ga=ro(t)}else e.effectTag|=2,ba=!1,va=e}}function Ca(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;va=e}function Aa(e){if(e!==va)return!1;if(!ba)return Ca(e),ba=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Jr(t,e.memoizedProps))for(t=ga;t;)Ea(e,t),t=no(t);return Ca(e),ga=va?no(e.stateNode):null,!0}function ka(){ga=va=null,ba=!1}function _a(e,t,n){Ta(e,t,n,t.expirationTime)}function Ta(e,t,n,r){t.child=null===e?ya(t,null,n,r):ma(t,e.child,n,r)}function Oa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Sa(e,t,n,r,o){Oa(e,t);var a=0!=(64&t.effectTag);if(!n&&!a)return r&&wo(t,!1),ja(e,t);n=t.stateNode,at.current=t;var i=a?null:n.render();return t.effectTag|=1,a&&(Ta(e,t,null,o),t.child=null),Ta(e,t,i,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&wo(t,!0),t.child}function Pa(e){var t=e.stateNode;t.pendingContext?go(0,t.pendingContext,t.pendingContext!==t.context):t.context&&go(0,t.context,!1),ra(e,t.containerInfo)}function Ra(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var a=0|o.stateNode;if(o.type===t&&0!=(a&n)){for(a=o;null!==a;){var i=a.alternate;if(0===a.expirationTime||a.expirationTime>r)a.expirationTime=r,null!==i&&(0===i.expirationTime||i.expirationTime>r)&&(i.expirationTime=r);else{if(null===i||!(0===i.expirationTime||i.expirationTime>r))break;i.expirationTime=r}a=a.return}a=null}else a=o.child;break;case 13:a=o.type===e.type?null:o.child;break;default:a=o.child}if(null!==a)a.return=o;else for(a=o;null!==a;){if(a===e){a=null;break}if(null!==(o=a.sibling)){o.return=a.return,a=o;break}a=a.return}o=a}}function ja(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=Co(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Co(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Na(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:Pa(t);break;case 2:Eo(t);break;case 4:ra(t,t.stateNode.containerInfo);break;case 13:Xo(t)}return null}switch(t.tag){case 0:null!==e&&p("155");var r=t.type,o=t.pendingProps,a=po(t);return r=r(o,a=ho(t,a)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(a=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof(a=a.getDerivedStateFromProps)&&ia(t,a,o),o=Eo(t),r.updater=ua,t.stateNode=r,r._reactInternalFiber=t,ca(t,n),e=Sa(e,t,!0,o,n)):(t.tag=1,_a(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,co.current||t.memoizedProps!==n?(o=o(n,r=ho(t,r=po(t))),t.effectTag|=1,_a(e,t,o),t.memoizedProps=n,e=t.child):e=ja(e,t),e;case 2:if(o=Eo(t),null===e)if(null===t.stateNode){var i=t.pendingProps,u=t.type;r=po(t);var l=2===t.tag&&null!=t.type.contextTypes;i=new u(i,a=l?ho(t,r):f),t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,i.updater=ua,t.stateNode=i,i._reactInternalFiber=t,l&&((l=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,l.__reactInternalMemoizedMaskedChildContext=a),ca(t,n),r=!0}else{u=t.type,r=t.stateNode,l=t.memoizedProps,a=t.pendingProps,r.props=l;var s=r.context;i=ho(t,i=po(t));var c=u.getDerivedStateFromProps;(u="function"==typeof c||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(l!==a||s!==i)&&sa(t,r,a,i),Mo=!1;var d=t.memoizedState;s=r.state=d;var h=t.updateQueue;null!==h&&(qo(t,h,a,r,n),s=t.memoizedState),l!==a||d!==s||co.current||Mo?("function"==typeof c&&(ia(t,c,a),s=t.memoizedState),(l=Mo||la(t,l,a,d,s,i))?(u||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||("function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount()),"function"==typeof r.componentDidMount&&(t.effectTag|=4)):("function"==typeof r.componentDidMount&&(t.effectTag|=4),t.memoizedProps=a,t.memoizedState=s),r.props=a,r.state=s,r.context=i,r=l):("function"==typeof r.componentDidMount&&(t.effectTag|=4),r=!1)}else u=t.type,r=t.stateNode,a=t.memoizedProps,l=t.pendingProps,r.props=a,s=r.context,i=ho(t,i=po(t)),(u="function"==typeof(c=u.getDerivedStateFromProps)||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(a!==l||s!==i)&&sa(t,r,l,i),Mo=!1,s=t.memoizedState,d=r.state=s,null!==(h=t.updateQueue)&&(qo(t,h,l,r,n),d=t.memoizedState),a!==l||s!==d||co.current||Mo?("function"==typeof c&&(ia(t,c,l),d=t.memoizedState),(c=Mo||la(t,a,l,s,d,i))?(u||"function"!=typeof r.UNSAFE_componentWillUpdate&&"function"!=typeof r.componentWillUpdate||("function"==typeof r.componentWillUpdate&&r.componentWillUpdate(l,d,i),"function"==typeof r.UNSAFE_componentWillUpdate&&r.UNSAFE_componentWillUpdate(l,d,i)),"function"==typeof r.componentDidUpdate&&(t.effectTag|=4),"function"==typeof r.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof r.componentDidUpdate||a===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||a===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=l,t.memoizedState=d),r.props=l,r.state=d,r.context=i,r=c):("function"!=typeof r.componentDidUpdate||a===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||a===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return Sa(e,t,r,o,n);case 3:return Pa(t),null!==(o=t.updateQueue)?(r=null!==(r=t.memoizedState)?r.element:null,qo(t,o,t.pendingProps,null,n),(o=t.memoizedState.element)===r?(ka(),e=ja(e,t)):(r=t.stateNode,(r=(null===e||null===e.child)&&r.hydrate)&&(ga=ro(t.stateNode.containerInfo),va=t,r=ba=!0),r?(t.effectTag|=2,t.child=ya(t,null,o,n)):(ka(),_a(e,t,o)),e=t.child)):(ka(),e=ja(e,t)),e;case 5:return na(ta.current),(o=na(Zo.current))!==(r=Sr(o,t.type))&&(lo(ea,t),lo(Zo,r)),null===e&&xa(t),o=t.type,l=t.memoizedProps,r=t.pendingProps,a=null!==e?e.memoizedProps:null,co.current||l!==r||((l=1&t.mode&&!!r.hidden)&&(t.expirationTime=1073741823),l&&1073741823===n)?(l=r.children,Jr(o,r)?l=null:a&&Jr(o,a)&&(t.effectTag|=16),Oa(e,t),1073741823!==n&&1&t.mode&&r.hidden?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(_a(e,t,l),t.memoizedProps=r,e=t.child)):e=ja(e,t),e;case 6:return null===e&&xa(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 4:return ra(t,t.stateNode.containerInfo),o=t.pendingProps,co.current||t.memoizedProps!==o?(null===e?t.child=ma(t,null,o,n):_a(e,t,o),t.memoizedProps=o,e=t.child):e=ja(e,t),e;case 14:return o=t.type.render,n=t.pendingProps,r=t.ref,co.current||t.memoizedProps!==n||r!==(null!==e?e.ref:null)?(_a(e,t,o=o(n,r)),t.memoizedProps=n,e=t.child):e=ja(e,t),e;case 10:return n=t.pendingProps,co.current||t.memoizedProps!==n?(_a(e,t,n),t.memoizedProps=n,e=t.child):e=ja(e,t),e;case 11:return n=t.pendingProps.children,co.current||null!==n&&t.memoizedProps!==n?(_a(e,t,n),t.memoizedProps=n,e=t.child):e=ja(e,t),e;case 15:return n=t.pendingProps,t.memoizedProps===n?e=ja(e,t):(_a(e,t,n.children),t.memoizedProps=n,e=t.child),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,a=t.memoizedProps,i=!0;if(co.current)i=!1;else if(a===o)return t.stateNode=0,Xo(t),ja(e,t);var u=o.value;if(t.memoizedProps=o,null===a)u=1073741823;else if(a.value===o.value){if(a.children===o.children&&i)return t.stateNode=0,Xo(t),ja(e,t);u=0}else{var l=a.value;if(l===u&&(0!==l||1/l==1/u)||l!=l&&u!=u){if(a.children===o.children&&i)return t.stateNode=0,Xo(t),ja(e,t);u=0}else if(u="function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,u):1073741823,0==(u|=0)){if(a.children===o.children&&i)return t.stateNode=0,Xo(t),ja(e,t)}else Ra(t,r,u,n)}return t.stateNode=u,Xo(t),_a(e,t,o.children),t.child}(e,t,n);case 12:e:if(r=t.type,a=t.pendingProps,l=t.memoizedProps,o=r._currentValue,i=r._changedBits,co.current||0!==i||l!==a){if(t.memoizedProps=a,void 0!==(u=a.unstable_observedBits)&&null!==u||(u=1073741823),t.stateNode=u,0!=(i&u))Ra(t,r,i,n);else if(l===a){e=ja(e,t);break e}n=(n=a.children)(o),t.effectTag|=1,_a(e,t,n),e=t.child}else e=ja(e,t);return e;default:p("156")}}function Ma(e){e.effectTag|=4}var Ba=void 0,Ua=void 0,Ia=void 0;function Da(e,t){var n=t.pendingProps;switch(t.tag){case 1:return null;case 2:return yo(t),null;case 3:oa(),vo();var r=t.stateNode;return r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Aa(t),t.effectTag&=-3),Ba(t),null;case 5:aa(t),r=na(ta.current);var o=t.type;if(null!==e&&null!=t.stateNode){var a=e.memoizedProps,i=t.stateNode,u=na(Zo.current);i=Wr(i,o,a,n,r),Ua(e,t,i,o,a,n,r,u),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!n)return null===t.stateNode&&p("166"),null;if(e=na(Zo.current),Aa(t))n=t.stateNode,o=t.type,a=t.memoizedProps,n[z]=t,n[H]=a,r=Gr(n,o,a,e,r),t.updateQueue=r,null!==r&&Ma(t);else{(e=zr(o,n,r,e))[z]=t,e[H]=n;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}qr(e,o,n,r),Qr(o,n)&&Ma(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ia(e,t,e.memoizedProps,n);else{if("string"!=typeof n)return null===t.stateNode&&p("166"),null;r=na(ta.current),na(Zo.current),Aa(t)?(r=t.stateNode,n=t.memoizedProps,r[z]=t,$r(r,n)&&Ma(t)):((r=Hr(n,r))[z]=t,t.stateNode=r)}return null;case 14:case 16:case 10:case 11:case 15:return null;case 4:return oa(),Ba(t),null;case 13:return Qo(t),null;case 12:return null;case 0:p("167");default:p("156")}}function La(e,t){var n=t.source;null===t.stack&&null!==n&&Et(n),null!==n&&bt(n),t=t.value,null!==e&&2===e.tag&&bt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}function Fa(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){mi(e,t)}else t.current=null}function za(e){switch(No(e),e.tag){case 2:Fa(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){mi(e,t)}break;case 5:Fa(e);break;case 4:Wa(e)}}function Ha(e){return 5===e.tag||3===e.tag||4===e.tag}function qa(e){e:{for(var t=e.return;null!==t;){if(Ha(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(jr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Ha(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var a=t,i=o.stateNode,u=n;8===a.nodeType?a.parentNode.insertBefore(i,u):a.insertBefore(i,u)}else t.insertBefore(o.stateNode,n);else r?(a=t,i=o.stateNode,8===a.nodeType?a.parentNode.insertBefore(i,a):a.appendChild(i)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Wa(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var a=t,i=a;;)if(za(i),null!==i.child&&4!==i.tag)i.child.return=i,i=i.child;else{if(i===a)break;for(;null===i.sibling;){if(null===i.return||i.return===a)break e;i=i.return}i.sibling.return=i.return,i=i.sibling}o?(a=r,i=t.stateNode,8===a.nodeType?a.parentNode.removeChild(i):a.removeChild(i)):r.removeChild(t.stateNode)}else if(4===t.tag?r=t.stateNode.containerInfo:za(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function Va(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&(n[H]=r,Vr(n,a,o,e,r))}break;case 6:null===t.stateNode&&p("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 15:case 16:break;default:p("163")}}function Ga(e,t,n){(n=Io(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ji(r),La(e,t)},n}function $a(e,t,n){(n=Io(n)).tag=3;var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===ci?ci=new Set([this]):ci.add(this);var n=t.value,r=t.stack;La(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function Ya(e,t,n,r,o,a){n.effectTag|=512,n.firstEffect=n.lastEffect=null,r=Go(r,n),e=t;do{switch(e.tag){case 3:return e.effectTag|=1024,void Fo(e,r=Ga(e,r,a),a);case 2:if(t=r,n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&(null===ci||!ci.has(n)))return e.effectTag|=1024,void Fo(e,r=$a(e,t,a),a)}e=e.return}while(null!==e)}function Ka(e){switch(e.tag){case 2:yo(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return oa(),vo(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return aa(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 4:return oa(),null;case 13:return Qo(e),null;default:return null}}Ba=function(){},Ua=function(e,t,n){(t.updateQueue=n)&&Ma(t)},Ia=function(e,t,n,r){n!==r&&Ma(t)};var Xa=Zr(),Qa=2,Ja=Xa,Za=0,ei=0,ti=!1,ni=null,ri=null,oi=0,ai=-1,ii=!1,ui=null,li=!1,si=!1,ci=null;function fi(){if(null!==ni)for(var e=ni.return;null!==e;){var t=e;switch(t.tag){case 2:yo(t);break;case 3:oa(),vo();break;case 5:aa(t);break;case 4:oa();break;case 13:Qo(t)}e=e.return}ri=null,oi=0,ai=-1,ii=!1,ni=null,si=!1}function pi(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=Da(t,e);var o=e;if(1073741823===oi||1073741823!==o.expirationTime){var a=0;switch(o.tag){case 3:case 2:var i=o.updateQueue;null!==i&&(a=i.expirationTime)}for(i=o.child;null!==i;)0!==i.expirationTime&&(0===a||a>i.expirationTime)&&(a=i.expirationTime),i=i.sibling;o.expirationTime=a}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){si=!0;break}e=n}else{if(null!==(e=Ka(e)))return e.effectTag&=511,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function di(e){var t=Na(e.alternate,e,oi);return null===t&&(t=pi(e)),at.current=null,t}function hi(e,t,n){ti&&p("243"),ti=!0,t===oi&&e===ri&&null!==ni||(fi(),oi=t,ai=-1,ni=Co((ri=e).current,null,oi),e.pendingCommitExpirationTime=0);var r=!1;for(ii=!n||oi<=Qa;;){try{if(n)for(;null!==ni&&!Qi();)ni=di(ni);else for(;null!==ni;)ni=di(ni)}catch(t){if(null===ni)r=!0,Ji(t);else{null===ni&&p("271");var o=(n=ni).return;if(null===o){r=!0,Ji(t);break}Ya(e,o,n,t,0,oi),ni=pi(n)}}break}if(ti=!1,r)return null;if(null===ni){if(si)return e.pendingCommitExpirationTime=t,e.current.alternate;ii&&p("262"),0<=ai&&setTimeout(function(){var t=e.current.expirationTime;0!==t&&(0===e.remainingExpirationTime||e.remainingExpirationTime<t)&&Hi(e,t)},ai),function(e){null===Ti&&p("246"),Ti.remainingExpirationTime=e}(e.current.expirationTime)}return null}function mi(e,t){var n;e:{for(ti&&!li&&p("263"),n=e.return;null!==n;){switch(n.tag){case 2:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===ci||!ci.has(r))){Lo(n,e=$a(n,e=Go(t,e),1),1),gi(n,1),n=void 0;break e}break;case 3:Lo(n,e=Ga(n,e=Go(t,e),1),1),gi(n,1),n=void 0;break e}n=n.return}3===e.tag&&(Lo(e,n=Ga(e,n=Go(t,e),1),1),gi(e,1)),n=void 0}return n}function yi(){var e=2+25*(1+((bi()-2+500)/25|0));return e<=Za&&(e=Za+1),Za=e}function vi(e,t){return e=0!==ei?ei:ti?li?1:oi:1&t.mode?Ui?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)):1,Ui&&(0===Si||e>Si)&&(Si=e),e}function gi(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!ti&&0!==oi&&t<oi&&fi();var r=n.current.expirationTime;ti&&!li&&ri===n||Hi(n,r),Li>Di&&p("185")}e=e.return}}function bi(){return Ja=Zr()-Xa,Qa=2+(Ja/10|0)}function Ei(e){var t=ei;ei=2+25*(1+((bi()-2+500)/25|0));try{return e()}finally{ei=t}}function wi(e,t,n,r,o){var a=ei;ei=1;try{return e(t,n,r,o)}finally{ei=a}}var xi=null,Ci=null,Ai=0,ki=void 0,_i=!1,Ti=null,Oi=0,Si=0,Pi=!1,Ri=!1,ji=null,Ni=null,Mi=!1,Bi=!1,Ui=!1,Ii=null,Di=1e3,Li=0,Fi=1;function zi(e){if(0!==Ai){if(e>Ai)return;null!==ki&&to(ki)}var t=Zr()-Xa;Ai=e,ki=eo(Wi,{timeout:10*(e-2)-t})}function Hi(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===Ci?(xi=Ci=e,e.nextScheduledRoot=e):(Ci=Ci.nextScheduledRoot=e).nextScheduledRoot=xi;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}_i||(Mi?Bi&&(Ti=e,Oi=1,Ki(e,1,!1)):1===t?Vi():zi(t))}function qi(){var e=0,t=null;if(null!==Ci)for(var n=Ci,r=xi;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===Ci)&&p("244"),r===r.nextScheduledRoot){xi=Ci=r.nextScheduledRoot=null;break}if(r===xi)xi=o=r.nextScheduledRoot,Ci.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===Ci){(Ci=n).nextScheduledRoot=xi,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===Ci)break;n=r,r=r.nextScheduledRoot}}null!==(n=Ti)&&n===t&&1===e?Li++:Li=0,Ti=t,Oi=e}function Wi(e){Gi(0,!0,e)}function Vi(){Gi(1,!1,null)}function Gi(e,t,n){if(Ni=n,qi(),t)for(;null!==Ti&&0!==Oi&&(0===e||e>=Oi)&&(!Pi||bi()>=Oi);)bi(),Ki(Ti,Oi,!Pi),qi();else for(;null!==Ti&&0!==Oi&&(0===e||e>=Oi);)Ki(Ti,Oi,!1),qi();null!==Ni&&(Ai=0,ki=null),0!==Oi&&zi(Oi),Ni=null,Pi=!1,Yi()}function $i(e,t){_i&&p("253"),Ti=e,Oi=t,Ki(e,t,!1),Vi(),Yi()}function Yi(){if(Li=0,null!==Ii){var e=Ii;Ii=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Ri||(Ri=!0,ji=e)}}}if(Ri)throw e=ji,ji=null,Ri=!1,e}function Ki(e,t,n){_i&&p("245"),_i=!0,n?null!==(n=e.finishedWork)?Xi(e,n,t):null!==(n=hi(e,t,!0))&&(Qi()?e.finishedWork=n:Xi(e,n,t)):null!==(n=e.finishedWork)?Xi(e,n,t):null!==(n=hi(e,t,!1))&&Xi(e,n,t),_i=!1}function Xi(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ii?Ii=[r]:Ii.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);if(e.finishedWork=null,li=ti=!0,(n=t.stateNode).current===t&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0,bi(),at.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var o=t.firstEffect}else o=t;else o=t.firstEffect;Kr=Pn;var a=l();if(qn(a)){if("selectionStart"in a)var i={start:a.selectionStart,end:a.selectionEnd};else e:{var u=window.getSelection&&window.getSelection();if(u&&0!==u.rangeCount){i=u.anchorNode;var s=u.anchorOffset,f=u.focusNode;u=u.focusOffset;try{i.nodeType,f.nodeType}catch(e){i=null;break e}var d=0,h=-1,m=-1,y=0,v=0,g=a,b=null;t:for(;;){for(var E;g!==i||0!==s&&3!==g.nodeType||(h=d+s),g!==f||0!==u&&3!==g.nodeType||(m=d+u),3===g.nodeType&&(d+=g.nodeValue.length),null!==(E=g.firstChild);)b=g,g=E;for(;;){if(g===a)break t;if(b===i&&++y===s&&(h=d),b===f&&++v===u&&(m=d),null!==(E=g.nextSibling))break;b=(g=b).parentNode}g=E}i=-1===h||-1===m?null:{start:h,end:m}}else i=null}i=i||{start:0,end:0}}else i=null;for(Xr={focusedElem:a,selectionRange:i},Rn(!1),ui=o;null!==ui;){a=!1,i=void 0;try{for(;null!==ui;){if(256&ui.effectTag){var w=ui.alternate;switch((s=ui).tag){case 2:if(256&s.effectTag&&null!==w){var x=w.memoizedProps,C=w.memoizedState,A=s.stateNode;A.props=s.memoizedProps,A.state=s.memoizedState;var k=A.getSnapshotBeforeUpdate(x,C);A.__reactInternalSnapshotBeforeUpdate=k}break;case 3:case 5:case 6:case 4:break;default:p("163")}}ui=ui.nextEffect}}catch(e){a=!0,i=e}a&&(null===ui&&p("178"),mi(ui,i),null!==ui&&(ui=ui.nextEffect))}for(ui=o;null!==ui;){w=!1,x=void 0;try{for(;null!==ui;){var _=ui.effectTag;if(16&_&&jr(ui.stateNode,""),128&_){var T=ui.alternate;if(null!==T){var O=T.ref;null!==O&&("function"==typeof O?O(null):O.current=null)}}switch(14&_){case 2:qa(ui),ui.effectTag&=-3;break;case 6:qa(ui),ui.effectTag&=-3,Va(ui.alternate,ui);break;case 4:Va(ui.alternate,ui);break;case 8:Wa(C=ui),C.return=null,C.child=null,C.alternate&&(C.alternate.child=null,C.alternate.return=null)}ui=ui.nextEffect}}catch(e){w=!0,x=e}w&&(null===ui&&p("178"),mi(ui,x),null!==ui&&(ui=ui.nextEffect))}if(O=Xr,T=l(),_=O.focusedElem,w=O.selectionRange,T!==_&&c(document.documentElement,_)){null!==w&&qn(_)&&(T=w.start,void 0===(O=w.end)&&(O=T),"selectionStart"in _?(_.selectionStart=T,_.selectionEnd=Math.min(O,_.value.length)):window.getSelection&&(T=window.getSelection(),x=_[he()].length,O=Math.min(w.start,x),w=void 0===w.end?O:Math.min(w.end,x),!T.extend&&O>w&&(x=w,w=O,O=x),x=Hn(_,O),C=Hn(_,w),x&&C&&(1!==T.rangeCount||T.anchorNode!==x.node||T.anchorOffset!==x.offset||T.focusNode!==C.node||T.focusOffset!==C.offset)&&((A=document.createRange()).setStart(x.node,x.offset),T.removeAllRanges(),O>w?(T.addRange(A),T.extend(C.node,C.offset)):(A.setEnd(C.node,C.offset),T.addRange(A))))),T=[];for(O=_;O=O.parentNode;)1===O.nodeType&&T.push({element:O,left:O.scrollLeft,top:O.scrollTop});for("function"==typeof _.focus&&_.focus(),_=0;_<T.length;_++)(O=T[_]).element.scrollLeft=O.left,O.element.scrollTop=O.top}for(Xr=null,Rn(Kr),Kr=null,n.current=t,ui=o;null!==ui;){o=!1,_=void 0;try{for(T=r;null!==ui;){var S=ui.effectTag;if(36&S){var P=ui.alternate;switch(w=T,(O=ui).tag){case 2:var R=O.stateNode;if(4&O.effectTag)if(null===P)R.props=O.memoizedProps,R.state=O.memoizedState,R.componentDidMount();else{var j=P.memoizedProps,N=P.memoizedState;R.props=O.memoizedProps,R.state=O.memoizedState,R.componentDidUpdate(j,N,R.__reactInternalSnapshotBeforeUpdate)}var M=O.updateQueue;null!==M&&(R.props=O.memoizedProps,R.state=O.memoizedState,Vo(O,M,R));break;case 3:var B=O.updateQueue;if(null!==B){if(x=null,null!==O.child)switch(O.child.tag){case 5:x=O.child.stateNode;break;case 2:x=O.child.stateNode}Vo(O,B,x)}break;case 5:var U=O.stateNode;null===P&&4&O.effectTag&&Qr(O.type,O.memoizedProps)&&U.focus();break;case 6:case 4:case 15:case 16:break;default:p("163")}}if(128&S){O=void 0;var I=ui.ref;if(null!==I){var D=ui.stateNode;switch(ui.tag){case 5:O=D;break;default:O=D}"function"==typeof I?I(O):I.current=O}}var L=ui.nextEffect;ui.nextEffect=null,ui=L}}catch(e){o=!0,_=e}o&&(null===ui&&p("178"),mi(ui,_),null!==ui&&(ui=ui.nextEffect))}ti=li=!1,jo(t.stateNode),0===(t=n.current.expirationTime)&&(ci=null),e.remainingExpirationTime=t}function Qi(){return!(null===Ni||Ni.timeRemaining()>Fi)&&(Pi=!0)}function Ji(e){null===Ti&&p("246"),Ti.remainingExpirationTime=0,Ri||(Ri=!0,ji=e)}function Zi(e,t){var n=Mi;Mi=!0;try{return e(t)}finally{(Mi=n)||_i||Vi()}}function eu(e,t){if(Mi&&!Bi){Bi=!0;try{return e(t)}finally{Bi=!1}}return e(t)}function tu(e,t){_i&&p("187");var n=Mi;Mi=!0;try{return wi(e,t)}finally{Mi=n,Vi()}}function nu(e,t,n){if(Ui)return e(t,n);Mi||_i||0===Si||(Gi(Si,!1,null),Si=0);var r=Ui,o=Mi;Mi=Ui=!0;try{return e(t,n)}finally{Ui=r,(Mi=o)||_i||Vi()}}function ru(e){var t=Mi;Mi=!0;try{wi(e)}finally{(Mi=t)||_i||Gi(1,!1,null)}}function ou(e,t,n,r,o){var a=t.current;if(n){var i;n=n._reactInternalFiber;e:{for(2===un(n)&&2===n.tag||p("170"),i=n;3!==i.tag;){if(mo(i)){i=i.stateNode.__reactInternalMemoizedMergedChildContext;break e}(i=i.return)||p("171")}i=i.stateNode.context}n=mo(n)?bo(n,i):i}else n=f;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Io(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Lo(a,o,r),gi(a,r),r}function au(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?p("188"):p("268",Object.keys(e))),null===(e=cn(t))?null:e.stateNode}function iu(e,t,n,r){var o=t.current;return ou(e,t,n,o=vi(bi(),o),r)}function uu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function lu(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);So=Ro(function(e){return t.onCommitFiberRoot(n,e)}),Po=Ro(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(i({},e,{findHostInstanceByFiber:function(e){return null===(e=cn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}var su=Zi,cu=nu,fu=function(){_i||0===Si||(Gi(Si,!1,null),Si=0)};function pu(e){this._expirationTime=yi(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function du(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function hu(e,t,n){this._internalRoot=Oo(e,t,n)}function mu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function yu(e,t,n,r,o){mu(n)||p("200");var a=n._reactRootContainer;if(a){if("function"==typeof o){var i=o;o=function(){var e=uu(a._internalRoot);i.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new hu(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=uu(a._internalRoot);u.call(e)}}eu(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)})}return uu(a._internalRoot)}function vu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return mu(t)||p("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:lt,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Le.injectFiberControlledHostComponent(Yr),pu.prototype.render=function(e){this._defer||p("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new du;return ou(e,t,null,n,r._onCommit),r},pu.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},pu.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||p("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&p("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,$i(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},pu.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},du.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},du.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&p("191",n),n()}}},hu.prototype.render=function(e,t){var n=this._internalRoot,r=new du;return null!==(t=void 0===t?null:t)&&r.then(t),iu(e,n,null,r._onCommit),r},hu.prototype.unmount=function(e){var t=this._internalRoot,n=new du;return null!==(e=void 0===e?null:e)&&n.then(e),iu(null,t,null,n._onCommit),n},hu.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new du;return null!==(n=void 0===n?null:n)&&o.then(n),iu(t,r,e,o._onCommit),o},hu.prototype.createBatch=function(){var e=new pu(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},$e=su,Ye=cu,Ke=fu;var gu={createPortal:vu,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:au(e)},hydrate:function(e,t,n){return yu(null,e,t,!0,n)},render:function(e,t,n){return yu(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&p("38"),yu(e,t,n,!1,r)},unmountComponentAtNode:function(e){return mu(e)||p("40"),!!e._reactRootContainer&&(eu(function(){yu(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return vu.apply(void 0,arguments)},unstable_batchedUpdates:Zi,unstable_deferredUpdates:Ei,unstable_interactiveUpdates:nu,flushSync:tu,unstable_flushControlled:ru,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:L,EventPluginRegistry:A,EventPropagators:ne,ReactControlledComponent:Ge,ReactDOMComponentTree:G,ReactDOMEventListener:Un},unstable_createRoot:function(e,t){return new hu(e,!0,null!=t&&!0===t.hydrate)}};lu({findFiberByHostInstance:q,bundleType:0,version:"16.4.2",rendererPackageName:"react-dom"});var bu={default:gu},Eu=bu&&gu||bu;e.exports=Eu.default?Eu.default:Eu},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(var i=0;i<n.length;i++)if(!r.call(t,n[i])||!o(e[n[i]],t[n[i]]))return!1;return!0}},function(e,t,n){"use strict";var r=n(36);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=n(37);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=c(r),a=n(15),i=c(n(42)),u=c(n(52)),l=c(n(56)),s=c(n(76));function c(e){return e&&e.__esModule?e:{default:e}}t.default=class extends r.Component{render(){return o.default.createElement(a.BrowserRouter,null,o.default.createElement("div",{className:s.default.app},o.default.createElement("header",null,o.default.createElement(i.default,null)),o.default.createElement("main",null,o.default.createElement(a.Switch,null,o.default.createElement(a.Route,{exact:!0,path:"/",component:u.default}),o.default.createElement(a.Route,{exact:!0,path:"/categories",component:l.default}),o.default.createElement(a.Redirect,{to:"/"})))))}}},function(e,t,n){"use strict";var r=n(40);function o(){}e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=s(r),a=n(15),i=s(n(43)),u=s(n(49)),l=s(n(50));function s(e){return e&&e.__esModule?e:{default:e}}class c extends r.Component{constructor(...e){var t;return t=super(...e),this.handleSpecial=(e=>{e.preventDefault(),alert("that is a cool link!")}),t}render(){return o.default.createElement("div",{className:l.default.header},o.default.createElement("section",{className:"header-container"},o.default.createElement("div",{className:"logo"},o.default.createElement("img",{src:u.default}),o.default.createElement("h1",null,"Budget Tracker")),o.default.createElement("nav",null,o.default.createElement("ul",null,o.default.createElement("li",null,o.default.createElement(a.NavLink,{exact:!0,activeClassName:"active",to:"/"},"Home")),o.default.createElement("li",null,o.default.createElement(a.NavLink,{exact:!0,activeClassName:"active",to:"/categories"},"My Budget"))))),o.default.createElement(i.default,null))}}c.propTypes={},t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Error=void 0;var r=n(1),o=c(r),a=c(n(0)),i=n(7),u=n(8),l=n(45),s=c(n(46));function c(e){return e&&e.__esModule?e:{default:e}}class f extends r.Component{componentDidUpdate(){const{error:e,clearError:t}=this.props;e&&setTimeout(()=>{t()},6e3)}render(){const{error:e}=this.props;return e?o.default.createElement("pre",{className:s.default.error},e):null}}t.Error=f,f.propTypes={error:a.default.any,clearError:a.default.func},t.default=(0,i.connect)(e=>({error:(0,u.getError)(e)}),{clearError:l.clearError})(f)},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.clearError=void 0;var r=n(8);t.clearError=(()=>({type:r.ERROR_CLEAR}))},function(e,t,n){var r=n(47);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(5)(!0)).push([e.i,"","",{version:3,sources:[],names:[],mappings:"",file:"Error.css",sourceRoot:""}])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){e.exports=n.p+"8c06036f0b5e074f09c530d106104cfd.png"},function(e,t,n){var r=n(51);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(5)(!0)).push([e.i,"._3AGlt-Gg3cJwjElbNhHvxZ {\n  background: rgb(109, 255, 47);\n  padding: 10px;\n  text-shadow: 1px 1px 1px black;\n}\n\n  ._3AGlt-Gg3cJwjElbNhHvxZ .header-container {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  ._3AGlt-Gg3cJwjElbNhHvxZ .header-container .logo {\n      display: flex;\n      align-items: center;\n    }\n\n  ._3AGlt-Gg3cJwjElbNhHvxZ .header-container h1 {\n      font-size: 26pt;\n      color: white;\n      padding-bottom: 7px;\n    }\n\n  ._3AGlt-Gg3cJwjElbNhHvxZ .search-container {\n    padding: 5px 0;\n  }\n\n  ._3AGlt-Gg3cJwjElbNhHvxZ nav ul {\n      margin: 0;\n      padding: 0;\n    }\n\n  ._3AGlt-Gg3cJwjElbNhHvxZ nav li {\n      display: inline-block;\n      margin-left: 15px;\n    }\n\n  ._3AGlt-Gg3cJwjElbNhHvxZ nav a {\n      text-decoration: none;\n      font-size: 18px;;\n      color: black;\n      padding: 3px;\n      box-sizing: border-box;\n      border: 1px solid transparent;\n      margin-right: 50px\n    }\n\n  ._3AGlt-Gg3cJwjElbNhHvxZ nav a.active {\n  color: white;\n  border: 1px solid floralwhite;\n}\n\n  ._3AGlt-Gg3cJwjElbNhHvxZ nav a:not(.active):hover {\n  color: darkorchid;\n  border: 1px solid greenyellow;\n}\n","",{version:3,sources:["/Users/antreopukay/coding-projects/budget-tracker/src/components/app/Header.css"],names:[],mappings:"AAAA;EACE,8BAA8B;EAC9B,cAAc;EACd,+BAA+B;CAsDhC;;EApDC;IACE,cAAc;IACd,oBAAoB;IACpB,+BAA+B;GAYhC;;EAVC;MACE,cAAc;MACd,oBAAoB;KACrB;;EAED;MACE,gBAAgB;MAChB,aAAa;MACb,oBAAoB;KACrB;;EAGH;IACE,eAAe;GAChB;;EAGC;MACE,UAAU;MACV,WAAW;KACZ;;EAED;MACE,sBAAsB;MACtB,kBAAkB;KACnB;;EAED;MACE,sBAAsB;MACtB,gBAAgB;MAChB,aAAa;MACb,aAAa;MACb,uBAAuB;MACvB,8BAA8B;MAC9B,kBAAmB;KAWpB;;EATC;EACE,aAAa;EACb,8BAA8B;CAC/B;;EAED;EACE,kBAAkB;EAClB,8BAA8B;CAC/B",file:"Header.css",sourcesContent:[":local(.header) {\n  background: rgb(109, 255, 47);\n  padding: 10px;\n  text-shadow: 1px 1px 1px black;\n\n  .header-container {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    .logo {\n      display: flex;\n      align-items: center;\n    }\n  \n    h1 {\n      font-size: 26pt;\n      color: white;\n      padding-bottom: 7px;\n    }\n  }\n\n  .search-container {\n    padding: 5px 0;\n  }\n  \n  nav {\n    ul {\n      margin: 0;\n      padding: 0;\n    }\n    \n    li {\n      display: inline-block;\n      margin-left: 15px;\n    }\n    \n    a {\n      text-decoration: none;\n      font-size: 18px;;\n      color: black;\n      padding: 3px;\n      box-sizing: border-box;\n      border: 1px solid transparent;\n      margin-right: 50px;\n      \n      &.active {\n        color: white;\n        border: 1px solid floralwhite;\n      }\n      \n      &:not(.active):hover {\n        color: darkorchid;\n        border: 1px solid greenyellow;\n      }\n    }\n  }\n}\n"],sourceRoot:""}]),t.locals={header:"_3AGlt-Gg3cJwjElbNhHvxZ"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=l(r),a=n(15),i=l(n(53)),u=l(n(54));function l(e){return e&&e.__esModule?e:{default:e}}t.default=class extends r.Component{render(){return o.default.createElement("div",{className:u.default.home},o.default.createElement("h2",null,"Its budget time!"),o.default.createElement("section",null,o.default.createElement("h5",null,"Clink below to begin"),o.default.createElement("div",{className:u.default.startImage},o.default.createElement(a.NavLink,{exact:!0,activeClassName:"active",to:"/categories"},o.default.createElement("img",{src:i.default})))))}}},function(e,t,n){e.exports=n.p+"d4d9522b24b2b07a03ca47ec21267959.png"},function(e,t,n){var r=n(55);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(5)(!0)).push([e.i,"._2_-qcdAFiL8CpOMfSaTb93 h5 {\n    text-align: center;\n    font-size: 15px;\n  }\n  \n  ._2_-qcdAFiL8CpOMfSaTb93 div {\n    display: flex;\n    justify-content: center;\n  }\n","",{version:3,sources:["/Users/antreopukay/coding-projects/budget-tracker/src/components/app/Home.css"],names:[],mappings:"AAEE;IACE,mBAAmB;IACnB,gBAAgB;GACjB;;EAED;IACE,cAAc;IACd,wBAAwB;GACzB",file:"Home.css",sourcesContent:[":local(.home) {\n  \n  h5 {\n    text-align: center;\n    font-size: 15px;\n  }\n\n  div {\n    display: flex;\n    justify-content: center;\n  }\n}\n"],sourceRoot:""}]),t.locals={home:"_2_-qcdAFiL8CpOMfSaTb93"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=p(r),a=p(n(0)),i=n(7),u=p(n(57)),l=p(n(25)),s=n(12),c=n(9),f=p(n(74));function p(e){return e&&e.__esModule?e:{default:e}}class d extends r.Component{componentDidMount(){this.props.load()}render(){const{categories:e,add:t}=this.props;return o.default.createElement("div",{className:f.default.dashboard},o.default.createElement("h3",null,"Add Budget Category"),o.default.createElement("section",{className:"category-wrapper"},o.default.createElement(l.default,{onComplete:t})),o.default.createElement("section",null),o.default.createElement("hr",null),e&&o.default.createElement("section",{className:"category-wrapper"},o.default.createElement("div",null,o.default.createElement("h3",null,"Budget Categories"),o.default.createElement(u.default,{categories:e,onUpdate:s.update}))))}}d.propTypes={categories:a.default.array,add:a.default.func.isRequired,load:a.default.func.isRequired},t.default=(0,i.connect)(e=>({categories:(0,c.getCategories)(e)}),{load:s.load,add:s.add})(d)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Categories=void 0;var r=n(1),o=u(r),a=u(n(0)),i=u(n(58));function u(e){return e&&e.__esModule?e:{default:e}}class l extends r.Component{render(){const{categories:e}=this.props;return e?o.default.createElement("section",null,o.default.createElement("ul",null,e.map(e=>o.default.createElement(i.default,{key:e.key,category:e})))):null}}t.Categories=l,l.propTypes={categories:a.default.array},t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Category=void 0;var r=n(1),o=c(r),a=c(n(0)),i=n(7),u=c(n(59)),l=c(n(25)),s=n(12);function c(e){return e&&e.__esModule?e:{default:e}}class f extends r.Component{constructor(...e){var t;return t=super(...e),this.state={editing:!1},this.handleEdit=(()=>{this.setState({editing:!0})}),this.handleComplete=(e=>{const{update:t}=this.props;t(e),this.handleEndEdit()}),this.handleEndEdit=(()=>{this.setState({editing:!1})}),t}render(){const{editing:e}=this.state,{category:t}=this.props;return o.default.createElement("li",null,e?o.default.createElement(l.default,{category:t,onComplete:this.handleComplete,onCancel:this.handleEndEdit}):o.default.createElement(u.default,{category:t,onEdit:this.handleEdit,onDelete:this.handleDelete}))}}t.Category=f,f.propTypes={category:a.default.object.isRequired,update:a.default.func.isRequired},t.default=(0,i.connect)(null,{update:s.update})(f)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CategoryDisplay=void 0;var r=n(1),o=c(r),a=c(n(0)),i=n(7),u=n(12),l=c(n(61)),s=c(n(72));function c(e){return e&&e.__esModule?e:{default:e}}class f extends r.Component{render(){const{category:e,onEdit:t,remove:n}=this.props;return o.default.createElement("div",{className:s.default.categorydisplay},o.default.createElement("section",{className:"category-list"},o.default.createElement("section",null,o.default.createElement("li",null,o.default.createElement("strong",null,e.name," = $",e.budget),o.default.createElement("button",{name:"Edit",onClick:t},"✎"),o.default.createElement("button",{name:"Remove",onClick:()=>n(e.key)},"🗑")))),o.default.createElement("section",null,o.default.createElement(l.default,{categoryId:e.key})))}}t.CategoryDisplay=f,f.propTypes={category:a.default.object.isRequired,onEdit:a.default.func.isRequired,remove:a.default.func.isRequired},t.default=(0,i.connect)(null,{remove:u.remove})(f)},function(e,t,n){"use strict";function r(e,t={},n){return n&&(t.body=JSON.stringify(n)),fetch(e,t).then(e=>[e.ok,e.json()]).then(([e,t])=>{if(e)return t;throw t.message||t.error||t.errors||t})}Object.defineProperty(t,"__esModule",{value:!0});const o={"content-type":"application/json"};t.get=(e=>r(e)),t.post=((e,t)=>r(e,{method:"POST",headers:o},t)),t.put=((e,t)=>r(e,{method:"PUT",headers:o},t)),t.del=((e,t)=>r(e,{method:"DELETE"},t))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=p(r),a=p(n(0)),i=n(7),u=n(13),l=n(14),s=p(n(62)),c=p(n(24)),f=p(n(70));function p(e){return e&&e.__esModule?e:{default:e}}class d extends r.Component{constructor(...e){var t;return t=super(...e),this.handleAddExpense=(e=>{const{addExpense:t,categoryId:n}=this.props;t(n,e)}),t}render(){const{expenses:e,categoryId:t}=this.props;return e?o.default.createElement("div",{className:f.default.expenses},o.default.createElement("section",null,o.default.createElement("h3",null,"Add Expense"),o.default.createElement(c.default,{onComplete:this.handleAddExpense,categoryId:t})),o.default.createElement("section",{className:"expenses-list"},o.default.createElement("h3",null,"Expenses:"),e.map(e=>o.default.createElement(s.default,{key:e.key,expense:e})))):null}}d.propTypes={expenses:a.default.array,categoryId:a.default.string,addExpense:a.default.func},t.default=(0,i.connect)((e,{categoryId:t})=>({expenses:(0,l.getExpensesByCategory)(e,t)}),{addExpense:u.addExpense})(d)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=f(r),a=f(n(0)),i=n(7),u=f(n(63)),l=f(n(24)),s=n(13),c=f(n(68));function f(e){return e&&e.__esModule?e:{default:e}}class p extends r.Component{constructor(...e){var t;return t=super(...e),this.state={editing:!1},this.handleEdit=(()=>{this.setState({editing:!0})}),this.handleComplete=(e=>{const{updateExpense:t}=this.props;t(e),this.handleEndEdit()}),this.handleEndEdit=(()=>{this.setState({editing:!1})}),t}render(){const{editing:e}=this.state,{expense:t}=this.props;return o.default.createElement("section",{className:c.default.expense},o.default.createElement("li",null,e?o.default.createElement(l.default,{expense:t,categoryId:t.categoryId,onComplete:this.handleComplete,onCancel:this.handleEndEdit}):o.default.createElement(u.default,{expense:t,onEdit:this.handleEdit})))}}p.propTypes={expense:a.default.object,updateExpense:a.default.func},t.default=(0,i.connect)(null,{updateExpense:s.updateExpense})(p)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=s(r),a=s(n(0)),i=n(7),u=n(13),l=s(n(64));function s(e){return e&&e.__esModule?e:{default:e}}class c extends r.Component{render(){const{expense:e,onEdit:t,removeExpense:n}=this.props;return o.default.createElement("section",{className:l.default.expensedisplay},o.default.createElement("section",null,o.default.createElement("li",null,e.name," = $",e.price,o.default.createElement("button",{name:"Edit",onClick:t},"✎"),o.default.createElement("button",{name:"Delete",onClick:()=>n(e)},"🗑"))))}}c.propTypes={expense:a.default.object.isRequired,onEdit:a.default.func.isRequired,removeExpense:a.default.func.isRequired},t.default=(0,i.connect)(null,{removeExpense:u.removeExpense})(c)},function(e,t,n){var r=n(65);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(5)(!0)).push([e.i,"._3y_9aA2vvHjKRsOkvln09o section {\n    display: flex;\n    justify-content: center;\n    // padding-top: 10px;\n    // padding-bottom: 10px;\n    list-style-type: circle;\n    color: rgb(198, 4, 4);\n  }\n","",{version:3,sources:["/Users/antreopukay/coding-projects/budget-tracker/src/components/expenses/ExpenseDisplay.css"],names:[],mappings:"AACE;IACE,cAAc;IACd,wBAAwB;IACxB,qBAAqB;IACrB,wBAAwB;IACxB,wBAAwB;IACxB,sBAAsB;GACvB",file:"ExpenseDisplay.css",sourcesContent:[":local(.expensedisplay) {\n  section {\n    display: flex;\n    justify-content: center;\n    // padding-top: 10px;\n    // padding-bottom: 10px;\n    list-style-type: circle;\n    color: rgb(198, 4, 4);\n  }\n}\n"],sourceRoot:""}]),t.locals={expensedisplay:"_3y_9aA2vvHjKRsOkvln09o"}},function(e,t,n){var r=n(67);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(5)(!0)).push([e.i,".kf2FTK_H6InjTCEKIu6MS {\n  border-style: none;\n}\n  \n  .kf2FTK_H6InjTCEKIu6MS .formButtons {\n    text-align: center;\n    // margin: auto;\n  }\n","",{version:3,sources:["/Users/antreopukay/coding-projects/budget-tracker/src/components/expenses/ExpenseForm.css"],names:[],mappings:"AAAA;EACE,mBAAmB;CAMpB;;EAJC;IACE,mBAAmB;IACnB,gBAAgB;GACjB",file:"ExpenseForm.css",sourcesContent:[":local(.expenseform) {\n  border-style: none;\n  \n  .formButtons {\n    text-align: center;\n    // margin: auto;\n  }\n}\n"],sourceRoot:""}]),t.locals={expenseform:"kf2FTK_H6InjTCEKIu6MS"}},function(e,t,n){var r=n(69);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(5)(!0)).push([e.i,".qmsbixp_oht2UWf_Gpna5 {\n  // display: flex;\n  // justify-content: center;\n}\n\n  .qmsbixp_oht2UWf_Gpna5 li {\n    list-style-type: circle;\n  }\n","",{version:3,sources:["/Users/antreopukay/coding-projects/budget-tracker/src/components/expenses/Expense.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,2BAA2B;CAK5B;;EAHC;IACE,wBAAwB;GACzB",file:"Expense.css",sourcesContent:[":local(.expense) {\n  // display: flex;\n  // justify-content: center;\n\n  li {\n    list-style-type: circle;\n  }\n}\n"],sourceRoot:""}]),t.locals={expense:"qmsbixp_oht2UWf_Gpna5"}},function(e,t,n){var r=n(71);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(5)(!0)).push([e.i,"\n._1_SaYPAlDxLHrb0eUsOANp {\n  // border-color: green;\n  border-width: .5px;\n  border-style: solid;\n  padding: 20px;\n}\n","",{version:3,sources:["/Users/antreopukay/coding-projects/budget-tracker/src/components/expenses/Expenses.css"],names:[],mappings:";AACA;EACE,uBAAuB;EACvB,mBAAmB;EACnB,oBAAoB;EACpB,cAAc;CACf",file:"Expenses.css",sourcesContent:["\n:local(.expenses) {\n  // border-color: green;\n  border-width: .5px;\n  border-style: solid;\n  padding: 20px;\n}\n"],sourceRoot:""}]),t.locals={expenses:"_1_SaYPAlDxLHrb0eUsOANp"}},function(e,t,n){var r=n(73);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(5)(!0)).push([e.i,"\n._2gX6bu75ueguh6cbPYHW8p {\n  display: inline;\n}\n\n  ._2gX6bu75ueguh6cbPYHW8p .category-list {\n    padding: 15px;\n    border-style: none;   \n  }\n","",{version:3,sources:["/Users/antreopukay/coding-projects/budget-tracker/src/components/categories/CategoryDisplay.css"],names:[],mappings:";AACA;EACE,gBAAgB;CAMjB;;EAJC;IACE,cAAc;IACd,mBAAmB;GACpB",file:"CategoryDisplay.css",sourcesContent:["\n:local(.categorydisplay) {\n  display: inline;\n\n  .category-list {\n    padding: 15px;\n    border-style: none;   \n  }\n}\n"],sourceRoot:""}]),t.locals={categorydisplay:"_2gX6bu75ueguh6cbPYHW8p"}},function(e,t,n){var r=n(75);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(5)(!0)).push([e.i,"\n._15M58vTUGROW3iJtDPECjS {\n  // display: flex;\n  // justify-content: center;\n  // flex-direction: column;\n  // border-style: solid;\n  // border-color: red;\n  // border-width: 2px;\n}\n\n  ._15M58vTUGROW3iJtDPECjS h3 {\n    text-align: center;\n  }\n","",{version:3,sources:["/Users/antreopukay/coding-projects/budget-tracker/src/components/categories/Dashboard.css"],names:[],mappings:";AACA;EACE,iBAAiB;EACjB,2BAA2B;EAC3B,0BAA0B;EAC1B,uBAAuB;EACvB,qBAAqB;EACrB,qBAAqB;CAKtB;;EAHC;IACE,mBAAmB;GACpB",file:"Dashboard.css",sourcesContent:["\n:local(.dashboard) {\n  // display: flex;\n  // justify-content: center;\n  // flex-direction: column;\n  // border-style: solid;\n  // border-color: red;\n  // border-width: 2px;\n\n  h3 {\n    text-align: center;\n  }\n}\n"],sourceRoot:""}]),t.locals={dashboard:"_15M58vTUGROW3iJtDPECjS"}},function(e,t,n){var r=n(77);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(5)(!0)).push([e.i,".vAsrSUXHLz_nZPXoVz-yh {\n  height: 100vh;\n}\n  \n  .vAsrSUXHLz_nZPXoVz-yh main {\n    border-style: none;\n  }\n","",{version:3,sources:["/Users/antreopukay/coding-projects/budget-tracker/src/components/app/App.css"],names:[],mappings:"AAAA;EACE,cAAc;CAKf;;EAHC;IACE,mBAAmB;GACpB",file:"App.css",sourcesContent:[":local(.app) {\n  height: 100vh;\n  \n  main {\n    border-style: none;\n  }\n}\n"],sourceRoot:""}]),t.locals={app:"vAsrSUXHLz_nZPXoVz-yh"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(16),o=s(n(79)),a=s(n(80)),i=n(8),u=n(9),l=n(14);function s(e){return e&&e.__esModule?e:{default:e}}const c=(0,r.combineReducers)({categories:u.categories,expensesByCategory:l.expensesByCategory,error:i.error,loading:i.loading}),f=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||r.compose,p=(0,r.createStore)(c,f((0,r.applyMiddleware)(o.default,a.default)));t.default=p},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}n.r(t);var o=r();o.withExtraArgument=r,t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(8);t.default=(({dispatch:e})=>t=>n=>{const{type:o,payload:a}=n;return(e=>e&&"function"==typeof e.then)(a)?(e({type:r.LOAD_START}),a.then(t=>(e({type:r.LOAD_END}),e({type:o,payload:t})),t=>{throw e({type:r.LOAD_END}),e({type:r.ERROR,payload:t}),t})):t(n)})},function(e,t,n){var r=n(82);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(5)(!0)).push([e.i,'\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: "Comic Sans MS", cursive, sans-serif;\n  background-color: rgb(232, 243, 202); \n  margin: 0;\n}\n\nmain {\n  // display: flex;\n  // justify-content: center;\n  padding: 8px;\n  height: 100vh;\n}\n\nh2, h5 {\n  text-align: center;\n}\n\np {\n  color: blue;\n}\n\nstrong {\n  padding: 10px;\n}\n\nform {\n  display: flex;\n  justify-content: center;\n}\n\nul {\n  margin:  0px;\n  list-style-type: circle;\n  // list-style-position: inside;\n  padding-left: 75px;\n  padding-right: 75px;\n}\n\nli {\n  display: inline;\n  list-style-type: circle;\n}\n\nbutton {\n  display: inline-flex;\n  padding: 3px;\n  margin: 3px;\n}\n\nhr {\n  height: 15px;\n  margin: 30px -20px 20px;\n  border: 0;\n  box-shadow: inset 0 12px 12px -12px rgba(0, 0, 0, 0.5);\n  background-color: rgb(156, 255, 107);\n}\n',"",{version:3,sources:["/Users/antreopukay/coding-projects/budget-tracker/src/styles/main.css"],names:[],mappings:";AACA;EACE,uBAAuB;CACxB;;AAED;EACE,kDAAkD;EAClD,qCAAqC;EACrC,UAAU;CACX;;AAED;EACE,iBAAiB;EACjB,2BAA2B;EAC3B,aAAa;EACb,cAAc;CACf;;AAED;EACE,mBAAmB;CACpB;;AAED;EACE,YAAY;CACb;;AAED;EACE,cAAc;CACf;;AAED;EACE,cAAc;EACd,wBAAwB;CACzB;;AAED;EACE,aAAa;EACb,wBAAwB;EACxB,+BAA+B;EAC/B,mBAAmB;EACnB,oBAAoB;CACrB;;AAED;EACE,gBAAgB;EAChB,wBAAwB;CACzB;;AAED;EACE,qBAAqB;EACrB,aAAa;EACb,YAAY;CACb;;AAED;EACE,aAAa;EACb,wBAAwB;EACxB,UAAU;EACV,uDAAuD;EACvD,qCAAqC;CACtC",file:"main.css",sourcesContent:['\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: "Comic Sans MS", cursive, sans-serif;\n  background-color: rgb(232, 243, 202); \n  margin: 0;\n}\n\nmain {\n  // display: flex;\n  // justify-content: center;\n  padding: 8px;\n  height: 100vh;\n}\n\nh2, h5 {\n  text-align: center;\n}\n\np {\n  color: blue;\n}\n\nstrong {\n  padding: 10px;\n}\n\nform {\n  display: flex;\n  justify-content: center;\n}\n\nul {\n  margin:  0px;\n  list-style-type: circle;\n  // list-style-position: inside;\n  padding-left: 75px;\n  padding-right: 75px;\n}\n\nli {\n  display: inline;\n  list-style-type: circle;\n}\n\nbutton {\n  display: inline-flex;\n  padding: 3px;\n  margin: 3px;\n}\n\nhr {\n  height: 15px;\n  margin: 30px -20px 20px;\n  border: 0;\n  box-shadow: inset 0 12px 12px -12px rgba(0, 0, 0, 0.5);\n  background-color: rgb(156, 255, 107);\n}\n'],sourceRoot:""}])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2FybmluZy93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fcm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNQbGFpbk9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21lcmdlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXBwL2Vycm9yLXJlZHVjZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NhdGVnb3JpZXMvcmVkdWNlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jYXRlZ29yaWVzL2FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXhwZW5zZXMvZXhwZW5zZUFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXhwZW5zZXMvZXhwZW5zZVJlZHVjZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9QYXRoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvTG9jYXRpb25VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Ccm93c2VyUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0hhc2hSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL2dlbmVyYXRlUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1N0YXRpY1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvZ2VuZXJhdGVQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL2NhdGVnb3J5QXBpLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4cGVuc2VzL0V4cGVuc2VGb3JtLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NhdGVnb3JpZXMvQ2F0ZWdvcnlGb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jb250YWluc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzVGV4dE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hcHAvQXBwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXBwL0hlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hcHAvRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FwcC9lcnJvci1hY3Rpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FwcC9FcnJvci5jc3M/NTc5NyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hcHAvRXJyb3IuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9sb2dvLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hcHAvSGVhZGVyLmNzcz85MTA1Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FwcC9IZWFkZXIuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FwcC9Ib21lLmpzIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvYnVkZ2V0LWltYWdlLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hcHAvSG9tZS5jc3M/OTgwZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hcHAvSG9tZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY2F0ZWdvcmllcy9EYXNoYm9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY2F0ZWdvcmllcy9DYXRlZ29yaWVzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NhdGVnb3JpZXMvQ2F0ZWdvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY2F0ZWdvcmllcy9DYXRlZ29yeURpc3BsYXkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL3JlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXhwZW5zZXMvRXhwZW5zZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXhwZW5zZXMvRXhwZW5zZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9leHBlbnNlcy9FeHBlbnNlRGlzcGxheS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9leHBlbnNlcy9FeHBlbnNlRGlzcGxheS5jc3M/NzM1ZiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9leHBlbnNlcy9FeHBlbnNlRGlzcGxheS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXhwZW5zZXMvRXhwZW5zZUZvcm0uY3NzPzhkZDMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXhwZW5zZXMvRXhwZW5zZUZvcm0uY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2V4cGVuc2VzL0V4cGVuc2UuY3NzPzVlMmMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXhwZW5zZXMvRXhwZW5zZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXhwZW5zZXMvRXhwZW5zZXMuY3NzPzNmMDIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXhwZW5zZXMvRXhwZW5zZXMuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NhdGVnb3JpZXMvQ2F0ZWdvcnlEaXNwbGF5LmNzcz9hOThmIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2NhdGVnb3JpZXMvQ2F0ZWdvcnlEaXNwbGF5LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jYXRlZ29yaWVzL0Rhc2hib2FyZC5jc3M/OGE0OSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jYXRlZ29yaWVzL0Rhc2hib2FyZC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXBwL0FwcC5jc3M/NjJhNiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hcHAvQXBwLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9wcm9taXNlLW1pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy9tYWluLmNzcz80YTg2Iiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMvbWFpbi5jc3MiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJhIiwiYiIsImUiLCJmIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJFcnJvciIsImFyZ3MiLCJhcmdJbmRleCIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsIndhcm5pbmciLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b0NvbW1lbnQiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjb25jYXQiLCJqb2luIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiaWQiLCJwdXNoIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwiZm4iLCJtZW1vIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJtZW1vaXplIiwid2luZG93IiwiZG9jdW1lbnQiLCJhbGwiLCJhdG9iIiwiZ2V0RWxlbWVudCIsInRhcmdldCIsInBhcmVudCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwib3B0aW9ucyIsImRvbVN0eWxlIiwicmVmcyIsImoiLCJwYXJ0cyIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiaW5zZXJ0SW50byIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwiZmlyc3RDaGlsZCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImlkeCIsImluZGV4T2YiLCJzcGxpY2UiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXR0cnMiLCJ0eXBlIiwibm9uY2UiLCJuYyIsImdldE5vbmNlIiwiYWRkQXR0cnMiLCJlbCIsImtleXMiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwib2JqIiwidXBkYXRlIiwicmVtb3ZlIiwicmVzdWx0IiwidHJhbnNmb3JtIiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJyZXBsYWNlVGV4dCIsInRleHRTdG9yZSIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJzdWJzY3JpcHRpb25TaGFwZSIsInByb3BfdHlwZXNfZGVmYXVsdCIsInNoYXBlIiwidHJ5U3Vic2NyaWJlIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJ0cnlVbnN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJpc1N1YnNjcmliZWQiLCJzdG9yZVNoYXBlIiwic3Vic2NyaWJlIiwiZGlzcGF0Y2giLCJnZXRTdGF0ZSIsImNyZWF0ZVByb3ZpZGVyIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4Iiwic3RvcmVLZXkiLCJzdWJzY3JpcHRpb25LZXkiLCJQcm92aWRlciIsIl9Db21wb25lbnQiLCJwcm9wcyIsImNvbnRleHQiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiX3RoaXMiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInN0b3JlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2luaGVyaXRzIiwiZ2V0Q2hpbGRDb250ZXh0IiwiX3JlZiIsInJlbmRlciIsInJlYWN0Iiwib25seSIsImNoaWxkcmVuIiwicHJvcFR5cGVzIiwiZWxlbWVudCIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29tcG9uZW50c19Qcm92aWRlciIsIkNMRUFSRUQiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiU3Vic2NyaXB0aW9uIiwicGFyZW50U3ViIiwib25TdGF0ZUNoYW5nZSIsIlN1YnNjcmlwdGlvbl9jbGFzc0NhbGxDaGVjayIsInVuc3Vic2NyaWJlIiwibGlzdGVuZXJzIiwiYWRkTmVzdGVkU3ViIiwibGlzdGVuZXIiLCJjdXJyZW50IiwibmV4dCIsImNsZWFyIiwic2xpY2UiLCJjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24iLCJfZXh0ZW5kcyIsImFzc2lnbiIsImhvdFJlbG9hZGluZ1ZlcnNpb24iLCJkdW1teVN0YXRlIiwibm9vcCIsImNvbm5lY3RBZHZhbmNlZCIsInNlbGVjdG9yRmFjdG9yeSIsIl9jb250ZXh0VHlwZXMiLCJfY2hpbGRDb250ZXh0VHlwZXMiLCJfcmVmJGdldERpc3BsYXlOYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCJfcmVmJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJfcmVmJHNob3VsZEhhbmRsZVN0YXQiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJfcmVmJHN0b3JlS2V5IiwiX3JlZiR3aXRoUmVmIiwid2l0aFJlZiIsImNvbm5lY3RPcHRpb25zIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwidmVyc2lvbiIsImNvbnRleHRUeXBlcyIsIldyYXBwZWRDb21wb25lbnQiLCJicm93c2VyX2RlZmF1bHQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsImRpc3BsYXlOYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsIkNvbm5lY3QiLCJjb25uZWN0QWR2YW5jZWRfY2xhc3NDYWxsQ2hlY2siLCJjb25uZWN0QWR2YW5jZWRfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInN0YXRlIiwicmVuZGVyQ291bnQiLCJwcm9wc01vZGUiLCJzZXRXcmFwcGVkSW5zdGFuY2UiLCJpbml0U2VsZWN0b3IiLCJpbml0U3Vic2NyaXB0aW9uIiwiY29ubmVjdEFkdmFuY2VkX2luaGVyaXRzIiwiX3JlZjIiLCJzdWJzY3JpcHRpb24iLCJjb21wb25lbnREaWRNb3VudCIsInNlbGVjdG9yIiwicnVuIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiZm9yY2VVcGRhdGUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJnZXRXcmFwcGVkSW5zdGFuY2UiLCJ3cmFwcGVkSW5zdGFuY2UiLCJyZWYiLCJzb3VyY2VTZWxlY3RvciIsIm1ha2VTZWxlY3RvclN0YXRlZnVsIiwiY29tcG9uZW50RGlkVXBkYXRlIiwibm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlIiwic2V0U3RhdGUiLCJhZGRFeHRyYVByb3BzIiwid2l0aEV4dHJhcyIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX2Nqc19kZWZhdWx0IiwiaGFzT3duIiwiaXMiLCJ4IiwieSIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsImZyZWVTZWxmIiwiX1N5bWJvbCIsIl9mcmVlR2xvYmFsIiwiRnVuY3Rpb24iLCJvYmplY3RQcm90byIsImdldFByb3RvdHlwZU9mIiwiZnVuY1Byb3RvIiwiaXNQbGFpbk9iamVjdF9vYmplY3RQcm90byIsImZ1bmNUb1N0cmluZyIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsImNvbm5lY3RfbWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwicmVkdXgiLCJjb25uZWN0X21hcFN0YXRlVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1lcmdlUHJvcHNfZXh0ZW5kcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJjb25uZWN0X21lcmdlUHJvcHMiLCJtZXJnZVByb3BzIiwicHVyZSIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibWVyZ2VkUHJvcHMiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRTdGF0ZSIsIm5leHRPd25Qcm9wcyIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJoYW5kbGVOZXdTdGF0ZSIsImZpcnN0U3RhdGUiLCJmaXJzdE93blByb3BzIiwiaGFuZGxlRmlyc3RDYWxsIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJzZWxlY3RvckZhY3Rvcnlfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJjb25uZWN0X2V4dGVuZHMiLCJtYXRjaCIsImFyZyIsImZhY3RvcmllcyIsInN0cmljdEVxdWFsIiwiY29ubmVjdF9jb25uZWN0IiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsIl9yZWYyJHB1cmUiLCJfcmVmMiRhcmVTdGF0ZXNFcXVhbCIsIl9yZWYyJGFyZU93blByb3BzRXF1YSIsIl9yZWYyJGFyZVN0YXRlUHJvcHNFcSIsIl9yZWYyJGFyZU1lcmdlZFByb3BzRSIsImV4dHJhT3B0aW9ucyIsImNvbm5lY3Rfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJwYXlsb2FkIiwiRVJST1IiLCJMT0FEX1NUQVJUIiwiRVJST1JfQ0xFQVIiLCJsb2FkaW5nIiwiTE9BRF9FTkQiLCJnZXRFcnJvciIsImdldExvYWRpbmciLCJjYXRlZ29yaWVzIiwiQ0FURUdPUllfTE9BRCIsIkNBVEVHT1JZX0FERCIsIkNBVEVHT1JZX1VQREFURSIsImNhdGVnb3J5IiwiQ0FURUdPUllfUkVNT1ZFIiwiZ2V0Q2F0ZWdvcmllcyIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJwYXJzZSIsImNvbXBpbGUiLCJzdHIiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsIlJlZ0V4cCIsInJlcyIsInRva2VucyIsInBhdGgiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXhlYyIsImVzY2FwZWQiLCJvZmZzZXQiLCJwcmVmaXgiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwicGF0dGVybiIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwic3Vic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiY2hhckNvZGVBdCIsInRvVXBwZXJDYXNlIiwiZW5jb2RlQXN0ZXJpc2siLCJtYXRjaGVzIiwiQXJyYXkiLCJvcHRzIiwiZGF0YSIsImVuY29kZSIsInByZXR0eSIsInRva2VuIiwic2VnbWVudCIsInRlc3QiLCJhdHRhY2hLZXlzIiwicmUiLCJmbGFncyIsInNlbnNpdGl2ZSIsInN0cmljdCIsImVuZCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJyZWdleHBUb1JlZ2V4cCIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsIlJFQUNUX1NUQVRJQ1MiLCJkZWZhdWx0UHJvcHMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJkZXNjcmlwdG9yIiwiX3JlZHVjZXJzIiwiX2NhdGVnb3J5QXBpIiwibG9hZCIsImxvYWRDYXRlZ29yaWVzIiwiYWRkIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvTG9jYWxlU3RyaW5nIiwiYWRkQ2F0ZWdvcnkiLCJ1cGRhdGVDYXRlZ29yeSIsInJlbW92ZUNhdGVnb3J5IiwidGhlbiIsIl9leHBlbnNlUmVkdWNlcnMiLCJhZGRFeHBlbnNlIiwiY2F0ZWdvcnlJZCIsImV4cGVuc2UiLCJFWFBFTlNFX0FERCIsImFkZEV4cGVuc2VUb0NhdGVnb3J5IiwidXBkYXRlRXhwZW5zZSIsIkVYUEVOU0VfVVBEQVRFIiwidXBkYXRlRXhwZW5zZUNhdGVnb3J5IiwicmVtb3ZlRXhwZW5zZSIsIkVYUEVOU0VfUkVNT1ZFIiwicmVtb3ZlRXhwZW5zZUNhdGVnb3J5IiwiZXhwZW5zZXNCeUNhdGVnb3J5IiwicmVkdWNlIiwiZXhwZW5zZXMiLCJbb2JqZWN0IE9iamVjdF0iLCJjb3B5IiwibmV3U3RhdGUiLCJnZXRFeHBlbnNlcyIsImdldEV4cGVuc2VzQnlDYXRlZ29yeSIsImlzQWJzb2x1dGUiLCJwYXRobmFtZSIsImNoYXJBdCIsInNwbGljZU9uZSIsImsiLCJwb3AiLCJyZXNvbHZlX3BhdGhuYW1lIiwidG8iLCJmcm9tIiwidG9QYXJ0cyIsInNwbGl0IiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJoYXNUcmFpbGluZ1NsYXNoIiwibGFzdCIsInVwIiwidW5zaGlmdCIsIl90eXBlb2YiLCJpdGVyYXRvciIsInZhbHVlX2VxdWFsIiwidmFsdWVFcXVhbCIsImlzQXJyYXkiLCJldmVyeSIsImFUeXBlIiwiYVZhbHVlIiwidmFsdWVPZiIsImJWYWx1ZSIsImFLZXlzIiwiYktleXMiLCJhZGRMZWFkaW5nU2xhc2giLCJzdHJpcExlYWRpbmdTbGFzaCIsImhhc0Jhc2VuYW1lIiwic3RyaXBCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJsb2NhdGlvbiIsInNlYXJjaCIsImhhc2giLCJMb2NhdGlvblV0aWxzX2NyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsIkxvY2F0aW9uVXRpbHNfbG9jYXRpb25zQXJlRXF1YWwiLCJlc19jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiYWN0aW9uIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImNhbGxiYWNrIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJfa2V5IiwiY2FuVXNlRE9NIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm5vZGUiLCJldmVudCIsImF0dGFjaEV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwiZ2V0Q29uZmlybWF0aW9uIiwibWVzc2FnZSIsImNvbmZpcm0iLCJjcmVhdGVCcm93c2VySGlzdG9yeV90eXBlb2YiLCJjcmVhdGVCcm93c2VySGlzdG9yeV9leHRlbmRzIiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImVzX2NyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiaW52YXJpYW50X2Jyb3dzZXJfZGVmYXVsdCIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJzdXBwb3J0c0hpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJNYXRoIiwicmFuZG9tIiwidHJhbnNpdGlvbk1hbmFnZXIiLCJoYW5kbGVQb3BTdGF0ZSIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwib2siLCJyZXZlcnRQb3AiLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImlzQmxvY2tlZCIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJjcmVhdGVIYXNoSGlzdG9yeV9leHRlbmRzIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwiZ2V0SGFzaFBhdGgiLCJzdWJzdHJpbmciLCJyZXBsYWNlSGFzaFBhdGgiLCJlc19jcmVhdGVIYXNoSGlzdG9yeSIsImNhbkdvV2l0aG91dFJlbG9hZCIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsInB1c2hIYXNoUGF0aCIsIm5leHRQYXRocyIsImNyZWF0ZU1lbW9yeUhpc3RvcnlfdHlwZW9mIiwiY3JlYXRlTWVtb3J5SGlzdG9yeV9leHRlbmRzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIm1pbiIsIm1heCIsImVzX2NyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJlbnRyaWVzIiwiZW50cnkiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsImNhbkdvIiwiUm91dGVyX2V4dGVuZHMiLCJSb3V0ZXJfUm91dGVyIiwiX1JlYWN0JENvbXBvbmVudCIsIlJvdXRlciIsIl90ZW1wIiwiY29tcHV0ZU1hdGNoIiwicm91dGVyIiwidXJsIiwicGFyYW1zIiwiaXNFeGFjdCIsImNvbXBvbmVudFdpbGxNb3VudCIsIl90aGlzMiIsIl9wcm9wcyIsInJlYWN0X2RlZmF1bHQiLCJDaGlsZHJlbiIsImNvdW50Iiwid2FybmluZ19kZWZhdWx0IiwiQ29tcG9uZW50IiwiZXNfUm91dGVyIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZXIiLCJCcm93c2VyUm91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJCcm93c2VyUm91dGVyX0Jyb3dzZXJSb3V0ZXIiLCJCcm93c2VyUm91dGVyIiwiQnJvd3NlclJvdXRlcl9jbGFzc0NhbGxDaGVjayIsIkJyb3dzZXJSb3V0ZXJfaW5oZXJpdHMiLCJzdHJpbmciLCJib29sIiwibnVtYmVyIiwiZXNfQnJvd3NlclJvdXRlciIsIkhhc2hSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkhhc2hSb3V0ZXJfSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXIiLCJIYXNoUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiSGFzaFJvdXRlcl9pbmhlcml0cyIsIm9uZU9mIiwiZXNfSGFzaFJvdXRlciIsIkxpbmtfZXh0ZW5kcyIsIkxpbmtfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImlzTW9kaWZpZWRFdmVudCIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJMaW5rX0xpbmsiLCJMaW5rIiwiTGlua19jbGFzc0NhbGxDaGVjayIsImhhbmRsZUNsaWNrIiwib25DbGljayIsImRlZmF1bHRQcmV2ZW50ZWQiLCJidXR0b24iLCJwcmV2ZW50RGVmYXVsdCIsIl90aGlzJHByb3BzIiwiTGlua19pbmhlcml0cyIsImlubmVyUmVmIiwib25lT2ZUeXBlIiwiZXNfTGluayIsIk1lbW9yeVJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiTWVtb3J5Um91dGVyX01lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlcl9jbGFzc0NhbGxDaGVjayIsIk1lbW9yeVJvdXRlcl9pbmhlcml0cyIsImFycmF5IiwicmVhY3Rfcm91dGVyX2RvbV9lc19NZW1vcnlSb3V0ZXIiLCJwYXR0ZXJuQ2FjaGUiLCJjYWNoZUNvdW50IiwiZXNfbWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsImV4YWN0IiwiX29wdGlvbnMkc3RyaWN0IiwiX29wdGlvbnMkc2Vuc2l0aXZlIiwiX2NvbXBpbGVQYXRoIiwiY2FjaGVLZXkiLCJjYWNoZSIsImNvbXBpbGVkUGF0dGVybiIsInBhdGhfdG9fcmVnZXhwX2RlZmF1bHQiLCJtYXRjaFBhdGhfY29tcGlsZVBhdGgiLCJ2YWx1ZXMiLCJSb3V0ZV9leHRlbmRzIiwiUm91dGVfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJvdXRlX2lzRW1wdHlDaGlsZHJlbiIsIlJvdXRlX1JvdXRlIiwiUm91dGUiLCJSb3V0ZV9jbGFzc0NhbGxDaGVjayIsIlJvdXRlX2luaGVyaXRzIiwiY29tcHV0ZWRNYXRjaCIsImNvbXBvbmVudCIsIm5leHRDb250ZXh0IiwiX2NvbnRleHQkcm91dGVyIiwic3RhdGljQ29udGV4dCIsImVzX1JvdXRlIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZSIsIk5hdkxpbmtfZXh0ZW5kcyIsIk5hdkxpbmtfdHlwZW9mIiwiTmF2TGlua19OYXZMaW5rIiwiYWN0aXZlQ2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJnZXRJc0FjdGl2ZSIsImFyaWFDdXJyZW50IiwicmVzdCIsIk5hdkxpbmtfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJlc2NhcGVkUGF0aCIsImFyaWEtY3VycmVudCIsImVzX05hdkxpbmsiLCJQcm9tcHRfUHJvbXB0IiwiUHJvbXB0IiwiUHJvbXB0X2NsYXNzQ2FsbENoZWNrIiwiUHJvbXB0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJQcm9tcHRfaW5oZXJpdHMiLCJlbmFibGUiLCJkaXNhYmxlIiwid2hlbiIsInJlYWN0X3JvdXRlcl9kb21fZXNfUHJvbXB0IiwiZ2VuZXJhdGVQYXRoX3BhdHRlcm5DYWNoZSIsImdlbmVyYXRlUGF0aF9jYWNoZUNvdW50IiwiZXNfZ2VuZXJhdGVQYXRoIiwiY29tcGlsZWRHZW5lcmF0b3IiLCJnZW5lcmF0ZVBhdGhfY29tcGlsZUdlbmVyYXRvciIsImdlbmVyYXRvciIsIlJlZGlyZWN0X2V4dGVuZHMiLCJSZWRpcmVjdF9SZWRpcmVjdCIsIlJlZGlyZWN0IiwiUmVkaXJlY3RfY2xhc3NDYWxsQ2hlY2siLCJSZWRpcmVjdF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVkaXJlY3RfaW5oZXJpdHMiLCJpc1N0YXRpYyIsInBlcmZvcm0iLCJwcmV2UHJvcHMiLCJwcmV2VG8iLCJuZXh0VG8iLCJjb21wdXRlVG8iLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1JlZGlyZWN0IiwiU3RhdGljUm91dGVyX2V4dGVuZHMiLCJTdGF0aWNSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlN0YXRpY1JvdXRlcl9hZGRMZWFkaW5nU2xhc2giLCJhZGRCYXNlbmFtZSIsIlN0YXRpY1JvdXRlcl9jcmVhdGVVUkwiLCJTdGF0aWNSb3V0ZXJfc3RhdGljSGFuZGxlciIsIlN0YXRpY1JvdXRlcl9TdGF0aWNSb3V0ZXIiLCJTdGF0aWNSb3V0ZXIiLCJTdGF0aWNSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJoYW5kbGVQdXNoIiwiaGFuZGxlUmVwbGFjZSIsIl90aGlzJHByb3BzMiIsImhhbmRsZUxpc3RlbiIsImhhbmRsZUJsb2NrIiwiU3RhdGljUm91dGVyX2luaGVyaXRzIiwiU3RhdGljUm91dGVyX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiU3RhdGljUm91dGVyX3N0cmlwQmFzZW5hbWUiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1N0YXRpY1JvdXRlciIsIlN3aXRjaF9Td2l0Y2giLCJTd2l0Y2giLCJTd2l0Y2hfY2xhc3NDYWxsQ2hlY2siLCJTd2l0Y2hfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlN3aXRjaF9pbmhlcml0cyIsImNoaWxkIiwiaXNWYWxpZEVsZW1lbnQiLCJfZWxlbWVudCRwcm9wcyIsInBhdGhQcm9wIiwiY2xvbmVFbGVtZW50IiwicmVhY3Rfcm91dGVyX2RvbV9lc19Td2l0Y2giLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX2dlbmVyYXRlUGF0aCIsInJlYWN0X3JvdXRlcl9kb21fZXNfbWF0Y2hQYXRoIiwid2l0aFJvdXRlcl9leHRlbmRzIiwicmVhY3Rfcm91dGVyX2RvbV9lc193aXRoUm91dGVyIiwiQyIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsIndpdGhSb3V0ZXJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJyb3V0ZUNvbXBvbmVudFByb3BzIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsImlzUGxhaW5PYmplY3QiLCJwcm90byIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwic3ltYm9sX29ic2VydmFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJTdHJpbmciLCJjb21iaW5lUmVkdWNlcnMiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsImZpbmFsUmVkdWNlcktleXMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaGFzQ2hhbmdlZCIsIl9pIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvciIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsImNvbXBvc2UiLCJmdW5jcyIsImFwcGx5TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwiX2xlbjIiLCJfa2V5MiIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1pZGRsZXdhcmUiLCJyb290IiwiX3BvbnlmaWxsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJnbG9iYWwiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidGVzdDEiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsInZhbCIsInRvT2JqZWN0IiwidmFsaWRhdGVGb3JtYXQiLCJtYWtlRW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50IiwiZyIsImV2YWwiLCJfcmVxdWVzdCIsIkNBVEVHT1JZX1VSTCIsImdldENhdGVnb3J5VXJsIiwiZ2V0RXhwZW5zZVVybCIsImV4cGVuc2VLZXkiLCJ0cmFuc2Zvcm1Ub0FycmF5IiwiZWFjaCIsInJlc3BvbnNlIiwiUHJvbWlzZSIsInJlamVjdCIsInBvc3QiLCJwdXQiLCJkZWwiLCJfcmVhY3QiLCJFeHBlbnNlRm9ybSIsInN1cGVyIiwiZWRpdGluZyIsInByaWNlIiwiaGFuZGxlQ2hhbmdlIiwiaGFuZGxlU3VibWl0Iiwib25Db21wbGV0ZSIsIm9uQ2FuY2VsIiwiX3JlYWN0MiIsImRlZmF1bHQiLCJvblN1Ym1pdCIsIm9uQ2hhbmdlIiwiZm9ybUJ1dHRvbnMiLCJQcm9wVHlwZXMiLCJDYXRlZ29yeUZvcm0iLCJidWRnZXQiLCJmcmVlR2xvYmFsIiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwib2JzZXJ2YWJsZSIsIl9yZWFjdFJlZHV4IiwiUmVhY3RET00iLCJfQXBwMiIsImdldEVsZW1lbnRCeUlkIiwicSIsImZvciIsInUiLCJ2IiwidyIsInoiLCJBIiwiQiIsIkQiLCJFIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkYiLCJ1cGRhdGVyIiwiRyIsIkgiLCJpc1JlYWN0Q29tcG9uZW50IiwiSSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSiIsIksiLCJMIiwiX19zZWxmIiwiX19zb3VyY2UiLCJNIiwiaCIsIiQkdHlwZW9mIiwiX293bmVyIiwiTiIsIk8iLCJQIiwiUSIsImtleVByZWZpeCIsIlIiLCJTIiwiVCIsImRvbmUiLCI9IiwiOiIsImVzY2FwZSIsIlUiLCJWIiwiVyIsIlgiLCJ0b0FycmF5IiwiY3JlYXRlUmVmIiwiUHVyZUNvbXBvbmVudCIsImNyZWF0ZUNvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfZGVmYXVsdFZhbHVlIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX2NoYW5nZWRCaXRzIiwiX2NoYW5nZWRCaXRzMiIsIkNvbnN1bWVyIiwiX2NvbnRleHQiLCJmb3J3YXJkUmVmIiwiRnJhZ21lbnQiLCJTdHJpY3RNb2RlIiwidW5zdGFibGVfQXN5bmNNb2RlIiwidW5zdGFibGVfUHJvZmlsZXIiLCJjcmVhdGVGYWN0b3J5IiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnRPd25lciIsIlkiLCJaIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJjb25zb2xlIiwiYWEiLCJiYSIsImRhIiwiZWEiLCJmYSIsImhhIiwiX2NhdWdodEVycm9yIiwiX2hhc0NhdWdodEVycm9yIiwiX3JldGhyb3dFcnJvciIsIl9oYXNSZXRocm93RXJyb3IiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2siLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCJoYXNDYXVnaHRFcnJvciIsImNsZWFyQ2F1Z2h0RXJyb3IiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJsYSIsIm1hIiwibmEiLCJvYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInFhIiwicmVnaXN0cmF0aW9uTmFtZSIsInJhIiwic2EiLCJkZXBlbmRlbmNpZXMiLCJ0YSIsInZhIiwicGx1Z2lucyIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsInBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwid2EiLCJ4YSIsInlhIiwiemEiLCJjdXJyZW50VGFyZ2V0IiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJFYSIsIkZhIiwiR2EiLCJIYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiSWEiLCJKYSIsIkthIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJydW5FdmVudHNJbkJhdGNoIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIkxhIiwiTWEiLCJOYSIsInRhZyIsIk9hIiwiUGEiLCJRYSIsInByZWNhY2hlRmliZXJOb2RlIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwicmV0dXJuIiwiUmEiLCJTYSIsImRpc3BhdGNoQ29uZmlnIiwiVGEiLCJfdGFyZ2V0SW5zdCIsIlVhIiwiVmEiLCJYYSIsIllhIiwiWmEiLCJhbHRlcm5hdGUiLCIkYSIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldCIsImFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzIiwiYWIiLCJ0b0xvd2VyQ2FzZSIsImJiIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiY2IiLCJkYiIsImViIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwiZG9jdW1lbnRFbGVtZW50IiwiX3Jvb3QiLCJfc3RhcnRUZXh0IiwiX2ZhbGxiYWNrVGV4dCIsIm1iIiwibmIiLCJvYiIsInBiIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwibm93IiwiaXNUcnVzdGVkIiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsInJiIiwiZXZlbnRQb29sIiwic2IiLCJkZXN0cnVjdG9yIiwicWIiLCJnZXRQb29sZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXh0ZW5kIiwidGIiLCJ1YiIsInZiIiwid2IiLCJ4YiIsImRvY3VtZW50TW9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsIkNiIiwiRGIiLCJrZXlDb2RlIiwiRWIiLCJkZXRhaWwiLCJGYiIsIkliIiwid2hpY2giLCJHYiIsImNoYXIiLCJIYiIsIkpiIiwiS2IiLCJpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50IiwiTGIiLCJNYiIsIk5iIiwicmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiZW5xdWV1ZVN0YXRlUmVzdG9yZSIsIm5lZWRzU3RhdGVSZXN0b3JlIiwicmVzdG9yZVN0YXRlSWZOZWVkZWQiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiZW1haWwiLCJtb250aCIsInBhc3N3b3JkIiwicmFuZ2UiLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJZYiIsIm5vZGVOYW1lIiwiWmIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJub2RlVHlwZSIsIiRiIiwiYWMiLCJjYyIsIl92YWx1ZVRyYWNrZXIiLCJzZXQiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiYmMiLCJkYyIsImNoZWNrZWQiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJrYyIsImxjIiwibWMiLCJwYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJwZW5kaW5nUHJvcHMiLCJ2YyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwid2MiLCJ4YyIsInpjIiwiQWMiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwiRWMiLCJGYyIsIkdjIiwiQ2MiLCJpc05hTiIsIkRjIiwiQmMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIkhjIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJJYyIsIkpjIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIktjIiwiTGMiLCJNYyIsIk5jIiwib3duZXJEb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiLCJ0YWJJbmRleCIsIk9jIiwiY2hhbmdlIiwiUGMiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIlVjIiwiVmMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJiZCIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJjZCIsInZpZXciLCJkZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJlZCIsImdldE1vZGlmaWVyU3RhdGUiLCJmZCIsImdkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwiaGQiLCJwb2ludGVySWQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJqZCIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93Iiwia2QiLCJlZmZlY3RUYWciLCJsZCIsIm1kIiwic2libGluZyIsIm5kIiwicGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwicWQiLCJjbGlwYm9hcmREYXRhIiwicmQiLCJzZCIsImNoYXJDb2RlIiwidGQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwidWQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwidmQiLCJsb2NhbGUiLCJ3ZCIsImRhdGFUcmFuc2ZlciIsInhkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsInlkIiwiemQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIkFkIiwiQmQiLCJDZCIsIkRkIiwiaXNJbnRlcmFjdGl2ZSIsIkVkIiwiaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlIiwiRmQiLCJHZCIsIkhkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsImNvbnRhaW5lckluZm8iLCJ0b3BMZXZlbFR5cGUiLCJJZCIsIktkIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJfZW5hYmxlZCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJUZCIsIlVkIiwidGV4dENvbnRlbnQiLCJWZCIsImNvbnRlbnRFZGl0YWJsZSIsIldkIiwiWGQiLCJzZWxlY3QiLCJZZCIsIlpkIiwiJGQiLCJhZSIsImJlIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNlIiwib25TZWxlY3QiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiZGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJlZSIsImZlIiwic2V0VGltZW91dCIsImdlIiwiY2xlYXJUaW1lb3V0IiwiaGUiLCJwZXJmb3JtYW5jZSIsImllIiwiamUiLCJrZSIsImxlIiwibWUiLCJuZSIsIm9lIiwicGUiLCJxZSIsInNlIiwidGUiLCJkaWRUaW1lb3V0IiwidGltZVJlbWFpbmluZyIsInZlIiwic2NoZWR1bGVkQ2FsbGJhY2siLCJwb3N0TWVzc2FnZSIsInVlIiwidGltZW91dFRpbWUiLCJ3ZSIsInRpbWVvdXQiLCJwcmV2IiwieGUiLCJNYXAiLCJJbmZpbml0eSIsImRlbGV0ZSIsInplIiwieWUiLCJBZSIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiQmUiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiQ2UiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsIkxlIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiTWUiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJOZSIsIk9lIiwidHJpbSIsInNldFByb3BlcnR5IiwiUGUiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJibHVyIiwiZm9jdXMiLCJVZSIsImNyZWF0ZUVsZW1lbnROUyIsIlZlIiwiV2UiLCJfX2h0bWwiLCJvbmNsaWNrIiwiWGUiLCJZZSIsIlplIiwiJGUiLCJhZiIsInNldEluaXRpYWxQcm9wZXJ0aWVzIiwiZGlmZlByb3BlcnRpZXMiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFRleHQiLCJ3YXJuRm9yVW5tYXRjaGVkVGV4dCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJiZiIsImNmIiwiZGYiLCJhdXRvRm9jdXMiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwia2YiLCJTZXQiLCJsZiIsIm1mIiwibmYiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwidGYiLCJ1ZiIsInZmIiwid2YiLCJ4ZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwieWYiLCJ6ZiIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZXhwaXJhdGlvblRpbWUiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJGZiIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImVhcmxpZXN0U3VzcGVuZGVkVGltZSIsImxhdGVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RQaW5nZWRUaW1lIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiZmluaXNoZWRXb3JrIiwicGVuZGluZ0NvbnRleHQiLCJoeWRyYXRlIiwicmVtYWluaW5nRXhwaXJhdGlvblRpbWUiLCJmaXJzdEJhdGNoIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJHZiIsIkhmIiwiSWYiLCJLZiIsIkxmIiwiTWYiLCJOZiIsImJhc2VTdGF0ZSIsImZpcnN0VXBkYXRlIiwibGFzdFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRVcGRhdGUiLCJsYXN0Q2FwdHVyZWRVcGRhdGUiLCJmaXJzdENhcHR1cmVkRWZmZWN0IiwibGFzdENhcHR1cmVkRWZmZWN0IiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiVWYiLCJWZiIsIldmIiwiWGYiLCJZZiIsInN0YWNrIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJqZyIsInRhZ05hbWUiLCJrZyIsImxnIiwibWciLCJxZyIsIl9yZWFjdEludGVybmFsRmliZXIiLCJuZyIsIm9nIiwicGciLCJyZyIsInNnIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJ0ZyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsInVnIiwidmciLCJfc3RyaW5nUmVmIiwid2ciLCJ4ZyIsIkpkIiwieWciLCJ6ZyIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkdnIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiTmciLCJTZyIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImhpZGRlbiIsIlJnIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiVGciLCJVZyIsIlZnIiwiV2ciLCJYZyIsIllnIiwic3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiZmgiLCJnaCIsImhoIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJpaCIsImNvbXBvbmVudFN0YWNrIiwiamgiLCJoYXMiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwidmgiLCJ3aCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsImdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiX29uQ29tcGxldGUiLCJiaSIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInJhbmdlQ291bnQiLCJXYSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJqYSIsIm5pIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImlnIiwib2MiLCJjYSIsInhpIiwieWkiLCJPZyIsIlBnIiwiemkiLCJ5YyIsIlFnIiwiQWkiLCJjaSIsImRpIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJsaSIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiSmYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsIm1pIiwicGkiLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJxaSIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJyaSIsIl9pbnRlcm5hbFJvb3QiLCJzaSIsInVpIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImhhc0F0dHJpYnV0ZSIsInRpIiwidmkiLCJvaSIsImNvbW1pdCIsInVubW91bnQiLCJjcmVhdGVCYXRjaCIsIndpIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2RlZmVycmVkVXBkYXRlcyIsInVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlcyIsImZsdXNoU3luYyIsInVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZCIsIkV2ZW50UGx1Z2luSHViIiwiRXZlbnRQbHVnaW5SZWdpc3RyeSIsIkV2ZW50UHJvcGFnYXRvcnMiLCJSZWFjdENvbnRyb2xsZWRDb21wb25lbnQiLCJSZWFjdERPTUNvbXBvbmVudFRyZWUiLCJSZWFjdERPTUV2ZW50TGlzdGVuZXIiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJCaSIsIkNpIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJkb2MiLCJib2R5IiwiaXNUZXh0Tm9kZSIsImNvbnRhaW5zTm9kZSIsIm91dGVyTm9kZSIsImlubmVyTm9kZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJpc05vZGUiLCJOb2RlIiwiX3JlYWN0Um91dGVyRG9tIiwiYXBwIiwiX0hlYWRlcjIiLCJIb21lIiwiRGFzaGJvYXJkIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsImNoZWNrUHJvcFR5cGVzIiwiYXJyIiwiSGVhZGVyIiwiaGFuZGxlU3BlY2lhbCIsImFsZXJ0IiwiaGVhZGVyIiwic3JjIiwibG9nbyIsIk5hdkxpbmsiLCJfRXJyb3IyIiwiX2Vycm9yUmVkdWNlcnMiLCJfZXJyb3JBY3Rpb25zIiwiY2xlYXJFcnJvciIsImNvbm5lY3QiLCJvcmlnaW5hbE1vZHVsZSIsIndlYnBhY2tQb2x5ZmlsbCIsImhtciIsImxvY2FscyIsIm5hbWVzIiwibWFwcGluZ3MiLCJmaWxlIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwiJDEiLCJzb3VyY2VzQ29udGVudCIsImhvbWUiLCJzdGFydEltYWdlIiwiYnVkZ2V0SW1hZ2UiLCJfYWN0aW9ucyIsImRhc2hib2FyZCIsIl9DYXRlZ29yeUZvcm0yIiwiX0NhdGVnb3JpZXMyIiwib25VcGRhdGUiLCJDYXRlZ29yaWVzIiwiX0NhdGVnb3J5MiIsIkNhdGVnb3J5IiwiaGFuZGxlRWRpdCIsImhhbmRsZUNvbXBsZXRlIiwiaGFuZGxlRW5kRWRpdCIsIl9DYXRlZ29yeURpc3BsYXkyIiwib25FZGl0Iiwib25EZWxldGUiLCJoYW5kbGVEZWxldGUiLCJDYXRlZ29yeURpc3BsYXkiLCJjYXRlZ29yeWRpc3BsYXkiLCJfRXhwZW5zZXMyIiwicmVxdWVzdCIsImZldGNoIiwianNvbiIsImVycm9ycyIsImhlYWRlcnMiLCJjb250ZW50LXR5cGUiLCJtZXRob2QiLCJfZXhwZW5zZUFjdGlvbnMiLCJFeHBlbnNlcyIsImhhbmRsZUFkZEV4cGVuc2UiLCJfRXhwZW5zZUZvcm0yIiwiX0V4cGVuc2UyIiwiRXhwZW5zZSIsIl9FeHBlbnNlRGlzcGxheTIiLCJFeHBlbnNlRGlzcGxheSIsImV4cGVuc2VkaXNwbGF5IiwiZXhwZW5zZWZvcm0iLCJfcmVkdXgiLCJyb290UmVkdWNlciIsImNvbXBvc2VFbmhhbmNlcnMiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18iLCJ0aHVuayIsInByb21pc2VNaWRkbGV3YXJlIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsIndpdGhFeHRyYUFyZ3VtZW50IiwiaXNQcm9taXNlIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLGFBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVBQUFrQixFQUFBTyxHQUNBWCxPQUFBQyxlQUFBVSxFQUFBLFdBQXlDVCxZQUFBLEVBQUFLLFVBQ3pDLEVBQUFFLEdBQUEsaUJBQUFGLEVBQUEsUUFBQU0sS0FBQU4sRUFBQXJCLEVBQUFVLEVBQUFlLEVBQUFFLEVBQUEsU0FBQUEsR0FBZ0gsT0FBQU4sRUFBQU0sSUFBcUJDLEtBQUEsS0FBQUQsSUFDckksT0FBQUYsR0FJQXpCLEVBQUE2QixFQUFBLFNBQUExQixHQUNBLElBQUFTLEVBQUFULEtBQUFxQixXQUNBLFdBQTJCLE9BQUFyQixFQUFBLFNBQzNCLFdBQWlDLE9BQUFBLEdBRWpDLE9BREFILEVBQUFVLEVBQUFFLEVBQUEsSUFBQUEsR0FDQUEsR0FJQVosRUFBQWEsRUFBQSxTQUFBaUIsRUFBQUMsR0FBc0QsT0FBQWpCLE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQXVCLEVBQUFDLElBR3REL0IsRUFBQWtDLEVBQUEsSUFJQWxDLElBQUFtQyxFQUFBLHNCQ3hEQWhDLEVBQUFELFFBQUFGLEVBQUEsR0FBQUEsaUNDdkJBRyxFQUFBRCxRQUFBRixFQUFBLGtDQzZDQUcsRUFBQUQsUUE1QkEsU0FBQWtDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUE5QixFQUFBQyxFQUFBOEIsRUFBQUMsR0FPQSxJQUFBTCxFQUFBLENBQ0EsSUFBQU0sRUFDQSxRQUFBQyxJQUFBTixFQUNBSyxFQUFBLElBQUFFLE1BQ0EscUlBR0ssQ0FDTCxJQUFBQyxHQUFBUCxFQUFBQyxFQUFBOUIsRUFBQUMsRUFBQThCLEVBQUFDLEdBQ0FLLEVBQUEsR0FDQUosRUFBQSxJQUFBRSxNQUNBUCxFQUFBVSxRQUFBLGlCQUEwQyxPQUFBRixFQUFBQyxTQUUxQ25DLEtBQUEsc0JBSUEsTUFEQStCLEVBQUFNLFlBQUEsRUFDQU4sa0NDNUJBLElBRUFPLEVBQUEsYUEyQ0E5QyxFQUFBRCxRQUFBK0MsZ0NDRkE5QyxFQUFBRCxRQXpDQSw0QkNiQUMsRUFBQUQsUUFBQSxTQUFBZ0QsR0FDQSxJQUFBQyxLQXdDQSxPQXJDQUEsRUFBQUMsU0FBQSxXQUNBLE9BQUFDLEtBQUFDLElBQUEsU0FBQUMsR0FDQSxJQUFBQyxFQXNDQSxTQUFBRCxFQUFBTCxHQUNBLElBQUFNLEVBQUFELEVBQUEsT0FDQUUsRUFBQUYsRUFBQSxHQUNBLElBQUFFLEVBQ0EsT0FBQUQsRUFHQSxHQUFBTixHQUFBLG1CQUFBUSxLQUFBLENBQ0EsSUFBQUMsRUFZQSxTQUFBQyxHQUtBLHlFQUhBRixLQUFBRyxTQUFBQyxtQkFBQUMsS0FBQUMsVUFBQUosTUFHQSxNQWpCQUssQ0FBQVIsR0FDQVMsRUFBQVQsRUFBQVUsUUFBQWIsSUFBQSxTQUFBYyxHQUNBLHVCQUFBWCxFQUFBWSxXQUFBRCxFQUFBLFFBR0EsT0FBQVosR0FBQWMsT0FBQUosR0FBQUksUUFBQVgsSUFBQVksS0FBQSxNQUdBLE9BQUFmLEdBQUFlLEtBQUEsTUF0REFDLENBQUFqQixFQUFBTCxHQUNBLE9BQUFLLEVBQUEsR0FDQSxVQUFBQSxFQUFBLE9BQW1DQyxFQUFBLElBRW5DQSxJQUVHZSxLQUFBLEtBSUhwQixFQUFBL0MsRUFBQSxTQUFBRSxFQUFBbUUsR0FDQSxpQkFBQW5FLElBQ0FBLElBQUEsS0FBQUEsRUFBQSxNQUVBLElBREEsSUFBQW9FLEtBQ0F0RSxFQUFBLEVBQWdCQSxFQUFBaUQsS0FBQXNCLE9BQWlCdkUsSUFBQSxDQUNqQyxJQUFBd0UsRUFBQXZCLEtBQUFqRCxHQUFBLEdBQ0EsaUJBQUF3RSxJQUNBRixFQUFBRSxJQUFBLEdBRUEsSUFBQXhFLEVBQUEsRUFBWUEsRUFBQUUsRUFBQXFFLE9BQW9CdkUsSUFBQSxDQUNoQyxJQUFBbUQsRUFBQWpELEVBQUFGLEdBS0EsaUJBQUFtRCxFQUFBLElBQUFtQixFQUFBbkIsRUFBQSxNQUNBa0IsSUFBQWxCLEVBQUEsR0FDQUEsRUFBQSxHQUFBa0IsRUFDS0EsSUFDTGxCLEVBQUEsT0FBQUEsRUFBQSxhQUFBa0IsRUFBQSxLQUVBdEIsRUFBQTBCLEtBQUF0QixNQUlBSixvQkN6Q0EsSUFBQTJCLEtBV0FDLEVBVEEsU0FBQUMsR0FDQSxJQUFBQyxFQUVBLGtCQUVBLFlBREEsSUFBQUEsTUFBQUQsRUFBQUUsTUFBQTdCLEtBQUE4QixZQUNBRixHQUlBRyxDQUFBLFdBTUEsT0FBQUMsUUFBQUMsbUJBQUFDLE1BQUFGLE9BQUFHLE9BVUFDLEVBQUEsU0FBQVQsR0FDQSxJQUFBQyxLQUVBLGdCQUFBUyxFQUFBQyxHQU1BLHNCQUFBRCxFQUNBLE9BQUFBLElBRUEsWUFBQVQsRUFBQVMsR0FBQSxDQUNBLElBQUFFLEVBcEJBLFNBQUFGLEVBQUFDLEdBQ0EsT0FBQUEsRUFDQUEsRUFBQUUsY0FBQUgsR0FFQUosU0FBQU8sY0FBQUgsSUFnQkFuRixLQUFBOEMsS0FBQXFDLEVBQUFDLEdBRUEsR0FBQU4sT0FBQVMsbUJBQUFGLGFBQUFQLE9BQUFTLGtCQUNBLElBR0FGLElBQUFHLGdCQUFBQyxLQUNLLE1BQUF4RCxHQUNMb0QsRUFBQSxLQUdBWCxFQUFBUyxHQUFBRSxFQUVBLE9BQUFYLEVBQUFTLElBMUJBLEdBOEJBTyxFQUFBLEtBQ0FDLEVBQUEsRUFDQUMsS0FFQUMsRUFBQXBHLEVBQUEsSUFxREEsU0FBQXFHLEVBQUFDLEVBQUFDLEdBQ0EsUUFBQW5HLEVBQUEsRUFBZ0JBLEVBQUFrRyxFQUFBM0IsT0FBbUJ2RSxJQUFBLENBQ25DLElBQUFtRCxFQUFBK0MsRUFBQWxHLEdBQ0FvRyxFQUFBMUIsRUFBQXZCLEVBQUFxQixJQUVBLEdBQUE0QixFQUFBLENBQ0FBLEVBQUFDLE9BRUEsUUFBQUMsRUFBQSxFQUFpQkEsRUFBQUYsRUFBQUcsTUFBQWhDLE9BQTJCK0IsSUFDNUNGLEVBQUFHLE1BQUFELEdBQUFuRCxFQUFBb0QsTUFBQUQsSUFHQSxLQUFRQSxFQUFBbkQsRUFBQW9ELE1BQUFoQyxPQUF1QitCLElBQy9CRixFQUFBRyxNQUFBOUIsS0FBQStCLEVBQUFyRCxFQUFBb0QsTUFBQUQsR0FBQUgsUUFFRyxDQUNILElBQUFJLEtBRUEsSUFBQUQsRUFBQSxFQUFpQkEsRUFBQW5ELEVBQUFvRCxNQUFBaEMsT0FBdUIrQixJQUN4Q0MsRUFBQTlCLEtBQUErQixFQUFBckQsRUFBQW9ELE1BQUFELEdBQUFILElBR0F6QixFQUFBdkIsRUFBQXFCLEtBQTJCQSxHQUFBckIsRUFBQXFCLEdBQUE2QixLQUFBLEVBQUFFLFdBSzNCLFNBQUFFLEVBQUExRCxFQUFBb0QsR0FJQSxJQUhBLElBQUFELEtBQ0FRLEtBRUExRyxFQUFBLEVBQWdCQSxFQUFBK0MsRUFBQXdCLE9BQWlCdkUsSUFBQSxDQUNqQyxJQUFBbUQsRUFBQUosRUFBQS9DLEdBQ0F3RSxFQUFBMkIsRUFBQVEsS0FBQXhELEVBQUEsR0FBQWdELEVBQUFRLEtBQUF4RCxFQUFBLEdBSUF5RCxHQUFjQyxJQUhkMUQsRUFBQSxHQUdjMkQsTUFGZDNELEVBQUEsR0FFY0ssVUFEZEwsRUFBQSxJQUdBdUQsRUFBQWxDLEdBQ0FrQyxFQUFBbEMsR0FBQStCLE1BQUE5QixLQUFBbUMsR0FEQVYsRUFBQXpCLEtBQUFpQyxFQUFBbEMsSUFBa0RBLEtBQUErQixPQUFBSyxLQUlsRCxPQUFBVixFQUdBLFNBQUFhLEVBQUFaLEVBQUFhLEdBQ0EsSUFBQTFCLEVBQUFELEVBQUFjLEVBQUFjLFlBRUEsSUFBQTNCLEVBQ0EsVUFBQTlDLE1BQUEsK0dBR0EsSUFBQTBFLEVBQUFuQixJQUFBeEIsT0FBQSxHQUVBLFdBQUE0QixFQUFBZ0IsU0FDQUQsRUFFR0EsRUFBQUUsWUFDSDlCLEVBQUErQixhQUFBTCxFQUFBRSxFQUFBRSxhQUVBOUIsRUFBQWdDLFlBQUFOLEdBSkExQixFQUFBK0IsYUFBQUwsRUFBQTFCLEVBQUFpQyxZQU1BeEIsRUFBQXRCLEtBQUF1QyxRQUNFLGNBQUFiLEVBQUFnQixTQUNGN0IsRUFBQWdDLFlBQUFOLE9BQ0UscUJBQUFiLEVBQUFnQixXQUFBaEIsRUFBQWdCLFNBQUFLLE9BSUYsVUFBQWhGLE1BQUEsOExBSEEsSUFBQTRFLEVBQUEvQixFQUFBYyxFQUFBZ0IsU0FBQUssT0FBQWxDLEdBQ0FBLEVBQUErQixhQUFBTCxFQUFBSSxJQU1BLFNBQUFLLEVBQUFULEdBQ0EsVUFBQUEsRUFBQVUsV0FBQSxTQUNBVixFQUFBVSxXQUFBQyxZQUFBWCxHQUVBLElBQUFZLEVBQUE3QixFQUFBOEIsUUFBQWIsR0FDQVksR0FBQSxHQUNBN0IsRUFBQStCLE9BQUFGLEVBQUEsR0FJQSxTQUFBRyxFQUFBNUIsR0FDQSxJQUFBYSxFQUFBOUIsU0FBQThDLGNBQUEsU0FNQSxRQUpBekYsSUFBQTRELEVBQUE4QixNQUFBQyxPQUNBL0IsRUFBQThCLE1BQUFDLEtBQUEsaUJBR0EzRixJQUFBNEQsRUFBQThCLE1BQUFFLE1BQUEsQ0FDQSxJQUFBQSxFQWdDQSxXQUNBLEVBSUEsT0FBQXZJLEVBQUF3SSxHQXJDQUMsR0FDQUYsSUFDQWhDLEVBQUE4QixNQUFBRSxTQU9BLE9BSEFHLEVBQUF0QixFQUFBYixFQUFBOEIsT0FDQWxCLEVBQUFaLEVBQUFhLEdBRUFBLEVBaUJBLFNBQUFzQixFQUFBQyxFQUFBTixHQUNBdkgsT0FBQThILEtBQUFQLEdBQUFRLFFBQUEsU0FBQWxILEdBQ0FnSCxFQUFBRyxhQUFBbkgsRUFBQTBHLEVBQUExRyxNQVlBLFNBQUFpRixFQUFBbUMsRUFBQXhDLEdBQ0EsSUFBQWEsRUFBQTRCLEVBQUFDLEVBQUFDLEVBR0EsR0FBQTNDLEVBQUE0QyxXQUFBSixFQUFBOUIsSUFBQSxDQUdBLEtBRkFpQyxFQUFBM0MsRUFBQTRDLFVBQUFKLEVBQUE5QixNQVNBLG9CQUpBOEIsRUFBQTlCLElBQUFpQyxFQVVBLEdBQUEzQyxFQUFBTixVQUFBLENBQ0EsSUFBQW1ELEVBQUFsRCxJQUVBa0IsRUFBQW5CLE1BQUFrQyxFQUFBNUIsSUFFQXlDLEVBQUFLLEVBQUF6SCxLQUFBLEtBQUF3RixFQUFBZ0MsR0FBQSxHQUNBSCxFQUFBSSxFQUFBekgsS0FBQSxLQUFBd0YsRUFBQWdDLEdBQUEsUUFHQUwsRUFBQW5GLFdBQ0EsbUJBQUEwRixLQUNBLG1CQUFBQSxJQUFBQyxpQkFDQSxtQkFBQUQsSUFBQUUsaUJBQ0EsbUJBQUFDLE1BQ0EsbUJBQUEvRixNQUVBMEQsRUFoRUEsU0FBQWIsR0FDQSxJQUFBbUQsRUFBQXBFLFNBQUE4QyxjQUFBLFFBVUEsWUFSQXpGLElBQUE0RCxFQUFBOEIsTUFBQUMsT0FDQS9CLEVBQUE4QixNQUFBQyxLQUFBLFlBRUEvQixFQUFBOEIsTUFBQXNCLElBQUEsYUFFQWpCLEVBQUFnQixFQUFBbkQsRUFBQThCLE9BQ0FsQixFQUFBWixFQUFBbUQsR0FFQUEsRUFxREFFLENBQUFyRCxHQUNBeUMsRUFpRkEsU0FBQVUsRUFBQW5ELEVBQUF3QyxHQUNBLElBQUE5QixFQUFBOEIsRUFBQTlCLElBQ0FyRCxFQUFBbUYsRUFBQW5GLFVBUUFpRyxPQUFBbEgsSUFBQTRELEVBQUF1RCx1QkFBQWxHLEdBRUEyQyxFQUFBdUQsdUJBQUFELEtBQ0E1QyxFQUFBYixFQUFBYSxJQUdBckQsSUFFQXFELEdBQUEsdURBQXVEdkQsS0FBQUcsU0FBQUMsbUJBQUFDLEtBQUFDLFVBQUFKLE1BQUEsT0FHdkQsSUFBQW1HLEVBQUEsSUFBQU4sTUFBQXhDLElBQTZCcUIsS0FBQSxhQUU3QjBCLEVBQUFOLEVBQUFPLEtBRUFQLEVBQUFPLEtBQUFYLElBQUFDLGdCQUFBUSxHQUVBQyxHQUFBVixJQUFBRSxnQkFBQVEsSUE1R0FwSSxLQUFBLEtBQUF3RixFQUFBYixHQUNBMEMsRUFBQSxXQUNBcEIsRUFBQVQsR0FFQUEsRUFBQTZDLE1BQUFYLElBQUFFLGdCQUFBcEMsRUFBQTZDLFNBR0E3QyxFQUFBZSxFQUFBNUIsR0FDQXlDLEVBc0RBLFNBQUE1QixFQUFBMkIsR0FDQSxJQUFBOUIsRUFBQThCLEVBQUE5QixJQUNBQyxFQUFBNkIsRUFBQTdCLE1BRUFBLEdBQ0FFLEVBQUEwQixhQUFBLFFBQUE1QixHQUdBLEdBQUFFLEVBQUE4QyxXQUNBOUMsRUFBQThDLFdBQUFDLFFBQUFsRCxNQUNFLENBQ0YsS0FBQUcsRUFBQU8sWUFDQVAsRUFBQVcsWUFBQVgsRUFBQU8sWUFHQVAsRUFBQU0sWUFBQXBDLFNBQUE4RSxlQUFBbkQsTUFyRUFyRixLQUFBLEtBQUF3RixHQUNBNkIsRUFBQSxXQUNBcEIsRUFBQVQsS0FNQSxPQUZBNEIsRUFBQUQsR0FFQSxTQUFBc0IsR0FDQSxHQUFBQSxFQUFBLENBQ0EsR0FDQUEsRUFBQXBELE1BQUE4QixFQUFBOUIsS0FDQW9ELEVBQUFuRCxRQUFBNkIsRUFBQTdCLE9BQ0FtRCxFQUFBekcsWUFBQW1GLEVBQUFuRixVQUVBLE9BR0FvRixFQUFBRCxFQUFBc0IsUUFFQXBCLEtBeFBBOUksRUFBQUQsUUFBQSxTQUFBaUQsRUFBQW9ELEdBQ0EsdUJBQUErRCxjQUNBLGlCQUFBaEYsU0FBQSxVQUFBMUMsTUFBQSxpRUFHQTJELFNBRUE4QixNQUFBLGlCQUFBOUIsRUFBQThCLE1BQUE5QixFQUFBOEIsU0FJQTlCLEVBQUFOLFdBQUEsa0JBQUFNLEVBQUFOLFlBQUFNLEVBQUFOLFVBQUFsQixLQUdBd0IsRUFBQWMsYUFBQWQsRUFBQWMsV0FBQSxRQUdBZCxFQUFBZ0IsV0FBQWhCLEVBQUFnQixTQUFBLFVBRUEsSUFBQWpCLEVBQUFPLEVBQUExRCxFQUFBb0QsR0FJQSxPQUZBRixFQUFBQyxFQUFBQyxHQUVBLFNBQUFnRSxHQUdBLElBRkEsSUFBQUMsS0FFQXBLLEVBQUEsRUFBaUJBLEVBQUFrRyxFQUFBM0IsT0FBbUJ2RSxJQUFBLENBQ3BDLElBQUFtRCxFQUFBK0MsRUFBQWxHLElBQ0FvRyxFQUFBMUIsRUFBQXZCLEVBQUFxQixLQUVBNkIsT0FDQStELEVBQUEzRixLQUFBMkIsR0FHQStELEdBRUFsRSxFQURBUSxFQUFBMEQsRUFBQWhFLEdBQ0FBLEdBR0EsSUFBQW5HLEVBQUEsRUFBaUJBLEVBQUFvSyxFQUFBN0YsT0FBc0J2RSxJQUFBLENBQ3ZDLElBQUFvRyxFQUVBLFFBRkFBLEVBQUFnRSxFQUFBcEssSUFFQXFHLEtBQUEsQ0FDQSxRQUFBQyxFQUFBLEVBQW1CQSxFQUFBRixFQUFBRyxNQUFBaEMsT0FBMkIrQixJQUFBRixFQUFBRyxNQUFBRCxZQUU5QzVCLEVBQUEwQixFQUFBNUIsUUFnTkEsSUFBQTZGLEVBQUEsV0FDQSxJQUFBQyxLQUVBLGdCQUFBQyxFQUFBQyxHQUdBLE9BRkFGLEVBQUFDLEdBQUFDLEVBRUFGLEVBQUFHLE9BQUFDLFNBQUF2RyxLQUFBLE9BTkEsR0FVQSxTQUFBOEUsRUFBQWpDLEVBQUF1RCxFQUFBMUIsRUFBQUYsR0FDQSxJQUFBOUIsRUFBQWdDLEVBQUEsR0FBQUYsRUFBQTlCLElBRUEsR0FBQUcsRUFBQThDLFdBQ0E5QyxFQUFBOEMsV0FBQUMsUUFBQU0sRUFBQUUsRUFBQTFELE9BQ0UsQ0FDRixJQUFBOEQsRUFBQXpGLFNBQUE4RSxlQUFBbkQsR0FDQStELEVBQUE1RCxFQUFBNEQsV0FFQUEsRUFBQUwsSUFBQXZELEVBQUFXLFlBQUFpRCxFQUFBTCxJQUVBSyxFQUFBckcsT0FDQXlDLEVBQUFLLGFBQUFzRCxFQUFBQyxFQUFBTCxJQUVBdkQsRUFBQU0sWUFBQXFELHFFQ3ZWQUUsRUFBQUMsRUFBQTVJLEVBQUE2SSxPQUNBQyxhQUFBRixFQUFBNUksRUFBQStJLEtBQUFDLFdBQ0FDLGVBQUFMLEVBQUE1SSxFQUFBK0ksS0FBQUMsV0FDQUUsaUJBQUFOLEVBQUE1SSxFQUFBK0ksS0FBQUMsV0FDQUcsYUFBQVAsRUFBQTVJLEVBQUErSSxLQUFBQyxhQUdBSSxFQUFBUixFQUFBNUksRUFBQTZJLE9BQ0FRLFVBQUFULEVBQUE1SSxFQUFBK0ksS0FBQUMsV0FDQU0sU0FBQVYsRUFBQTVJLEVBQUErSSxLQUFBQyxXQUNBTyxTQUFBWCxFQUFBNUksRUFBQStJLEtBQUFDLGFDU0EsU0FBQVEsSUFDQSxJQUFBQyxFQUVBQyxFQUFBN0csVUFBQVIsT0FBQSxRQUFBaEMsSUFBQXdDLFVBQUEsR0FBQUEsVUFBQSxXQUdBOEcsRUFGQTlHLFVBQUEsSUFFQTZHLEVBQUEsZUFFQUUsRUFBQSxTQUFBQyxHQVNBLFNBQUFELEVBQUFFLEVBQUFDLElBdENBLFNBQUFDLEVBQUFDLEdBQWlELEtBQUFELGFBQUFDLEdBQTBDLFVBQUFDLFVBQUEscUNBdUMzRkMsQ0FBQXBKLEtBQUE2SSxHQUVBLElBQUFRLEVBdkNBLFNBQUFDLEVBQUFwTSxHQUFpRCxJQUFBb00sRUFBYSxVQUFBQyxlQUFBLDZEQUF5RixPQUFBck0sR0FBQSxpQkFBQUEsR0FBQSxtQkFBQUEsRUFBQW9NLEVBQUFwTSxFQXVDdkpzTSxDQUFBeEosS0FBQThJLEVBQUE1TCxLQUFBOEMsS0FBQStJLEVBQUFDLElBR0EsT0FEQUssRUFBQVYsR0FBQUksRUFBQVUsTUFDQUosRUFPQSxPQS9DQSxTQUFBSyxFQUFBQyxHQUEwQyxzQkFBQUEsR0FBQSxPQUFBQSxFQUErRCxVQUFBUixVQUFBLGtFQUFBUSxHQUF1R0QsRUFBQS9LLFVBQUFsQixPQUFBWSxPQUFBc0wsS0FBQWhMLFdBQXlFaUwsYUFBZTVMLE1BQUEwTCxFQUFBL0wsWUFBQSxFQUFBa00sVUFBQSxFQUFBQyxjQUFBLEtBQTZFSCxJQUFBbE0sT0FBQXNNLGVBQUF0TSxPQUFBc00sZUFBQUwsRUFBQUMsR0FBQUQsRUFBQU0sVUFBQUwsR0EwQnJYTSxDQUFBcEIsRUFBQUMsR0FFQUQsRUFBQWxLLFVBQUF1TCxnQkFBQSxXQUNBLElBQUFDLEVBRUEsT0FBQUEsTUFBc0J4QixHQUFBM0ksS0FBQTJJLEdBQUF3QixFQUFBdkIsR0FBQSxLQUFBdUIsR0FZdEJ0QixFQUFBbEssVUFBQXlMLE9BQUEsV0FDQSxPQUFBQyxFQUFBLFNBQUFDLEtBQUF0SyxLQUFBK0ksTUFBQXdCLFdBR0ExQixFQXRCQSxDQXVCR3dCLEVBQUEsV0FnQkgsT0FOQXhCLEVBQUEyQixXQUNBZixNQUFBcEIsRUFBQUosV0FDQXNDLFNBQUExQyxFQUFBNUksRUFBQXdMLFFBQUF4QyxZQUVBWSxFQUFBNkIsb0JBQUFoQyxNQUEwREMsR0FBQU4sRUFBQUosV0FBQVMsRUFBQUUsR0FBQWhCLEVBQUFjLEdBRTFERyxFQUdBLElBQUE4QixFQUFBbEMscUNDakVBLElBQUFtQyxFQUFBLEtBQ0FDLEdBQ0FDLE9BQUEsY0F1Q0EsSUFBQUMsRUFBQSxXQUNBLFNBQUFBLEVBQUF0QixFQUFBdUIsRUFBQUMsSUFoREEsU0FBQWhDLEVBQUFDLEdBQWlELEtBQUFELGFBQUFDLEdBQTBDLFVBQUFDLFVBQUEscUNBaUQzRitCLENBQUFsTCxLQUFBK0ssR0FFQS9LLEtBQUF5SixRQUNBekosS0FBQWdMLFlBQ0FoTCxLQUFBaUwsZ0JBQ0FqTCxLQUFBbUwsWUFBQSxLQUNBbkwsS0FBQW9MLFVBQUFQLEVBaUNBLE9BOUJBRSxFQUFBcE0sVUFBQTBNLGFBQUEsU0FBQUMsR0FFQSxPQURBdEwsS0FBQStILGVBQ0EvSCxLQUFBb0wsVUFBQTlDLFVBQUFnRCxJQUdBUCxFQUFBcE0sVUFBQXdKLGlCQUFBLFdBQ0FuSSxLQUFBb0wsVUFBQU4sVUFHQUMsRUFBQXBNLFVBQUF5SixhQUFBLFdBQ0EsT0FBQVgsUUFBQXpILEtBQUFtTCxjQUdBSixFQUFBcE0sVUFBQW9KLGFBQUEsV0FDQS9ILEtBQUFtTCxjQUNBbkwsS0FBQW1MLFlBQUFuTCxLQUFBZ0wsVUFBQWhMLEtBQUFnTCxVQUFBSyxhQUFBckwsS0FBQWlMLGVBQUFqTCxLQUFBeUosTUFBQW5CLFVBQUF0SSxLQUFBaUwsZUFFQWpMLEtBQUFvTCxVQWhFQSxXQUdBLElBQUFHLEtBQ0FDLEtBRUEsT0FDQUMsTUFBQSxXQUNBRCxFQUFBWixFQUNBVyxFQUFBWCxHQUVBRSxPQUFBLFdBRUEsSUFEQSxJQUFBTSxFQUFBRyxFQUFBQyxFQUNBek8sRUFBQSxFQUFxQkEsRUFBQXFPLEVBQUE5SixPQUFzQnZFLElBQzNDcU8sRUFBQXJPLE1BR0FhLElBQUEsV0FDQSxPQUFBNE4sR0FFQWxELFVBQUEsU0FBQWdELEdBQ0EsSUFBQWxELEdBQUEsRUFJQSxPQUhBb0QsSUFBQUQsSUFBQUMsRUFBQUQsRUFBQUcsU0FDQUYsRUFBQWhLLEtBQUE4SixHQUVBLFdBQ0FsRCxHQUFBbUQsSUFBQVgsSUFDQXhDLEdBQUEsRUFFQW9ELElBQUFELElBQUFDLEVBQUFELEVBQUFHLFNBQ0FGLEVBQUEzRyxPQUFBMkcsRUFBQTVHLFFBQUEwRyxHQUFBLE9Ba0NBSyxLQUlBWixFQUFBcE0sVUFBQXVKLGVBQUEsV0FDQWxJLEtBQUFtTCxjQUNBbkwsS0FBQW1MLGNBQ0FuTCxLQUFBbUwsWUFBQSxLQUNBbkwsS0FBQW9MLFVBQUFLLFFBQ0F6TCxLQUFBb0wsVUFBQVAsSUFJQUUsRUF6Q0EsR0MvQ0FhLEVBQUFuTyxPQUFBb08sUUFBQSxTQUFBeEosR0FBbUQsUUFBQXRGLEVBQUEsRUFBZ0JBLEVBQUErRSxVQUFBUixPQUFzQnZFLElBQUEsQ0FBTyxJQUFBZ0UsRUFBQWUsVUFBQS9FLEdBQTJCLFFBQUF1QixLQUFBeUMsRUFBMEJ0RCxPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUE2RCxFQUFBekMsS0FBeUQrRCxFQUFBL0QsR0FBQXlDLEVBQUF6QyxJQUFpQyxPQUFBK0QsR0FpQi9PLElBQUF5SixFQUFBLEVBQ0FDLEtBQ0EsU0FBQUMsS0FzQkEsU0FBQUMsRUFlQUMsR0FDQSxJQUFBQyxFQUFBQyxFQUVBakMsRUFBQXJJLFVBQUFSLE9BQUEsUUFBQWhDLElBQUF3QyxVQUFBLEdBQUFBLFVBQUEsTUFDQXVLLEVBQUFsQyxFQUFBbUMsZUFDQUEsT0FBQWhOLElBQUErTSxFQUFBLFNBQUEvTyxHQUNBLHlCQUFBQSxFQUFBLEtBQ0crTyxFQUNIRSxFQUFBcEMsRUFBQXFDLFdBQ0FBLE9BQUFsTixJQUFBaU4sRUFBQSxrQkFBQUEsRUFDQUUsRUFBQXRDLEVBQUF1QyxnQkFDQUEsT0FBQXBOLElBQUFtTixPQUFBbk4sRUFBQW1OLEVBQ0FFLEVBQUF4QyxFQUFBeUMseUJBQ0FBLE9BQUF0TixJQUFBcU4sS0FDQUUsRUFBQTFDLEVBQUF4QixTQUNBQSxPQUFBckosSUFBQXVOLEVBQUEsUUFBQUEsRUFDQUMsRUFBQTNDLEVBQUE0QyxRQUNBQSxPQUFBek4sSUFBQXdOLEtBQ0FFLEVBbEVBLFNBQUF0SCxFQUFBSCxHQUE4QyxJQUFBbEQsS0FBaUIsUUFBQXRGLEtBQUEySSxFQUFxQkgsRUFBQVgsUUFBQTdILElBQUEsR0FBb0NVLE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQXdJLEVBQUEzSSxLQUE2RHNGLEVBQUF0RixHQUFBMkksRUFBQTNJLElBQXNCLE9BQUFzRixFQWtFM000SyxDQUFBOUMsR0FBQSxrR0FFQXZCLEVBQUFELEVBQUEsZUFDQXVFLEVBQUFwQixJQUVBcUIsSUFBQWhCLE1BQXdDeEQsR0FBQU4sRUFBQThELEVBQUF2RCxHQUFBaEIsRUFBQXVFLEdBQ3hDekIsSUFBQTBCLE1BQWtEeEQsR0FBQWhCLEVBQUF3RSxHQUVsRCxnQkFBQWdCLEdBQ0FDLElBQUEsbUJBQUFELEVBQUEseURBQUFaLEVBQUEsc0JBQUE5TCxLQUFBQyxVQUFBeU0sSUFFQSxJQUFBRSxFQUFBRixFQUFBRyxhQUFBSCxFQUFBOVAsTUFBQSxZQUVBaVEsRUFBQWpCLEVBQUFnQixHQUVBRSxFQUFBNUIsS0FBNENvQixHQUM1Q1YsaUJBQ0FFLGFBQ0FFLGtCQUNBRSwyQkFDQWpFLFdBQ0FvRSxVQUNBUSxjQUNBRCx1QkFDQUYscUJBR0FLLEVBQUEsU0FBQTNFLEdBR0EsU0FBQTJFLEVBQUExRSxFQUFBQyxJQXRHQSxTQUFBQyxFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQXVHM0Z1RSxDQUFBMU4sS0FBQXlOLEdBRUEsSUFBQXBFLEVBdkdBLFNBQUFDLEVBQUFwTSxHQUFpRCxJQUFBb00sRUFBYSxVQUFBQyxlQUFBLDZEQUF5RixPQUFBck0sR0FBQSxpQkFBQUEsR0FBQSxtQkFBQUEsRUFBQW9NLEVBQUFwTSxFQXVHdkp5USxDQUFBM04sS0FBQThJLEVBQUE1TCxLQUFBOEMsS0FBQStJLEVBQUFDLElBYUEsT0FYQUssRUFBQTZELFVBQ0E3RCxFQUFBdUUsU0FDQXZFLEVBQUF3RSxZQUFBLEVBQ0F4RSxFQUFBSSxNQUFBVixFQUFBSixJQUFBSyxFQUFBTCxHQUNBVSxFQUFBeUUsVUFBQXJHLFFBQUFzQixFQUFBSixJQUNBVSxFQUFBMEUsbUJBQUExRSxFQUFBMEUsbUJBQUF4UCxLQUFBOEssR0FFQWdFLElBQUFoRSxFQUFBSSxNQUFBLG1CQUFBZCxFQUFBLHdDQUFBNEUsRUFBQSwwRUFBQTVFLEVBQUEsbUJBQUE0RSxFQUFBLE1BRUFsRSxFQUFBMkUsZUFDQTNFLEVBQUE0RSxtQkFDQTVFLEVBOEhBLE9BaFBBLFNBQUFLLEVBQUFDLEdBQTBDLHNCQUFBQSxHQUFBLE9BQUFBLEVBQStELFVBQUFSLFVBQUEsa0VBQUFRLEdBQXVHRCxFQUFBL0ssVUFBQWxCLE9BQUFZLE9BQUFzTCxLQUFBaEwsV0FBeUVpTCxhQUFlNUwsTUFBQTBMLEVBQUEvTCxZQUFBLEVBQUFrTSxVQUFBLEVBQUFDLGNBQUEsS0FBNkVILElBQUFsTSxPQUFBc00sZUFBQXRNLE9BQUFzTSxlQUFBTCxFQUFBQyxHQUFBRCxFQUFBTSxVQUFBTCxHQWdHclh1RSxDQUFBVCxFQUFBM0UsR0FxQkEyRSxFQUFBOU8sVUFBQXVMLGdCQUFBLFdBQ0EsSUFBQWlFLEVBTUFDLEVBQUFwTyxLQUFBOE4sVUFBQSxLQUFBOU4sS0FBQW9PLGFBQ0EsT0FBQUQsTUFBeUJ2RixHQUFBd0YsR0FBQXBPLEtBQUFnSixRQUFBSixHQUFBdUYsR0FHekJWLEVBQUE5TyxVQUFBMFAsa0JBQUEsV0FDQXpCLElBUUE1TSxLQUFBb08sYUFBQXJHLGVBQ0EvSCxLQUFBc08sU0FBQUMsSUFBQXZPLEtBQUErSSxPQUNBL0ksS0FBQXNPLFNBQUFFLHVCQUFBeE8sS0FBQXlPLGdCQUdBaEIsRUFBQTlPLFVBQUErUCwwQkFBQSxTQUFBQyxHQUNBM08sS0FBQXNPLFNBQUFDLElBQUFJLElBR0FsQixFQUFBOU8sVUFBQTZQLHNCQUFBLFdBQ0EsT0FBQXhPLEtBQUFzTyxTQUFBRSx1QkFHQWYsRUFBQTlPLFVBQUFpUSxxQkFBQSxXQUNBNU8sS0FBQW9PLGNBQUFwTyxLQUFBb08sYUFBQWxHLGlCQUNBbEksS0FBQW9PLGFBQUEsS0FDQXBPLEtBQUFtSSxpQkFBQTZELEVBQ0FoTSxLQUFBeUosTUFBQSxLQUNBekosS0FBQXNPLFNBQUFDLElBQUF2QyxFQUNBaE0sS0FBQXNPLFNBQUFFLHVCQUFBLEdBR0FmLEVBQUE5TyxVQUFBa1EsbUJBQUEsV0FFQSxPQURBeEIsSUFBQU4sRUFBQSx3R0FBdUdQLEVBQUEsWUFDdkd4TSxLQUFBOE8saUJBR0FyQixFQUFBOU8sVUFBQW9QLG1CQUFBLFNBQUFnQixHQUNBL08sS0FBQThPLGdCQUFBQyxHQUdBdEIsRUFBQTlPLFVBQUFxUCxhQUFBLFdBQ0EsSUFBQWdCLEVBQUE5QyxFQUFBbE0sS0FBQXlKLE1BQUFsQixTQUFBaUYsR0FDQXhOLEtBQUFzTyxTQTVKQSxTQUFBVSxFQUFBdkYsR0FFQSxJQUFBNkUsR0FDQUMsSUFBQSxTQUFBeEYsR0FDQSxJQUNBLElBQUE0RixFQUFBSyxFQUFBdkYsRUFBQWpCLFdBQUFPLElBQ0E0RixJQUFBTCxFQUFBdkYsT0FBQXVGLEVBQUFqUCxTQUNBaVAsRUFBQUUsdUJBQUEsRUFDQUYsRUFBQXZGLE1BQUE0RixFQUNBTCxFQUFBalAsTUFBQSxNQUVPLE1BQUFBLEdBQ1BpUCxFQUFBRSx1QkFBQSxFQUNBRixFQUFBalAsV0FLQSxPQUFBaVAsRUEwSUFXLENBQUFELEVBQUFoUCxLQUFBeUosT0FDQXpKLEtBQUFzTyxTQUFBQyxJQUFBdk8sS0FBQStJLFFBR0EwRSxFQUFBOU8sVUFBQXNQLGlCQUFBLFdBQ0EsR0FBQXJCLEVBQUEsQ0FJQSxJQUFBNUIsR0FBQWhMLEtBQUE4TixVQUFBOU4sS0FBQStJLE1BQUEvSSxLQUFBZ0osU0FBQUosR0FDQTVJLEtBQUFvTyxhQUFBLElBQUFyRCxFQUFBL0ssS0FBQXlKLE1BQUF1QixFQUFBaEwsS0FBQWlMLGNBQUExTSxLQUFBeUIsT0FRQUEsS0FBQW1JLGlCQUFBbkksS0FBQW9PLGFBQUFqRyxpQkFBQTVKLEtBQUF5QixLQUFBb08sZ0JBR0FYLEVBQUE5TyxVQUFBc00sY0FBQSxXQUNBakwsS0FBQXNPLFNBQUFDLElBQUF2TyxLQUFBK0ksT0FFQS9JLEtBQUFzTyxTQUFBRSx1QkFHQXhPLEtBQUFrUCxtQkFBQWxQLEtBQUFtUCxxQ0FDQW5QLEtBQUFvUCxTQUFBckQsSUFIQS9MLEtBQUFtSSxvQkFPQXNGLEVBQUE5TyxVQUFBd1EscUNBQUEsV0FNQW5QLEtBQUFrUCx3QkFBQTVQLEVBQ0FVLEtBQUFtSSxvQkFHQXNGLEVBQUE5TyxVQUFBeUosYUFBQSxXQUNBLE9BQUFYLFFBQUF6SCxLQUFBb08sZUFBQXBPLEtBQUFvTyxhQUFBaEcsZ0JBR0FxRixFQUFBOU8sVUFBQTBRLGNBQUEsU0FBQXRHLEdBQ0EsS0FBQWdFLEdBQUFMLEdBQUExTSxLQUFBOE4sV0FBQTlOLEtBQUFvTyxjQUFBLE9BQUFyRixFQUtBLElBQUF1RyxFQUFBMUQsS0FBb0M3QyxHQUlwQyxPQUhBZ0UsSUFBQXVDLEVBQUFQLElBQUEvTyxLQUFBK04sb0JBQ0FyQixJQUFBNEMsRUFBQTVDLEdBQUExTSxLQUFBNk4sZUFDQTdOLEtBQUE4TixXQUFBOU4sS0FBQW9PLGVBQUFrQixFQUFBMUcsR0FBQTVJLEtBQUFvTyxjQUNBa0IsR0FHQTdCLEVBQUE5TyxVQUFBeUwsT0FBQSxXQUNBLElBQUFrRSxFQUFBdE8sS0FBQXNPLFNBR0EsR0FGQUEsRUFBQUUsdUJBQUEsRUFFQUYsRUFBQWpQLE1BQ0EsTUFBQWlQLEVBQUFqUCxNQUVBLE9BQUE1QixPQUFBNE0sRUFBQSxjQUFBNU0sQ0FBQTJQLEVBQUFwTixLQUFBcVAsY0FBQWYsRUFBQXZGLFNBSUEwRSxFQWpKQSxDQWtKS3BELEVBQUEsV0F1Q0wsT0FyQ0FvRCxFQUFBTCxtQkFDQUssRUFBQUYsY0FDQUUsRUFBQS9DLG9CQUNBK0MsRUFBQU4sZUFDQU0sRUFBQWpELFVBQUEyQyxFQWlDQW9DLElBQUE5QixFQUFBTCxJQzlSQSxJQUFBb0MsRUFBQS9SLE9BQUFrQixVQUFBQyxlQUVBLFNBQUE2USxFQUFBQyxFQUFBQyxHQUNBLE9BQUFELElBQUFDLEVBQ0EsSUFBQUQsR0FBQSxJQUFBQyxHQUFBLEVBQUFELEdBQUEsRUFBQUMsRUFFQUQsTUFBQUMsS0FJQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUNBLEdBQUFMLEVBQUFJLEVBQUFDLEdBQUEsU0FFQSxvQkFBQUQsR0FBQSxPQUFBQSxHQUFBLGlCQUFBQyxHQUFBLE9BQUFBLEVBQ0EsU0FHQSxJQUFBQyxFQUFBdFMsT0FBQThILEtBQUFzSyxHQUNBRyxFQUFBdlMsT0FBQThILEtBQUF1SyxHQUVBLEdBQUFDLEVBQUF6TyxTQUFBME8sRUFBQTFPLE9BQUEsU0FFQSxRQUFBdkUsRUFBQSxFQUFpQkEsRUFBQWdULEVBQUF6TyxPQUFrQnZFLElBQ25DLElBQUF5UyxFQUFBdFMsS0FBQTRTLEVBQUFDLEVBQUFoVCxNQUFBMFMsRUFBQUksRUFBQUUsRUFBQWhULElBQUErUyxFQUFBQyxFQUFBaFQsS0FDQSxTQUlBLDZCQ3pCQWtULEVBQUEsaUJBQUEzRyxpQkFBQTdMLGlCQUFBNkwsS0NFQTRHLEdEQ0FDLEVBQUEsR0FBQUYsR0FBQUcsU0FBQSxjQUFBQSxJQ0hBdFMsT0NBQXVTLEVBQUE1UyxPQUFBa0IsVUFHQTBSLEVBQUF6UixlQU9BeVIsRUFBQXRRLFNBR0FtUSxLQUFBblMsWUNmQU4sT0FBQWtCLFVBT0FvQixTQ0NBbVEsS0FBQW5TLFlDTkFOLE9BQUE2UyxlQUFBN1MsT0N5QkEsSUNwQkE4UyxFQUFBSCxTQUFBelIsVUFDQTZSLEVBQUEvUyxPQUFBa0IsVUFHQThSLEVBQUFGLEVBQUF4USxTQUdBeVEsRUFBQTVSLGVBR0E2UixFQUFBdlQsS0FBQU8sUUNoQkEsU0FBQWlULEVBQUFDLEdBQ0EsZ0JBQUFwSSxFQUFBckYsR0FDQSxJQUFBME4sRUFBQUQsRUFBQXBJLEVBQUFyRixHQUVBLFNBQUEyTixJQUNBLE9BQUFELEVBR0EsT0FEQUMsRUFBQUMsbUJBQUEsRUFDQUQsR0FXQSxTQUFBRSxFQUFBQyxHQUNBLGNBQUFBLEVBQUFGLHdCQUFBeFIsSUFBQTBSLEVBQUFGLGtCQUFBckosUUFBQXVKLEVBQUFGLG1CQUFBLElBQUFFLEVBQUExUCxPQWVBLFNBQUEyUCxFQUFBRCxFQUFBeEUsR0FDQSxnQkFBQWpFLEVBQUE0QixHQUNBQSxFQUFBb0QsWUFBQSxJQUVBMkQsRUFBQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFGLEVBQUFKLGtCQUFBSSxFQUFBRixXQUFBRyxFQUFBQyxHQUFBRixFQUFBRixXQUFBRyxJQXNCQSxPQWxCQUQsRUFBQUosbUJBQUEsRUFFQUksRUFBQUYsV0FBQSxTQUFBRyxFQUFBQyxHQUNBRixFQUFBRixhQUNBRSxFQUFBSixrQkFBQUMsRUFBQUMsR0FDQSxJQUFBakksRUFBQW1JLEVBQUFDLEVBQUFDLEdBVUEsTUFSQSxtQkFBQXJJLElBQ0FtSSxFQUFBRixXQUFBakksRUFDQW1JLEVBQUFKLGtCQUFBQyxFQUFBaEksR0FDQUEsRUFBQW1JLEVBQUFDLEVBQUFDLElBS0FySSxHQUdBbUksR0M3Q0EsSUFBQUcsR0FoQkEsU0FBQUMsR0FDQSx5QkFBQUEsRUFBQUwsRUFBQUssUUFBQWhTLEdBR0EsU0FBQWdTLEdBQ0EsT0FBQUEsT0FFR2hTLEVBRkhvUixFQUFBLFNBQUFuSSxHQUNBLE9BQVlBLGVBSVosU0FBQStJLEdBQ0EsT0FBQUEsR0FBQSxpQkFBQUEsRUFBQVosRUFBQSxTQUFBbkksR0FDQSxPQUFBOUssT0FBQThULEVBQUEsbUJBQUE5VCxDQUFBNlQsRUFBQS9JLFVBQ0dqSixJQ0pILElBQUFrUyxHQVZBLFNBQUFDLEdBQ0EseUJBQUFBLEVBQUFSLEVBQUFRLFFBQUFuUyxHQUdBLFNBQUFtUyxHQUNBLE9BQUFBLE9BRUduUyxFQUZIb1IsRUFBQSxXQUNBLGFDUkFnQixFQUFBalUsT0FBQW9PLFFBQUEsU0FBQXhKLEdBQW1ELFFBQUF0RixFQUFBLEVBQWdCQSxFQUFBK0UsVUFBQVIsT0FBc0J2RSxJQUFBLENBQU8sSUFBQWdFLEVBQUFlLFVBQUEvRSxHQUEyQixRQUFBdUIsS0FBQXlDLEVBQTBCdEQsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBNkQsRUFBQXpDLEtBQXlEK0QsRUFBQS9ELEdBQUF5QyxFQUFBekMsSUFBaUMsT0FBQStELEdBSS9PLFNBQUFzUCxFQUFBQyxFQUFBQyxFQUFBVCxHQUNBLE9BQUFNLEtBQW9CTixFQUFBUSxFQUFBQyxHQXVDcEIsSUFBQUMsR0FWQSxTQUFBQyxHQUNBLHlCQUFBQSxFQTNCQSxTQUFBQSxHQUNBLGdCQUFBeEosRUFBQTRCLEdBQ0FBLEVBQUFvRCxZQUFBLElBQ0F5RSxFQUFBN0gsRUFBQTZILEtBQ0FDLEVBQUE5SCxFQUFBOEgsb0JBRUFDLEdBQUEsRUFDQUMsT0FBQSxFQUVBLGdCQUFBUCxFQUFBQyxFQUFBVCxHQUNBLElBQUFnQixFQUFBTCxFQUFBSCxFQUFBQyxFQUFBVCxHQVdBLE9BVEFjLEVBQ0FGLEdBQUFDLEVBQUFHLEVBQUFELE9BQUFDLElBRUFGLEdBQUEsRUFDQUMsRUFBQUMsR0FLQUQsSUFNQUUsQ0FBQU4sUUFBQXpTLEdBR0EsU0FBQXlTLEdBQ0EsT0FBQUEsT0FFR3pTLEVBRkgsV0FDQSxPQUFBcVMsS0NwQ0EsU0FBQVcsRUFBQWIsRUFBQUgsRUFBQVMsRUFBQXhKLEdBQ0EsZ0JBQUFxRixFQUFBd0QsR0FDQSxPQUFBVyxFQUFBTixFQUFBN0QsRUFBQXdELEdBQUFFLEVBQUEvSSxFQUFBNkksT0FJQSxTQUFBbUIsRUFBQWQsRUFBQUgsRUFBQVMsRUFBQXhKLEVBQUE0QixHQUNBLElBQUFxSSxFQUFBckksRUFBQXFJLGVBQ0FDLEVBQUF0SSxFQUFBc0ksaUJBQ0FDLEVBQUF2SSxFQUFBdUksbUJBRUFDLEdBQUEsRUFDQS9FLE9BQUEsRUFDQXdELE9BQUEsRUFDQVEsT0FBQSxFQUNBQyxPQUFBLEVBQ0FNLE9BQUEsRUF3Q0EsU0FBQVMsRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxHQUFBTixFQUFBSyxFQUFBMUIsR0FDQTRCLEdBQUFSLEVBQUFLLEVBQUFqRixHQUlBLE9BSEFBLEVBQUFpRixFQUNBekIsRUFBQTBCLEVBRUFDLEdBQUFDLEdBakNBcEIsRUFBQUgsRUFBQTdELEVBQUF3RCxHQUVBRSxFQUFBUixvQkFBQWUsRUFBQVAsRUFBQS9JLEVBQUE2SSxJQUVBZSxFQUFBSixFQUFBSCxFQUFBQyxFQUFBVCxJQThCQTJCLEdBekJBdEIsRUFBQVgsb0JBQUFjLEVBQUFILEVBQUE3RCxFQUFBd0QsSUFFQUUsRUFBQVIsb0JBQUFlLEVBQUFQLEVBQUEvSSxFQUFBNkksSUFFQWUsRUFBQUosRUFBQUgsRUFBQUMsRUFBQVQsSUFzQkE0QixFQWxCQSxXQUNBLElBQUFDLEVBQUF4QixFQUFBN0QsRUFBQXdELEdBQ0E4QixHQUFBUixFQUFBTyxFQUFBckIsR0FLQSxPQUpBQSxFQUFBcUIsRUFFQUMsSUFBQWYsRUFBQUosRUFBQUgsRUFBQUMsRUFBQVQsSUFFQWUsRUFXQWdCLEdBQ0FoQixFQUdBLGdCQUFBVSxFQUFBQyxHQUNBLE9BQUFILEVBQUFDLEVBQUFDLEVBQUFDLEdBbkRBLFNBQUFNLEVBQUFDLEdBT0EsT0FKQXpCLEVBQUFILEVBRkE3RCxFQUFBd0YsRUFDQWhDLEVBQUFpQyxHQUVBeEIsRUFBQVAsRUFBQS9JLEVBQUE2SSxHQUNBZSxFQUFBSixFQUFBSCxFQUFBQyxFQUFBVCxHQUNBdUIsR0FBQSxFQUNBUixFQTRDQW1CLENBQUFULEVBQUFDLElBV0EsU0FBQVMsRUFBQWhMLEVBQUE0RixHQUNBLElBQUFxRixFQUFBckYsRUFBQXFGLG9CQUNBQyxFQUFBdEYsRUFBQXNGLHVCQUNBQyxFQUFBdkYsRUFBQXVGLGVBQ0F4USxFQXhGQSxTQUFBd0MsRUFBQUgsR0FBOEMsSUFBQWxELEtBQWlCLFFBQUF0RixLQUFBMkksRUFBcUJILEVBQUFYLFFBQUE3SCxJQUFBLEdBQW9DVSxPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUF3SSxFQUFBM0ksS0FBNkRzRixFQUFBdEYsR0FBQTJJLEVBQUEzSSxJQUFzQixPQUFBc0YsRUF3RjNNc1IsQ0FBQXhGLEdBQUEsa0VBRUFzRCxFQUFBK0IsRUFBQWpMLEVBQUFyRixHQUNBb08sRUFBQW1DLEVBQUFsTCxFQUFBckYsR0FDQTZPLEVBQUEyQixFQUFBbkwsRUFBQXJGLEdBUUEsT0FGQUEsRUFBQThPLEtBQUFPLEVBQUFELEdBRUFiLEVBQUFILEVBQUFTLEVBQUF4SixFQUFBckYsR0NwR0EsSUFBQTBRLEVBQUFuVyxPQUFBb08sUUFBQSxTQUFBeEosR0FBbUQsUUFBQXRGLEVBQUEsRUFBZ0JBLEVBQUErRSxVQUFBUixPQUFzQnZFLElBQUEsQ0FBTyxJQUFBZ0UsRUFBQWUsVUFBQS9FLEdBQTJCLFFBQUF1QixLQUFBeUMsRUFBMEJ0RCxPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUE2RCxFQUFBekMsS0FBeUQrRCxFQUFBL0QsR0FBQXlDLEVBQUF6QyxJQUFpQyxPQUFBK0QsR0E0Qi9PLFNBQUF3UixFQUFBQyxFQUFBQyxFQUFBelcsR0FDQSxRQUFBUCxFQUFBZ1gsRUFBQXpTLE9BQUEsRUFBb0N2RSxHQUFBLEVBQVFBLElBQUEsQ0FDNUMsSUFBQThJLEVBQUFrTyxFQUFBaFgsR0FBQStXLEdBQ0EsR0FBQWpPLEVBQUEsT0FBQUEsRUFHQSxnQkFBQTBDLEVBQUFyRixHQUNBLFVBQUEzRCxNQUFBLGdDQUFBdVUsRUFBQSxRQUFBeFcsRUFBQSx1Q0FBQTRGLEVBQUFvSyxxQkFBQSxNQUlBLFNBQUEwRyxFQUFBL1UsRUFBQUMsR0FDQSxPQUFBRCxJQUFBQyxFQThEQSxJQUFBK1UsRUF6REEsV0FDQSxJQUFBOUosRUFBQXJJLFVBQUFSLE9BQUEsUUFBQWhDLElBQUF3QyxVQUFBLEdBQUFBLFVBQUEsTUFDQW9TLEVBQUEvSixFQUFBZ0ssV0FDQUEsT0FBQTdVLElBQUE0VSxFQUFBakksRUFBQWlJLEVBQ0FFLEVBQUFqSyxFQUFBa0sseUJBQ0FBLE9BQUEvVSxJQUFBOFUsRUFBQTVDLEVBQUE0QyxFQUNBRSxFQUFBbkssRUFBQW9LLDRCQUNBQSxPQUFBalYsSUFBQWdWLEVBQUFqRCxFQUFBaUQsRUFDQUUsRUFBQXJLLEVBQUFzSyxvQkFDQUEsT0FBQW5WLElBQUFrVixFQUFBMUMsRUFBQTBDLEVBQ0FFLEVBQUF2SyxFQUFBK0IsZ0JBQ0FBLE9BQUE1TSxJQUFBb1YsRUFBQW5CLEVBQUFtQixFQUVBLGdCQUFBakQsRUFBQUgsRUFBQVMsR0FDQSxJQUFBNUQsRUFBQXJNLFVBQUFSLE9BQUEsUUFBQWhDLElBQUF3QyxVQUFBLEdBQUFBLFVBQUEsTUFDQTZTLEVBQUF4RyxFQUFBNkQsS0FDQUEsT0FBQTFTLElBQUFxVixLQUNBQyxFQUFBekcsRUFBQXFFLGVBQ0FBLE9BQUFsVCxJQUFBc1YsRUFBQVosRUFBQVksRUFDQUMsRUFBQTFHLEVBQUFzRSxpQkFDQUEsT0FBQW5ULElBQUF1VixFQUFBakYsRUFBQWlGLEVBQ0FDLEVBQUEzRyxFQUFBdUUsbUJBQ0FBLE9BQUFwVCxJQUFBd1YsRUFBQWxGLEVBQUFrRixFQUNBQyxFQUFBNUcsRUFBQThELG9CQUNBQSxPQUFBM1MsSUFBQXlWLEVBQUFuRixFQUFBbUYsRUFDQUMsRUFwRUEsU0FBQXRQLEVBQUFILEdBQThDLElBQUFsRCxLQUFpQixRQUFBdEYsS0FBQTJJLEVBQXFCSCxFQUFBWCxRQUFBN0gsSUFBQSxHQUFvQ1UsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBd0ksRUFBQTNJLEtBQTZEc0YsRUFBQXRGLEdBQUEySSxFQUFBM0ksSUFBc0IsT0FBQXNGLEVBb0UzTTRTLENBQUE5RyxHQUFBLHdGQUVBcUYsRUFBQUssRUFBQXBDLEVBQUE0QyxFQUFBLG1CQUNBWixFQUFBSSxFQUFBdkMsRUFBQWlELEVBQUEsc0JBQ0FiLEVBQUFHLEVBQUE5QixFQUFBMEMsRUFBQSxjQUVBLE9BQUFOLEVBQUFqSSxFQUFBMEgsR0FFQXBILFdBQUEsVUFHQUYsZUFBQSxTQUFBaFAsR0FDQSxpQkFBQUEsRUFBQSxLQUlBc1AseUJBQUFuRixRQUFBZ0ssR0FHQStCLHNCQUNBQyx5QkFDQUMsaUJBQ0ExQixPQUNBUSxpQkFDQUMsbUJBQ0FDLHFCQUNBVCx1QkFFSytDLEtBSUwsNFBDOUZnQjNWLE1BQVQsU0FBZXVPLEVBQVEsTUFBTTNJLEtBQUVBLEVBQUZpUSxRQUFRQSxJQUMxQyxPQUFPalEsR0FDTCxLQUFLa1EsRUFDSCxPQUFPRCxFQUNULEtBQUtFLEVBQ0wsS0FBS0MsRUFDSCxPQUFPLEtBQ1QsUUFDRSxPQUFPekgsTUFJRzBILFFBQVQsU0FBaUIxSCxHQUFRLEdBQU8zSSxLQUFFQSxJQUN2QyxPQUFPQSxHQUNMLEtBQUttUSxFQUNILE9BQU8sRUFDVCxLQUFLRyxFQUNILE9BQU8sRUFDVCxRQUNFLE9BQU8zSCxJQTNCTixNQUFNdUgsVUFBUSxRQUNSRSxnQkFBYyxjQUNkRCxlQUFhLGFBQ2JHLGFBQVcsV0FFWEMsV0FBVzVILElBQVNBLEVBQU12TyxPQUMxQm9XLGFBQWE3SCxJQUFTQSxFQUFNMEgsMEZDRXpCSSxXQUFULFNBQW9COUgsTUFBWTNJLEtBQUVBLEVBQUZpUSxRQUFRQSxJQUM3QyxPQUFPalEsR0FDTCxLQUFLMFEsRUFDSCxPQUFPVCxFQUVULEtBQUtVLEVBQ0gsVUFDS2hJLEVBQ0hzSCxHQUVKLEtBQUtXLEVBQ0gsT0FBT2pJLEVBQU0zTixJQUFJNlYsR0FBWUEsRUFBU3hYLE1BQVE0VyxFQUFRNVcsSUFBTTRXLEVBQVVZLEdBQ3hFLEtBQUtDLEVBQ0gsT0FBT25JLEVBQU1wRyxPQUFPc08sR0FBWUEsRUFBU3hYLE1BQVE0VyxHQUNuRCxRQUNFLE9BQU90SCxJQXZCTixNQUFNK0gsa0JBQWdCLGdCQUNoQkMsaUJBQWUsZUFDZkMsb0JBQWtCLGtCQUNsQkUsb0JBQWtCLGtCQUdsQkMsZ0JBQWdCcEksSUFBU0EsRUFBTThILDZCQ041QyxJQUFBTyxFQUFBdFosRUFBQSxJQUtBRyxFQUFBRCxRQUFBcVosRUFDQXBaLEVBQUFELFFBQUFzWixRQUNBclosRUFBQUQsUUFBQXVaLFFBc0dBLFNBQUFDLEVBQUFuVCxHQUNBLE9BQUFvVCxFQUFBSCxFQUFBRSxFQUFBblQsS0F0R0FwRyxFQUFBRCxRQUFBeVosbUJBQ0F4WixFQUFBRCxRQUFBMFosaUJBT0EsSUFBQUMsRUFBQSxJQUFBQyxRQUdBLFVBT0EsMEdBQ0F2VixLQUFBLFVBU0EsU0FBQWlWLEVBQUFFLEVBQUFuVCxHQVFBLElBUEEsSUFLQXdULEVBTEFDLEtBQ0FyWSxFQUFBLEVBQ0FnSixFQUFBLEVBQ0FzUCxFQUFBLEdBQ0FDLEVBQUEzVCxLQUFBNFQsV0FBQSxJQUdBLE9BQUFKLEVBQUFGLEVBQUFPLEtBQUFWLEtBQUEsQ0FDQSxJQUFBbFosRUFBQXVaLEVBQUEsR0FDQU0sRUFBQU4sRUFBQSxHQUNBTyxFQUFBUCxFQUFBcFAsTUFLQSxHQUpBc1AsR0FBQVAsRUFBQTNLLE1BQUFwRSxFQUFBMlAsR0FDQTNQLEVBQUEyUCxFQUFBOVosRUFBQW1FLE9BR0EwVixFQUNBSixHQUFBSSxFQUFBLE9BREEsQ0FLQSxJQUFBeEwsRUFBQTZLLEVBQUEvTyxHQUNBNFAsRUFBQVIsRUFBQSxHQUNBcFosRUFBQW9aLEVBQUEsR0FDQVMsRUFBQVQsRUFBQSxHQUNBVSxFQUFBVixFQUFBLEdBQ0FXLEVBQUFYLEVBQUEsR0FDQVksRUFBQVosRUFBQSxHQUdBRSxJQUNBRCxFQUFBblYsS0FBQW9WLEdBQ0FBLEVBQUEsSUFHQSxJQUFBVyxFQUFBLE1BQUFMLEdBQUEsTUFBQTFMLE9BQUEwTCxFQUNBTSxFQUFBLE1BQUFILEdBQUEsTUFBQUEsRUFDQUksRUFBQSxNQUFBSixHQUFBLE1BQUFBLEVBQ0FQLEVBQUFKLEVBQUEsSUFBQUcsRUFDQWEsRUFBQVAsR0FBQUMsRUFFQVQsRUFBQW5WLE1BQ0FsRSxRQUFBZ0IsSUFDQTRZLFVBQUEsR0FDQUosWUFDQVcsV0FDQUQsU0FDQUQsVUFDQUQsYUFDQUksVUFBQUMsRUFBQUQsR0FBQUosRUFBQSxVQUFBTSxFQUFBZCxHQUFBLFNBY0EsT0FUQXhQLEVBQUErTyxFQUFBL1UsU0FDQXNWLEdBQUFQLEVBQUF3QixPQUFBdlEsSUFJQXNQLEdBQ0FELEVBQUFuVixLQUFBb1YsR0FHQUQsRUFvQkEsU0FBQW1CLEVBQUF6QixHQUNBLE9BQUEwQixVQUFBMUIsR0FBQTNXLFFBQUEsbUJBQUF0QyxHQUNBLFVBQUFBLEVBQUE0YSxXQUFBLEdBQUFqWSxTQUFBLElBQUFrWSxnQkFVQSxTQUFBQyxFQUFBN0IsR0FDQSxPQUFBMEIsVUFBQTFCLEdBQUEzVyxRQUFBLGlCQUFBdEMsR0FDQSxVQUFBQSxFQUFBNGEsV0FBQSxHQUFBalksU0FBQSxJQUFBa1ksZ0JBT0EsU0FBQTNCLEVBQUFLLEdBS0EsSUFIQSxJQUFBd0IsRUFBQSxJQUFBQyxNQUFBekIsRUFBQXJWLFFBR0F2RSxFQUFBLEVBQWlCQSxFQUFBNFosRUFBQXJWLE9BQW1CdkUsSUFDcEMsaUJBQUE0WixFQUFBNVosS0FDQW9iLEVBQUFwYixHQUFBLElBQUEwWixPQUFBLE9BQUFFLEVBQUE1WixHQUFBMmEsUUFBQSxPQUlBLGdCQUFBaFMsRUFBQTJTLEdBTUEsSUFMQSxJQUFBekIsRUFBQSxHQUNBMEIsRUFBQTVTLE1BRUE2UyxHQURBRixPQUNBRyxPQUFBVixFQUFBclgsbUJBRUExRCxFQUFBLEVBQW1CQSxFQUFBNFosRUFBQXJWLE9BQW1CdkUsSUFBQSxDQUN0QyxJQUFBMGIsRUFBQTlCLEVBQUE1WixHQUVBLG9CQUFBMGIsRUFBQSxDQU1BLElBQ0FDLEVBREExYSxFQUFBc2EsRUFBQUcsRUFBQW5iLE1BR0EsU0FBQVUsRUFBQSxDQUNBLEdBQUF5YSxFQUFBaEIsU0FBQSxDQUVBZ0IsRUFBQWxCLFVBQ0FYLEdBQUE2QixFQUFBdkIsUUFHQSxTQUVBLFVBQUEvTixVQUFBLGFBQUFzUCxFQUFBbmIsS0FBQSxtQkFJQSxHQUFBMlksRUFBQWpZLEdBQUEsQ0FDQSxJQUFBeWEsRUFBQWpCLE9BQ0EsVUFBQXJPLFVBQUEsYUFBQXNQLEVBQUFuYixLQUFBLGtDQUFBb0QsS0FBQUMsVUFBQTNDLEdBQUEsS0FHQSxPQUFBQSxFQUFBc0QsT0FBQSxDQUNBLEdBQUFtWCxFQUFBaEIsU0FDQSxTQUVBLFVBQUF0TyxVQUFBLGFBQUFzUCxFQUFBbmIsS0FBQSxxQkFJQSxRQUFBK0YsRUFBQSxFQUF1QkEsRUFBQXJGLEVBQUFzRCxPQUFrQitCLElBQUEsQ0FHekMsR0FGQXFWLEVBQUFILEVBQUF2YSxFQUFBcUYsS0FFQThVLEVBQUFwYixHQUFBNGIsS0FBQUQsR0FDQSxVQUFBdlAsVUFBQSxpQkFBQXNQLEVBQUFuYixLQUFBLGVBQUFtYixFQUFBZixRQUFBLG9CQUFBaFgsS0FBQUMsVUFBQStYLEdBQUEsS0FHQTlCLElBQUEsSUFBQXZULEVBQUFvVixFQUFBdkIsT0FBQXVCLEVBQUEzQixXQUFBNEIsT0FwQkEsQ0E0QkEsR0FGQUEsRUFBQUQsRUFBQW5CLFNBQUFZLEVBQUFsYSxHQUFBdWEsRUFBQXZhLElBRUFtYSxFQUFBcGIsR0FBQTRiLEtBQUFELEdBQ0EsVUFBQXZQLFVBQUEsYUFBQXNQLEVBQUFuYixLQUFBLGVBQUFtYixFQUFBZixRQUFBLG9CQUFBZ0IsRUFBQSxLQUdBOUIsR0FBQTZCLEVBQUF2QixPQUFBd0IsUUFyREE5QixHQUFBNkIsRUF3REEsT0FBQTdCLEdBVUEsU0FBQWdCLEVBQUF2QixHQUNBLE9BQUFBLEVBQUEzVyxRQUFBLDZCQUFtQyxRQVNuQyxTQUFBaVksRUFBQVAsR0FDQSxPQUFBQSxFQUFBMVgsUUFBQSx3QkFVQSxTQUFBa1osRUFBQUMsRUFBQXRULEdBRUEsT0FEQXNULEVBQUF0VCxPQUNBc1QsRUFTQSxTQUFBQyxFQUFBNVYsR0FDQSxPQUFBQSxFQUFBNlYsVUFBQSxPQXdFQSxTQUFBeEMsRUFBQUksRUFBQXBSLEVBQUFyQyxHQUNBK1MsRUFBQTFRLEtBQ0FyQyxFQUFpQ3FDLEdBQUFyQyxFQUNqQ3FDLE1BVUEsSUFMQSxJQUFBeVQsR0FGQTlWLFNBRUE4VixPQUNBQyxHQUFBLElBQUEvVixFQUFBK1YsSUFDQUMsRUFBQSxHQUdBbmMsRUFBQSxFQUFpQkEsRUFBQTRaLEVBQUFyVixPQUFtQnZFLElBQUEsQ0FDcEMsSUFBQTBiLEVBQUE5QixFQUFBNVosR0FFQSxvQkFBQTBiLEVBQ0FTLEdBQUF0QixFQUFBYSxPQUNLLENBQ0wsSUFBQXZCLEVBQUFVLEVBQUFhLEVBQUF2QixRQUNBQyxFQUFBLE1BQUFzQixFQUFBZixRQUFBLElBRUFuUyxFQUFBL0QsS0FBQWlYLEdBRUFBLEVBQUFqQixTQUNBTCxHQUFBLE1BQUFELEVBQUFDLEVBQUEsTUFhQStCLEdBTkEvQixFQUpBc0IsRUFBQWhCLFNBQ0FnQixFQUFBbEIsUUFHQUwsRUFBQSxJQUFBQyxFQUFBLEtBRkEsTUFBQUQsRUFBQSxJQUFBQyxFQUFBLE1BS0FELEVBQUEsSUFBQUMsRUFBQSxLQU9BLElBQUFMLEVBQUFjLEVBQUExVSxFQUFBNFQsV0FBQSxLQUNBcUMsRUFBQUQsRUFBQXhOLE9BQUFvTCxFQUFBeFYsVUFBQXdWLEVBa0JBLE9BWkFrQyxJQUNBRSxHQUFBQyxFQUFBRCxFQUFBeE4sTUFBQSxHQUFBb0wsRUFBQXhWLFFBQUE0WCxHQUFBLE1BQUFwQyxFQUFBLFdBSUFvQyxHQURBRCxFQUNBLElBSUFELEdBQUFHLEVBQUEsU0FBQXJDLEVBQUEsTUFHQThCLEVBQUEsSUFBQW5DLE9BQUEsSUFBQXlDLEVBQUFKLEVBQUE1VixJQUFBcUMsR0FlQSxTQUFBMlEsRUFBQVUsRUFBQXJSLEVBQUFyQyxHQVFBLE9BUEErUyxFQUFBMVEsS0FDQXJDLEVBQWlDcUMsR0FBQXJDLEVBQ2pDcUMsTUFHQXJDLFFBRUEwVCxhQUFBSCxPQWxKQSxTQUFBRyxFQUFBclIsR0FFQSxJQUFBNlQsRUFBQXhDLEVBQUE3VixPQUFBOFMsTUFBQSxhQUVBLEdBQUF1RixFQUNBLFFBQUFyYyxFQUFBLEVBQW1CQSxFQUFBcWMsRUFBQTlYLE9BQW1CdkUsSUFDdEN3SSxFQUFBL0QsTUFDQWxFLEtBQUFQLEVBQ0FtYSxPQUFBLEtBQ0FKLFVBQUEsS0FDQVcsVUFBQSxFQUNBRCxRQUFBLEVBQ0FELFNBQUEsRUFDQUQsVUFBQSxFQUNBSSxRQUFBLE9BS0EsT0FBQWtCLEVBQUFoQyxFQUFBclIsR0FnSUE4VCxDQUFBekMsRUFBa0QsR0FHbERYLEVBQUFXLEdBeEhBLFNBQUFBLEVBQUFyUixFQUFBckMsR0FHQSxJQUZBLElBQUFJLEtBRUF2RyxFQUFBLEVBQWlCQSxFQUFBNlosRUFBQXRWLE9BQWlCdkUsSUFDbEN1RyxFQUFBOUIsS0FBQTBVLEVBQUFVLEVBQUE3WixHQUFBd0ksRUFBQXJDLEdBQUFuQyxRQUtBLE9BQUE2WCxFQUZBLElBQUFuQyxPQUFBLE1BQUFuVCxFQUFBcEMsS0FBQSxTQUFBNFgsRUFBQTVWLElBRUFxQyxHQWdIQStULENBQTJDLEVBQThCLEVBQUFwVyxHQXJHekUsU0FBQTBULEVBQUFyUixFQUFBckMsR0FDQSxPQUFBcVQsRUFBQUosRUFBQVMsRUFBQTFULEdBQUFxQyxFQUFBckMsR0F1R0FxVyxDQUEwQyxFQUE4QixFQUFBclcsa0NDbGF4RSxJQUFBc1csR0FDQTlPLG1CQUFBLEVBQ0F5QyxjQUFBLEVBQ0FzTSxjQUFBLEVBQ0FsTSxhQUFBLEVBQ0FtTSxpQkFBQSxFQUNBQywwQkFBQSxFQUNBQyxRQUFBLEVBQ0FwUCxXQUFBLEVBQ0F2RixNQUFBLEdBR0E0VSxHQUNBdmMsTUFBQSxFQUNBZ0UsUUFBQSxFQUNBM0MsV0FBQSxFQUNBbWIsUUFBQSxFQUNBQyxRQUFBLEVBQ0FqWSxXQUFBLEVBQ0FrWSxPQUFBLEdBR0F0YyxFQUFBRCxPQUFBQyxlQUNBdWMsRUFBQXhjLE9BQUF3YyxvQkFDQUMsRUFBQXpjLE9BQUF5YyxzQkFDQUMsRUFBQTFjLE9BQUEwYyx5QkFDQTdKLEVBQUE3UyxPQUFBNlMsZUFDQThKLEVBQUE5SixLQUFBN1MsUUFrQ0FYLEVBQUFELFFBaENBLFNBQUF3ZCxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLG9CQUFBRCxFQUFBLENBRUEsR0FBQUgsRUFBQSxDQUNBLElBQUFLLEVBQUFuSyxFQUFBaUssR0FDQUUsT0FBQUwsR0FDQUMsRUFBQUMsRUFBQUcsRUFBQUQsR0FJQSxJQUFBalYsRUFBQTBVLEVBQUFNLEdBRUFMLElBQ0EzVSxJQUFBdEUsT0FBQWlaLEVBQUFLLEtBR0EsUUFBQXhkLEVBQUEsRUFBdUJBLEVBQUF3SSxFQUFBakUsU0FBaUJ2RSxFQUFBLENBQ3hDLElBQUF1QixFQUFBaUgsRUFBQXhJLEdBQ0EsS0FBQXljLEVBQUFsYixJQUFBdWIsRUFBQXZiLElBQUFrYyxLQUFBbGMsSUFBQSxDQUNBLElBQUFvYyxFQUFBUCxFQUFBSSxFQUFBamMsR0FDQSxJQUNBWixFQUFBNGMsRUFBQWhjLEVBQUFvYyxHQUNpQixNQUFBdmIsTUFJakIsT0FBQW1iLEVBR0EsT0FBQUEsd0hDaEVBLElBQUFLLEVBQUFoZSxFQUFBLEdBQ0FpZSxFQUFBamUsRUFBQSxJQUVha2UsT0FBTyxPQUNsQjVWLEtBQU0wUSxnQkFDTlQsU0FBUyxFQUFBMEYsRUFBQUUscUJBR0VDLE1BQU1qRixLQUNqQkEsRUFBU2tGLFdBQWEsSUFBSUMsTUFBUUMsa0JBRWhDalcsS0FBTTJRLGVBQ05WLFNBQVMsRUFBQTBGLEVBQUFPLGFBQVlyRixNQUlablEsU0FBU21RLE1BQ3BCN1EsS0FBTTRRLGtCQUNOWCxTQUFTLEVBQUEwRixFQUFBUSxnQkFBZXRGLE1BR2JsUSxTQUFTdEgsTUFDcEIyRyxLQUFNOFEsa0JBQ05iLFNBQVMsRUFBQTBGLEVBQUFTLGdCQUFlL2MsR0FBS2dkLEtBQUssSUFBTWhkLHlJQ3ZCMUMsSUFBQWlkLEVBQUE1ZSxFQUFBLElBQ0FpZSxFQUFBamUsRUFBQSxJQUVhNmUsYUFBYSxFQUFDQyxFQUFZQyxLQUNyQ0EsRUFBUVYsV0FBYSxJQUFJQyxNQUFRQyxpQkFDakNRLEVBQVFELFdBQWFBLEdBRW5CeFcsS0FBTTBXLGNBQ056RyxTQUFTLEVBQUEwRixFQUFBZ0Isc0JBQXFCRixNQUlyQkcsZ0JBQWdCSCxNQUV6QnpXLEtBQU02VyxpQkFDTjVHLFNBQVMsRUFBQTBGLEVBQUFtQix1QkFBc0JMLE1BSXRCTSxnQkFBZ0JOLE1BRXpCelcsS0FBTWdYLGlCQUNOL0csU0FBUyxFQUFBMEYsRUFBQXNCLHVCQUFzQlIsR0FBU0osS0FBSyxJQUFNSSw0VkNkdkNTLG1CQUFULFNBQTRCdk8sTUFBWTNJLEtBQUVBLEVBQUZpUSxRQUFRQSxJQUVyRCxPQUFPalEsR0FDTCxLQUFLMFEsZ0JBQ0gsT0FBT1QsRUFBUWtILE9BQU8sQ0FBQ25jLEVBQUs2VixLQUMxQjdWLEVBQUk2VixFQUFTeFgsS0FBUXdYLEVBQVN1RyxTQUN2QnBjLE9BR1gsS0FBSzJWLGVBQ0gsT0FBQWhLLEtBQ0tnQyxHQUNIME8sQ0FBQ3BILEVBQVE1VyxVQUViLEtBQUt5WCxrQkFBaUIsQ0FDcEIsTUFBTXdHLE9BQVkzTyxHQUVsQixjQURPMk8sRUFBS3JILEVBQVEzVCxJQUNiZ2IsRUFFVCxLQUFLWixFQUNILE9BQUEvUCxLQUNLZ0MsR0FDSDBPLENBQUNwSCxFQUFRdUcsZ0JBQ0o3TixFQUFNc0gsRUFBUXVHLFlBQ2pCdkcsS0FHTixLQUFLNEcsRUFDSCxPQUFBbFEsS0FDS2dDLEdBQ0gwTyxDQUFDcEgsRUFBUXVHLFlBQWE3TixFQUFNc0gsRUFBUXVHLFlBQVl4YixJQUFJeWIsR0FBV0EsRUFBUXBkLE1BQVE0VyxFQUFRNVcsSUFBTTRXLEVBQVV3RyxLQUczRyxLQUFLTyxFQUFnQixDQUNuQixNQUFNTyxPQUFnQjVPLEdBQ2hCakksRUFBUzZXLEVBQVN0SCxFQUFRdUcsWUFBWWpVLE9BQU9rVSxHQUFXQSxFQUFRcGQsTUFBUTRXLEVBQVE1VyxLQUV0RixPQURBa2UsRUFBU3RILEVBQVF1RyxZQUFjOVYsRUFDeEI2VyxFQUdULFFBQ0UsT0FBTzVPLElBakRiLElBQUErTSxFQUFBaGUsRUFBQSxHQUNPLE1BQU1nZixnQkFBYyxjQUNkRyxtQkFBaUIsaUJBQ2pCRyxtQkFBaUIsaUJBRWpCUSxnQkFBYzdPLElBQVNBLEVBQU11TyxvQkFDN0JPLHdCQUF3QixFQUFDOU8sRUFBTzZOLElBQWVnQixFQUFZN08sR0FBTzZOLDZIQ04vRSxTQUFBa0IsRUFBQUMsR0FDQSxZQUFBQSxFQUFBQyxPQUFBLEdBSUEsU0FBQUMsRUFBQWhkLEVBQUF3SCxHQUNBLFFBQUF2SyxFQUFBdUssRUFBQXlWLEVBQUFoZ0IsRUFBQSxFQUFBeUIsRUFBQXNCLEVBQUF3QixPQUFpRHliLEVBQUF2ZSxFQUFPekIsR0FBQSxFQUFBZ2dCLEdBQUEsRUFDeERqZCxFQUFBL0MsR0FBQStDLEVBQUFpZCxHQUdBamQsRUFBQWtkLE1BMkRBLElBQUFDLEVBdkRBLFNBQUFDLEdBQ0EsSUFBQUMsRUFBQXJiLFVBQUFSLE9BQUEsUUFBQWhDLElBQUF3QyxVQUFBLEdBQUFBLFVBQUEsTUFFQXNiLEVBQUFGLEtBQUFHLE1BQUEsU0FDQUMsRUFBQUgsS0FBQUUsTUFBQSxTQUVBRSxFQUFBTCxHQUFBUCxFQUFBTyxHQUNBTSxFQUFBTCxHQUFBUixFQUFBUSxHQUNBTSxFQUFBRixHQUFBQyxFQVdBLEdBVEFOLEdBQUFQLEVBQUFPLEdBRUFJLEVBQUFGLEVBQ0dBLEVBQUE5YixTQUVIZ2MsRUFBQU4sTUFDQU0sSUFBQXJjLE9BQUFtYyxLQUdBRSxFQUFBaGMsT0FBQSxVQUVBLElBQUFvYyxPQUFBLEVBQ0EsR0FBQUosRUFBQWhjLE9BQUEsQ0FDQSxJQUFBcWMsRUFBQUwsSUFBQWhjLE9BQUEsR0FDQW9jLEVBQUEsTUFBQUMsR0FBQSxPQUFBQSxHQUFBLEtBQUFBLE9BRUFELEdBQUEsRUFJQSxJQURBLElBQUFFLEVBQUEsRUFDQTdnQixFQUFBdWdCLEVBQUFoYyxPQUFnQ3ZFLEdBQUEsRUFBUUEsSUFBQSxDQUN4QyxJQUFBNEcsRUFBQTJaLEVBQUF2Z0IsR0FFQSxNQUFBNEcsRUFDQW1aLEVBQUFRLEVBQUF2Z0IsR0FDSyxPQUFBNEcsR0FDTG1aLEVBQUFRLEVBQUF2Z0IsR0FDQTZnQixLQUNLQSxJQUNMZCxFQUFBUSxFQUFBdmdCLEdBQ0E2Z0IsS0FJQSxJQUFBSCxFQUFBLEtBQXlCRyxJQUFNQSxFQUMvQk4sRUFBQU8sUUFBQSxPQUNHSixHQUFBLEtBQUFILEVBQUEsSUFBQUEsRUFBQSxJQUFBWCxFQUFBVyxFQUFBLEtBQUFBLEVBQUFPLFFBQUEsSUFFSCxJQUFBaFksRUFBQXlYLEVBQUFwYyxLQUFBLEtBSUEsT0FGQXdjLEdBQUEsTUFBQTdYLEVBQUFnUyxRQUFBLEtBQUFoUyxHQUFBLEtBRUFBLEdDbEVBaVksRUFBQSxtQkFBQWhnQixRQUFBLGlCQUFBQSxPQUFBaWdCLFNBQUEsU0FBQXJZLEdBQW9HLGNBQUFBLEdBQXFCLFNBQUFBLEdBQW1CLE9BQUFBLEdBQUEsbUJBQUE1SCxRQUFBNEgsRUFBQWtFLGNBQUE5TCxRQUFBNEgsSUFBQTVILE9BQUFhLFVBQUEsZ0JBQUErRyxHQXFDNUksSUFBQXNZLEVBbkNBLFNBQUFDLEVBQUFoZixFQUFBQyxHQUNBLEdBQUFELElBQUFDLEVBQUEsU0FFQSxTQUFBRCxHQUFBLE1BQUFDLEVBQUEsU0FFQSxHQUFBa1osTUFBQThGLFFBQUFqZixHQUNBLE9BQUFtWixNQUFBOEYsUUFBQWhmLElBQUFELEVBQUFxQyxTQUFBcEMsRUFBQW9DLFFBQUFyQyxFQUFBa2YsTUFBQSxTQUFBamUsRUFBQW9ILEdBQ0EsT0FBQTJXLEVBQUEvZCxFQUFBaEIsRUFBQW9JLE1BSUEsSUFBQThXLE9BQUEsSUFBQW5mLEVBQUEsWUFBQTZlLEVBQUE3ZSxHQUdBLEdBQUFtZixVQUZBLElBQUFsZixFQUFBLFlBQUE0ZSxFQUFBNWUsSUFFQSxTQUVBLGNBQUFrZixFQUFBLENBQ0EsSUFBQUMsRUFBQXBmLEVBQUFxZixVQUNBQyxFQUFBcmYsRUFBQW9mLFVBRUEsR0FBQUQsSUFBQXBmLEdBQUFzZixJQUFBcmYsRUFBQSxPQUFBK2UsRUFBQUksRUFBQUUsR0FFQSxJQUFBQyxFQUFBL2dCLE9BQUE4SCxLQUFBdEcsR0FDQXdmLEVBQUFoaEIsT0FBQThILEtBQUFyRyxHQUVBLE9BQUFzZixFQUFBbGQsU0FBQW1kLEVBQUFuZCxRQUVBa2QsRUFBQUwsTUFBQSxTQUFBN2YsR0FDQSxPQUFBMmYsRUFBQWhmLEVBQUFYLEdBQUFZLEVBQUFaLE1BSUEsVUNsQ0FvZ0IsRUFBQSxTQUFBOUgsR0FDQSxZQUFBQSxFQUFBaUcsT0FBQSxHQUFBakcsRUFBQSxJQUFBQSxHQUdBK0gsRUFBQSxTQUFBL0gsR0FDQSxZQUFBQSxFQUFBaUcsT0FBQSxHQUFBakcsRUFBQWlCLE9BQUEsR0FBQWpCLEdBR0FnSSxFQUFBLFNBQUFoSSxFQUFBTSxHQUNBLFdBQUFULE9BQUEsSUFBQVMsRUFBQSxxQkFBQXlCLEtBQUEvQixJQUdBaUksRUFBQSxTQUFBakksRUFBQU0sR0FDQSxPQUFBMEgsRUFBQWhJLEVBQUFNLEdBQUFOLEVBQUFpQixPQUFBWCxFQUFBNVYsUUFBQXNWLEdBR0FrSSxFQUFBLFNBQUFsSSxHQUNBLFlBQUFBLEVBQUFpRyxPQUFBakcsRUFBQXRWLE9BQUEsR0FBQXNWLEVBQUFsTCxNQUFBLE1BQUFrTCxHQTJCQW1JLEVBQUEsU0FBQUMsR0FDQSxJQUFBcEMsRUFBQW9DLEVBQUFwQyxTQUNBcUMsRUFBQUQsRUFBQUMsT0FDQUMsRUFBQUYsRUFBQUUsS0FHQXRJLEVBQUFnRyxHQUFBLElBTUEsT0FKQXFDLEdBQUEsTUFBQUEsSUFBQXJJLEdBQUEsTUFBQXFJLEVBQUFwQyxPQUFBLEdBQUFvQyxFQUFBLElBQUFBLEdBRUFDLEdBQUEsTUFBQUEsSUFBQXRJLEdBQUEsTUFBQXNJLEVBQUFyQyxPQUFBLEdBQUFxQyxFQUFBLElBQUFBLEdBRUF0SSxHQ3hEQWhMLEVBQUFuTyxPQUFBb08sUUFBQSxTQUFBeEosR0FBbUQsUUFBQXRGLEVBQUEsRUFBZ0JBLEVBQUErRSxVQUFBUixPQUFzQnZFLElBQUEsQ0FBTyxJQUFBZ0UsRUFBQWUsVUFBQS9FLEdBQTJCLFFBQUF1QixLQUFBeUMsRUFBMEJ0RCxPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUE2RCxFQUFBekMsS0FBeUQrRCxFQUFBL0QsR0FBQXlDLEVBQUF6QyxJQUFpQyxPQUFBK0QsR0FNL084YyxFQUFBLFNBQUF2SSxFQUFBaEosRUFBQXRQLEVBQUE4Z0IsR0FDQSxJQUFBSixPQUFBLEVBQ0EsaUJBQUFwSSxHQUVBb0ksRURVQSxTQUFBcEksR0FDQSxJQUFBZ0csRUFBQWhHLEdBQUEsSUFDQXFJLEVBQUEsR0FDQUMsRUFBQSxHQUVBRyxFQUFBekMsRUFBQWhZLFFBQUEsTUFDQSxJQUFBeWEsSUFDQUgsRUFBQXRDLEVBQUEvRSxPQUFBd0gsR0FDQXpDLElBQUEvRSxPQUFBLEVBQUF3SCxJQUdBLElBQUFDLEVBQUExQyxFQUFBaFksUUFBQSxLQU1BLE9BTEEsSUFBQTBhLElBQ0FMLEVBQUFyQyxFQUFBL0UsT0FBQXlILEdBQ0ExQyxJQUFBL0UsT0FBQSxFQUFBeUgsS0FJQTFDLFdBQ0FxQyxPQUFBLE1BQUFBLEVBQUEsR0FBQUEsRUFDQUMsS0FBQSxNQUFBQSxFQUFBLEdBQUFBLEdDOUJBSyxDQUFBM0ksSUFDQWhKLGNBS0F0TyxLQUZBMGYsRUFBQXBULEtBQTBCZ0wsSUFFMUJnRyxXQUFBb0MsRUFBQXBDLFNBQUEsSUFFQW9DLEVBQUFDLE9BQ0EsTUFBQUQsRUFBQUMsT0FBQXBDLE9BQUEsS0FBQW1DLEVBQUFDLE9BQUEsSUFBQUQsRUFBQUMsUUFFQUQsRUFBQUMsT0FBQSxHQUdBRCxFQUFBRSxLQUNBLE1BQUFGLEVBQUFFLEtBQUFyQyxPQUFBLEtBQUFtQyxFQUFBRSxLQUFBLElBQUFGLEVBQUFFLE1BRUFGLEVBQUFFLEtBQUEsUUFHQTVmLElBQUFzTyxRQUFBdE8sSUFBQTBmLEVBQUFwUixRQUFBb1IsRUFBQXBSLFVBR0EsSUFDQW9SLEVBQUFwQyxTQUFBNEMsVUFBQVIsRUFBQXBDLFVBQ0csTUFBQXpkLEdBQ0gsTUFBQUEsYUFBQXNnQixTQUNBLElBQUFBLFNBQUEsYUFBQVQsRUFBQXBDLFNBQUEsaUZBRUF6ZCxFQW9CQSxPQWhCQWIsSUFBQTBnQixFQUFBMWdCLE9BRUE4Z0IsRUFFQUosRUFBQXBDLFNBRUssTUFBQW9DLEVBQUFwQyxTQUFBQyxPQUFBLEtBQ0xtQyxFQUFBcEMsU0FBQUssRUFBQStCLEVBQUFwQyxTQUFBd0MsRUFBQXhDLFdBRkFvQyxFQUFBcEMsU0FBQXdDLEVBQUF4QyxTQU1Bb0MsRUFBQXBDLFdBQ0FvQyxFQUFBcEMsU0FBQSxLQUlBb0MsR0FHQVUsRUFBQSxTQUFBemdCLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQTJkLFdBQUExZCxFQUFBMGQsVUFBQTNkLEVBQUFnZ0IsU0FBQS9mLEVBQUErZixRQUFBaGdCLEVBQUFpZ0IsT0FBQWhnQixFQUFBZ2dCLE1BQUFqZ0IsRUFBQVgsTUFBQVksRUFBQVosS0FBQTBmLEVBQUEvZSxFQUFBMk8sTUFBQTFPLEVBQUEwTyxRQ2FBK1IsRUExRUEsV0FDQSxJQUFBQyxFQUFBLEtBb0NBeFUsS0E2QkEsT0FDQXlVLFVBaEVBLFNBQUFDLEdBS0EsT0FKQXpTLElBQUEsTUFBQXVTLEVBQUEsZ0RBRUFBLEVBQUFFLEVBRUEsV0FDQUYsSUFBQUUsSUFBQUYsRUFBQSxRQTJEQUcsb0JBdkRBLFNBQUFmLEVBQUFnQixFQUFBQyxFQUFBQyxHQUlBLFNBQUFOLEVBQUEsQ0FDQSxJQUFBL1osRUFBQSxtQkFBQStaLElBQUFaLEVBQUFnQixHQUFBSixFQUVBLGlCQUFBL1osRUFDQSxtQkFBQW9hLEVBQ0FBLEVBQUFwYSxFQUFBcWEsSUFFQTdTLEtBQUEscUZBRUE2UyxHQUFBLElBSUFBLEdBQUEsSUFBQXJhLFFBR0FxYSxHQUFBLElBb0NBQyxlQTlCQSxTQUFBeGUsR0FDQSxJQUFBeWUsR0FBQSxFQUVBOVUsRUFBQSxXQUNBOFUsR0FBQXplLEVBQUFFLFdBQUF2QyxFQUFBd0MsWUFLQSxPQUZBc0osRUFBQTVKLEtBQUE4SixHQUVBLFdBQ0E4VSxHQUFBLEVBQ0FoVixJQUFBNUQsT0FBQSxTQUFBdEgsR0FDQSxPQUFBQSxJQUFBb0wsTUFtQkErVSxnQkFkQSxXQUNBLFFBQUFDLEVBQUF4ZSxVQUFBUixPQUFBOUIsRUFBQTRZLE1BQUFrSSxHQUFBQyxFQUFBLEVBQW1FQSxFQUFBRCxFQUFhQyxJQUNoRi9nQixFQUFBK2dCLEdBQUF6ZSxVQUFBeWUsR0FHQW5WLEVBQUE1RixRQUFBLFNBQUE4RixHQUNBLE9BQUFBLEVBQUF6SixXQUFBdkMsRUFBQUUsUUNoRUFnaEIsSUFBQSxvQkFBQXhlLGdCQUFBQyxXQUFBRCxPQUFBQyxTQUFBOEMsZUFFQTBiLEVBQUEsU0FBQUMsRUFBQUMsRUFBQXJWLEdBQ0EsT0FBQW9WLEVBQUFELGlCQUFBQyxFQUFBRCxpQkFBQUUsRUFBQXJWLEdBQUEsR0FBQW9WLEVBQUFFLFlBQUEsS0FBQUQsRUFBQXJWLElBR0F1VixFQUFBLFNBQUFILEVBQUFDLEVBQUFyVixHQUNBLE9BQUFvVixFQUFBRyxvQkFBQUgsRUFBQUcsb0JBQUFGLEVBQUFyVixHQUFBLEdBQUFvVixFQUFBSSxZQUFBLEtBQUFILEVBQUFyVixJQUdBeVYsRUFBQSxTQUFBQyxFQUFBZCxHQUNBLE9BQUFBLEVBQUFsZSxPQUFBaWYsUUFBQUQsS0NYQUUsRUFBQSxtQkFBQXBqQixRQUFBLGlCQUFBQSxPQUFBaWdCLFNBQUEsU0FBQXJZLEdBQW9HLGNBQUFBLEdBQXFCLFNBQUFBLEdBQW1CLE9BQUFBLEdBQUEsbUJBQUE1SCxRQUFBNEgsRUFBQWtFLGNBQUE5TCxRQUFBNEgsSUFBQTVILE9BQUFhLFVBQUEsZ0JBQUErRyxHQUU1SXliLEVBQUExakIsT0FBQW9PLFFBQUEsU0FBQXhKLEdBQW1ELFFBQUF0RixFQUFBLEVBQWdCQSxFQUFBK0UsVUFBQVIsT0FBc0J2RSxJQUFBLENBQU8sSUFBQWdFLEVBQUFlLFVBQUEvRSxHQUEyQixRQUFBdUIsS0FBQXlDLEVBQTBCdEQsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBNkQsRUFBQXpDLEtBQXlEK0QsRUFBQS9ELEdBQUF5QyxFQUFBekMsSUFBaUMsT0FBQStELEdBWS9PK2UsRUFBQSxXQUNBLElBQ0EsT0FBQXBmLE9BQUFxZixRQUFBelQsVUFDRyxNQUFBek8sR0FHSCxXQTZRQW1pQixFQXJRQSxXQUNBLElBQUF2WSxFQUFBakgsVUFBQVIsT0FBQSxRQUFBaEMsSUFBQXdDLFVBQUEsR0FBQUEsVUFBQSxNQUVBeWYsSUFBQWYsRUFBQSwrQkFFQSxJQUFBZ0IsRUFBQXhmLE9BQUFxZixRQUNBSSxFRGJBLFdBQ0EsSUFBQUMsRUFBQTFmLE9BQUEyZixVQUFBQyxVQUVBLFlBQUFGLEVBQUE5YyxRQUFBLG9CQUFBOGMsRUFBQTljLFFBQUEscUJBQUE4YyxFQUFBOWMsUUFBQSx1QkFBQThjLEVBQUE5YyxRQUFBLGdCQUFBOGMsRUFBQTljLFFBQUEsbUJBRUE1QyxPQUFBcWYsU0FBQSxjQUFBcmYsT0FBQXFmLFFDUUFRLEdBQ0FDLEtEREEsSUFBQTlmLE9BQUEyZixVQUFBQyxVQUFBaGQsUUFBQSxZQ0dBbWQsRUFBQWhaLEVBQUFpWixhQUNBQSxPQUFBMWlCLElBQUF5aUIsS0FDQUUsRUFBQWxaLEVBQUFrWCxvQkFDQUEsT0FBQTNnQixJQUFBMmlCLEVBQUFsQixFQUFBa0IsRUFDQUMsRUFBQW5aLEVBQUFvWixVQUNBQSxPQUFBN2lCLElBQUE0aUIsRUFBQSxFQUFBQSxFQUVBRSxFQUFBclosRUFBQXFaLFNBQUF0RCxFQUFBSixFQUFBM1YsRUFBQXFaLFdBQUEsR0FFQUMsRUFBQSxTQUFBQyxHQUNBLElBQUFuWSxFQUFBbVksTUFDQWhrQixFQUFBNkwsRUFBQTdMLElBQ0FzUCxFQUFBekQsRUFBQXlELE1BRUEyVSxFQUFBdmdCLE9BQUFnZCxTQU1BcEksRUFMQTJMLEVBQUEzRixTQUNBMkYsRUFBQXRELE9BQ0FzRCxFQUFBckQsS0FTQSxPQUpBN1IsS0FBQStVLEdBQUF4RCxFQUFBaEksRUFBQXdMLEdBQUEsa0hBQUF4TCxFQUFBLG9CQUFBd0wsRUFBQSxNQUVBQSxJQUFBeEwsRUFBQWlJLEVBQUFqSSxFQUFBd0wsSUFFQWpELEVBQUF2SSxFQUFBaEosRUFBQXRQLElBR0Fra0IsRUFBQSxXQUNBLE9BQUFDLEtBQUFDLFNBQUEzaUIsU0FBQSxJQUFBOFgsT0FBQSxFQUFBc0ssSUFHQVEsRUFBQWhELElBRUF2USxFQUFBLFNBQUF5RCxHQUNBc08sRUFBQUUsRUFBQXhPLEdBRUF3TyxFQUFBL2YsT0FBQWtnQixFQUFBbGdCLE9BRUFxaEIsRUFBQXRDLGdCQUFBZ0IsRUFBQXJDLFNBQUFxQyxFQUFBckIsU0FHQTRDLEVBQUEsU0FBQWpDLElEL0JBLFNBQUFBLEdBQ0EsWUFBQXJoQixJQUFBcWhCLEVBQUEvUyxRQUFBLElBQUErVCxVQUFBQyxVQUFBaGQsUUFBQSxVQ2dDQWllLENBQUFsQyxJQUVBbUMsRUFBQVQsRUFBQTFCLEVBQUEvUyxTQUdBbVYsRUFBQSxXQUNBRCxFQUFBVCxFQUFBakIsT0FHQTRCLEdBQUEsRUFFQUYsRUFBQSxTQUFBOUQsR0FDQWdFLEdBQ0FBLEdBQUEsRUFDQTVULEtBSUF1VCxFQUFBNUMsb0JBQUFmLEVBRkEsTUFFQWlCLEVBQUEsU0FBQWdELEdBQ0FBLEVBQ0E3VCxHQUFvQjRRLE9BSnBCLE1BSW9CaEIsYUFFcEJrRSxFQUFBbEUsTUFNQWtFLEVBQUEsU0FBQUMsR0FDQSxJQUFBQyxFQUFBL0IsRUFBQXJDLFNBTUFxRSxFQUFBQyxFQUFBMWUsUUFBQXdlLEVBQUE5a0IsTUFFQSxJQUFBK2tCLE1BQUEsR0FFQSxJQUFBRSxFQUFBRCxFQUFBMWUsUUFBQXVlLEVBQUE3a0IsTUFFQSxJQUFBaWxCLE1BQUEsR0FFQSxJQUFBQyxFQUFBSCxFQUFBRSxFQUVBQyxJQUNBUixHQUFBLEVBQ0FTLEVBQUFELEtBSUFFLEVBQUFyQixFQUFBakIsS0FDQWtDLEdBQUFJLEVBQUFwbEIsS0FJQXFsQixFQUFBLFNBQUEzRSxHQUNBLE9BQUFvRCxFQUFBckQsRUFBQUMsSUF5RUF5RSxFQUFBLFNBQUFqbEIsR0FDQWdqQixFQUFBaUMsR0FBQWpsQixJQVdBb2xCLEVBQUEsRUFFQUMsRUFBQSxTQUFBTCxHQUdBLEtBRkFJLEdBQUFKLElBR0EvQyxFQUFBemUsT0EzTkEsV0EyTkE0Z0IsR0FFQWQsR0FBQXJCLEVBQUF6ZSxPQTVOQSxhQTROQStnQixJQUNLLElBQUFhLElBQ0wvQyxFQUFBN2UsT0EvTkEsV0ErTkE0Z0IsR0FFQWQsR0FBQWpCLEVBQUE3ZSxPQWhPQSxhQWdPQStnQixLQUlBZSxHQUFBLEVBZ0NBekMsR0FDQS9mLE9BQUFrZ0IsRUFBQWxnQixPQUNBMGUsT0FBQSxNQUNBaEIsU0FBQTBFLEVBQ0FDLGFBQ0FuaUIsS0F2SUEsU0FBQW9WLEVBQUFoSixHQUNBUCxNQUFBLHFCQUFBdUosRUFBQSxZQUFBc0ssRUFBQXRLLFVBQUF0WCxJQUFBc1gsRUFBQWhKLFlBQUF0TyxJQUFBc08sR0FBQSxpSkFFQSxJQUNBb1IsRUFBQUcsRUFBQXZJLEVBQUFoSixFQUFBNFUsSUFBQW5CLEVBQUFyQyxVQUVBMkQsRUFBQTVDLG9CQUFBZixFQUhBLE9BR0FpQixFQUFBLFNBQUFnRCxHQUNBLEdBQUFBLEVBQUEsQ0FFQSxJQUFBcmMsRUFBQStjLEVBQUEzRSxHQUNBMWdCLEVBQUEwZ0IsRUFBQTFnQixJQUNBc1AsRUFBQW9SLEVBQUFwUixNQUdBLEdBQUE2VCxFQUdBLEdBRkFELEVBQUF1QyxXQUFpQ3psQixNQUFBc1AsU0FBeUIsS0FBQWhILEdBRTFEb2IsRUFDQWhnQixPQUFBZ2QsU0FBQXBZLFdBQ1MsQ0FDVCxJQUFBb2QsRUFBQVYsRUFBQTFlLFFBQUF5YyxFQUFBckMsU0FBQTFnQixLQUNBMmxCLEVBQUFYLEVBQUE1WCxNQUFBLE9BQUFzWSxFQUFBLEVBQUFBLEVBQUEsR0FFQUMsRUFBQXppQixLQUFBd2QsRUFBQTFnQixLQUNBZ2xCLEVBQUFXLEVBRUE3VSxHQUFvQjRRLE9BdkJwQixPQXVCb0JoQixrQkFHcEIzUixTQUFBL04sSUFBQXNPLEVBQUEsbUZBRUE1TCxPQUFBZ2QsU0FBQXBZLFdBeUdBbEgsUUFwR0EsU0FBQWtYLEVBQUFoSixHQUNBUCxNQUFBLHFCQUFBdUosRUFBQSxZQUFBc0ssRUFBQXRLLFVBQUF0WCxJQUFBc1gsRUFBQWhKLFlBQUF0TyxJQUFBc08sR0FBQSxvSkFFQSxJQUNBb1IsRUFBQUcsRUFBQXZJLEVBQUFoSixFQUFBNFUsSUFBQW5CLEVBQUFyQyxVQUVBMkQsRUFBQTVDLG9CQUFBZixFQUhBLFVBR0FpQixFQUFBLFNBQUFnRCxHQUNBLEdBQUFBLEVBQUEsQ0FFQSxJQUFBcmMsRUFBQStjLEVBQUEzRSxHQUNBMWdCLEVBQUEwZ0IsRUFBQTFnQixJQUNBc1AsRUFBQW9SLEVBQUFwUixNQUdBLEdBQUE2VCxFQUdBLEdBRkFELEVBQUEwQyxjQUFvQzVsQixNQUFBc1AsU0FBeUIsS0FBQWhILEdBRTdEb2IsRUFDQWhnQixPQUFBZ2QsU0FBQXRmLFFBQUFrSCxPQUNTLENBQ1QsSUFBQW9kLEVBQUFWLEVBQUExZSxRQUFBeWMsRUFBQXJDLFNBQUExZ0IsTUFFQSxJQUFBMGxCLElBQUFWLEVBQUFVLEdBQUFoRixFQUFBMWdCLEtBRUE4USxHQUFvQjRRLE9BckJwQixVQXFCb0JoQixrQkFHcEIzUixTQUFBL04sSUFBQXNPLEVBQUEsc0ZBRUE1TCxPQUFBZ2QsU0FBQXRmLFFBQUFrSCxPQXdFQTZjLEtBQ0FVLE9BaEVBLFdBQ0EsT0FBQVYsR0FBQSxJQWdFQVcsVUE3REEsV0FDQSxPQUFBWCxFQUFBLElBNkRBWSxNQXhDQSxXQUNBLElBQUF6RSxFQUFBOWQsVUFBQVIsT0FBQSxRQUFBaEMsSUFBQXdDLFVBQUEsSUFBQUEsVUFBQSxHQUVBd2lCLEVBQUEzQixFQUFBOUMsVUFBQUQsR0FPQSxPQUxBa0UsSUFDQUQsRUFBQSxHQUNBQyxHQUFBLEdBR0EsV0FNQSxPQUxBQSxJQUNBQSxHQUFBLEVBQ0FELEdBQUEsSUFHQVMsTUF5QkFDLE9BckJBLFNBQUFqWixHQUNBLElBQUFrWixFQUFBN0IsRUFBQXhDLGVBQUE3VSxHQUdBLE9BRkF1WSxFQUFBLEdBRUEsV0FDQUEsR0FBQSxHQUNBVyxPQWtCQSxPQUFBbkQsR0M5UkFvRCxFQUFBaG5CLE9BQUFvTyxRQUFBLFNBQUF4SixHQUFtRCxRQUFBdEYsRUFBQSxFQUFnQkEsRUFBQStFLFVBQUFSLE9BQXNCdkUsSUFBQSxDQUFPLElBQUFnRSxFQUFBZSxVQUFBL0UsR0FBMkIsUUFBQXVCLEtBQUF5QyxFQUEwQnRELE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQTZELEVBQUF6QyxLQUF5RCtELEVBQUEvRCxHQUFBeUMsRUFBQXpDLElBQWlDLE9BQUErRCxHQVcvT3FpQixHQUNBQyxVQUNBQyxXQUFBLFNBQUFoTyxHQUNBLFlBQUFBLEVBQUFpRyxPQUFBLEdBQUFqRyxFQUFBLEtBQUErSCxFQUFBL0gsSUFFQWlPLFdBQUEsU0FBQWpPLEdBQ0EsWUFBQUEsRUFBQWlHLE9BQUEsR0FBQWpHLEVBQUFpQixPQUFBLEdBQUFqQixJQUdBa08sU0FDQUYsV0FBQWpHLEVBQ0FrRyxXQUFBbkcsR0FFQXFHLE9BQ0FILFdBQUFsRyxFQUNBbUcsV0FBQW5HLElBSUFzRyxFQUFBLFdBR0EsSUFBQXBlLEVBQUE1RSxPQUFBZ2QsU0FBQXBZLEtBQ0F5WSxFQUFBelksRUFBQWhDLFFBQUEsS0FDQSxXQUFBeWEsRUFBQSxHQUFBelksRUFBQXFlLFVBQUE1RixFQUFBLElBT0E2RixFQUFBLFNBQUF0TyxHQUNBLElBQUF5SSxFQUFBcmQsT0FBQWdkLFNBQUFwWSxLQUFBaEMsUUFBQSxLQUVBNUMsT0FBQWdkLFNBQUF0ZixRQUFBc0MsT0FBQWdkLFNBQUFwWSxLQUFBOEUsTUFBQSxFQUFBMlQsR0FBQSxFQUFBQSxFQUFBLE9BQUF6SSxJQXFRQXVPLEVBbFFBLFdBQ0EsSUFBQXBjLEVBQUFqSCxVQUFBUixPQUFBLFFBQUFoQyxJQUFBd0MsVUFBQSxHQUFBQSxVQUFBLE1BRUF5ZixJQUFBZixFQUFBLDRCQUVBLElBQUFnQixFQUFBeGYsT0FBQXFmLFFBQ0ErRCxHRmJBLElBQUFwakIsT0FBQTJmLFVBQUFDLFVBQUFoZCxRQUFBLFdFZUFxZCxFQUFBbFosRUFBQWtYLG9CQUNBQSxPQUFBM2dCLElBQUEyaUIsRUFBQWxCLEVBQUFrQixFQUNBb0QsRUFBQXRjLEVBQUF1YyxTQUNBQSxPQUFBaG1CLElBQUErbEIsRUFBQSxRQUFBQSxFQUVBakQsRUFBQXJaLEVBQUFxWixTQUFBdEQsRUFBQUosRUFBQTNWLEVBQUFxWixXQUFBLEdBRUFtRCxFQUFBYixFQUFBWSxHQUNBVixFQUFBVyxFQUFBWCxXQUNBQyxFQUFBVSxFQUFBVixXQUdBeEMsRUFBQSxXQUNBLElBQUF6TCxFQUFBaU8sRUFBQUcsS0FNQSxPQUpBM1gsS0FBQStVLEdBQUF4RCxFQUFBaEksRUFBQXdMLEdBQUEsa0hBQUF4TCxFQUFBLG9CQUFBd0wsRUFBQSxNQUVBQSxJQUFBeEwsRUFBQWlJLEVBQUFqSSxFQUFBd0wsSUFFQWpELEVBQUF2SSxJQUdBK0wsRUFBQWhELElBRUF2USxFQUFBLFNBQUF5RCxHQUNBNFIsRUFBQXBELEVBQUF4TyxHQUVBd08sRUFBQS9mLE9BQUFrZ0IsRUFBQWxnQixPQUVBcWhCLEVBQUF0QyxnQkFBQWdCLEVBQUFyQyxTQUFBcUMsRUFBQXJCLFNBR0FnRCxHQUFBLEVBQ0F3QyxFQUFBLEtBRUF6QyxFQUFBLFdBQ0EsSUFBQW5NLEVBQUFvTyxJQUNBUyxFQUFBYixFQUFBaE8sR0FFQSxHQUFBQSxJQUFBNk8sRUFFQVAsRUFBQU8sT0FDSyxDQUNMLElBQUF6RyxFQUFBcUQsSUFDQXFELEVBQUFyRSxFQUFBckMsU0FFQSxJQUFBZ0UsR0FBQXRELEVBQUFnRyxFQUFBMUcsR0FBQSxPQUVBLEdBQUF3RyxJQUFBekcsRUFBQUMsR0FBQSxPQUVBd0csRUFBQSxLQUVBMUMsRUFBQTlELEtBSUE4RCxFQUFBLFNBQUE5RCxHQUNBZ0UsR0FDQUEsR0FBQSxFQUNBNVQsS0FJQXVULEVBQUE1QyxvQkFBQWYsRUFGQSxNQUVBaUIsRUFBQSxTQUFBZ0QsR0FDQUEsRUFDQTdULEdBQW9CNFEsT0FKcEIsTUFJb0JoQixhQUVwQmtFLEVBQUFsRSxNQU1Ba0UsRUFBQSxTQUFBQyxHQUNBLElBQUFDLEVBQUEvQixFQUFBckMsU0FNQXFFLEVBQUFzQyxFQUFBQyxZQUFBN0csRUFBQXFFLEtBRUEsSUFBQUMsTUFBQSxHQUVBLElBQUFFLEVBQUFvQyxFQUFBQyxZQUFBN0csRUFBQW9FLEtBRUEsSUFBQUksTUFBQSxHQUVBLElBQUFDLEVBQUFILEVBQUFFLEVBRUFDLElBQ0FSLEdBQUEsRUFDQVMsRUFBQUQsS0FLQTVNLEVBQUFvTyxJQUNBUyxFQUFBYixFQUFBaE8sR0FFQUEsSUFBQTZPLEdBQUFQLEVBQUFPLEdBRUEsSUFBQS9CLEVBQUFyQixJQUNBc0QsR0FBQTVHLEVBQUEyRSxJQXdFQUQsRUFBQSxTQUFBamxCLEdBQ0E2TyxJQUFBK1gsRUFBQSxnRUFFQTVELEVBQUFpQyxHQUFBamxCLElBV0FvbEIsRUFBQSxFQUVBQyxFQUFBLFNBQUFMLEdBR0EsS0FGQUksR0FBQUosR0FHQS9DLEVBQUF6ZSxPQWxQQSxhQWtQQStnQixHQUNLLElBQUFhLEdBQ0wvQyxFQUFBN2UsT0FwUEEsYUFvUEErZ0IsSUFJQWUsR0FBQSxFQWdDQXpDLEdBQ0EvZixPQUFBa2dCLEVBQUFsZ0IsT0FDQTBlLE9BQUEsTUFDQWhCLFNBQUEwRSxFQUNBQyxXQWxJQSxTQUFBM0UsR0FDQSxVQUFBNEYsRUFBQXhDLEVBQUFyRCxFQUFBQyxLQWtJQXhkLEtBL0hBLFNBQUFvVixFQUFBaEosR0FDQVAsU0FBQS9OLElBQUFzTyxFQUFBLGlEQUVBLElBQ0FvUixFQUFBRyxFQUFBdkksT0FBQXRYLFNBQUEraEIsRUFBQXJDLFVBRUEyRCxFQUFBNUMsb0JBQUFmLEVBSEEsT0FHQWlCLEVBQUEsU0FBQWdELEdBQ0EsR0FBQUEsRUFBQSxDQUVBLElBQUFyTSxFQUFBbUksRUFBQUMsR0FDQXlHLEVBQUFiLEVBQUF4QyxFQUFBeEwsR0FHQSxHQUZBb08sTUFBQVMsRUFFQSxDQUlBRCxFQUFBNU8sRUFsSkEsU0FBQUEsR0FDQTVVLE9BQUFnZCxTQUFBRSxLQUFBdEksRUFrSkFpUCxDQUFBSixHQUVBLElBQUF6QixFQUFBMkIsRUFBQUMsWUFBQTdHLEVBQUFzQyxFQUFBckMsV0FDQThHLEVBQUFILEVBQUFqYSxNQUFBLE9BQUFzWSxFQUFBLEVBQUFBLEVBQUEsR0FFQThCLEVBQUF0a0IsS0FBQW9WLEdBQ0ErTyxFQUFBRyxFQUVBMVcsR0FBa0I0USxPQXZCbEIsT0F1QmtCaEIsa0JBRWxCM1IsS0FBQSxnR0FFQStCLFFBa0dBMVAsUUE3RkEsU0FBQWtYLEVBQUFoSixHQUNBUCxTQUFBL04sSUFBQXNPLEVBQUEsb0RBRUEsSUFDQW9SLEVBQUFHLEVBQUF2SSxPQUFBdFgsU0FBQStoQixFQUFBckMsVUFFQTJELEVBQUE1QyxvQkFBQWYsRUFIQSxVQUdBaUIsRUFBQSxTQUFBZ0QsR0FDQSxHQUFBQSxFQUFBLENBRUEsSUFBQXJNLEVBQUFtSSxFQUFBQyxHQUNBeUcsRUFBQWIsRUFBQXhDLEVBQUF4TCxHQUNBb08sTUFBQVMsSUFNQUQsRUFBQTVPLEVBQ0FzTyxFQUFBTyxJQUdBLElBQUF6QixFQUFBMkIsRUFBQS9nQixRQUFBbWEsRUFBQXNDLEVBQUFyQyxZQUVBLElBQUFnRixJQUFBMkIsRUFBQTNCLEdBQUFwTixHQUVBeEgsR0FBZ0I0USxPQXRCaEIsVUFzQmdCaEIsaUJBcUVoQnlFLEtBQ0FVLE9BNURBLFdBQ0EsT0FBQVYsR0FBQSxJQTREQVcsVUF6REEsV0FDQSxPQUFBWCxFQUFBLElBeURBWSxNQXhDQSxXQUNBLElBQUF6RSxFQUFBOWQsVUFBQVIsT0FBQSxRQUFBaEMsSUFBQXdDLFVBQUEsSUFBQUEsVUFBQSxHQUVBd2lCLEVBQUEzQixFQUFBOUMsVUFBQUQsR0FPQSxPQUxBa0UsSUFDQUQsRUFBQSxHQUNBQyxHQUFBLEdBR0EsV0FNQSxPQUxBQSxJQUNBQSxHQUFBLEVBQ0FELEdBQUEsSUFHQVMsTUF5QkFDLE9BckJBLFNBQUFqWixHQUNBLElBQUFrWixFQUFBN0IsRUFBQXhDLGVBQUE3VSxHQUdBLE9BRkF1WSxFQUFBLEdBRUEsV0FDQUEsR0FBQSxHQUNBVyxPQWtCQSxPQUFBbkQsR0MvU0EwRSxFQUFBLG1CQUFBam9CLFFBQUEsaUJBQUFBLE9BQUFpZ0IsU0FBQSxTQUFBclksR0FBb0csY0FBQUEsR0FBcUIsU0FBQUEsR0FBbUIsT0FBQUEsR0FBQSxtQkFBQTVILFFBQUE0SCxFQUFBa0UsY0FBQTlMLFFBQUE0SCxJQUFBNUgsT0FBQWEsVUFBQSxnQkFBQStHLEdBRTVJc2dCLEVBQUF2b0IsT0FBQW9PLFFBQUEsU0FBQXhKLEdBQW1ELFFBQUF0RixFQUFBLEVBQWdCQSxFQUFBK0UsVUFBQVIsT0FBc0J2RSxJQUFBLENBQU8sSUFBQWdFLEVBQUFlLFVBQUEvRSxHQUEyQixRQUFBdUIsS0FBQXlDLEVBQTBCdEQsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBNkQsRUFBQXpDLEtBQXlEK0QsRUFBQS9ELEdBQUF5QyxFQUFBekMsSUFBaUMsT0FBQStELEdBTy9PNGpCLEVBQUEsU0FBQXpuQixFQUFBMG5CLEVBQUFDLEdBQ0EsT0FBQTFELEtBQUEyRCxJQUFBM0QsS0FBQTRELElBQUE3bkIsRUFBQTBuQixHQUFBQyxJQWtKQUcsRUE1SUEsV0FDQSxJQUFBdmQsRUFBQWpILFVBQUFSLE9BQUEsUUFBQWhDLElBQUF3QyxVQUFBLEdBQUFBLFVBQUEsTUFDQW1lLEVBQUFsWCxFQUFBa1gsb0JBQ0FzRyxFQUFBeGQsRUFBQXlkLGVBQ0FBLE9BQUFsbkIsSUFBQWluQixHQUFBLEtBQUFBLEVBQ0FFLEVBQUExZCxFQUFBMmQsYUFDQUEsT0FBQXBuQixJQUFBbW5CLEVBQUEsRUFBQUEsRUFDQXZFLEVBQUFuWixFQUFBb1osVUFDQUEsT0FBQTdpQixJQUFBNGlCLEVBQUEsRUFBQUEsRUFHQVMsRUFBQWhELElBRUF2USxFQUFBLFNBQUF5RCxHQUNBbVQsRUFBQTNFLEVBQUF4TyxHQUVBd08sRUFBQS9mLE9BQUErZixFQUFBc0YsUUFBQXJsQixPQUVBcWhCLEVBQUF0QyxnQkFBQWdCLEVBQUFyQyxTQUFBcUMsRUFBQXJCLFNBR0F3QyxFQUFBLFdBQ0EsT0FBQUMsS0FBQUMsU0FBQTNpQixTQUFBLElBQUE4WCxPQUFBLEVBQUFzSyxJQUdBN2EsRUFBQTJlLEVBQUFTLEVBQUEsRUFBQUYsRUFBQWxsQixPQUFBLEdBQ0FxbEIsRUFBQUgsRUFBQXZtQixJQUFBLFNBQUEybUIsR0FDQSxPQUFBekgsRUFBQXlILE9BQUF0bkIsRUFBQSxpQkFBQXNuQixFQUFBcEUsSUFBQW9FLEVBQUF0b0IsS0FBQWtrQixPQUtBbUIsRUFBQTVFLEVBNkNBMEUsRUFBQSxTQUFBamxCLEdBQ0EsSUFBQXFvQixFQUFBWixFQUFBNUUsRUFBQS9aLE1BQUE5SSxFQUFBLEVBQUE2aUIsRUFBQXNGLFFBQUFybEIsT0FBQSxHQUdBMGQsRUFBQXFDLEVBQUFzRixRQUFBRSxHQUVBbEUsRUFBQTVDLG9CQUFBZixFQUhBLE1BR0FpQixFQUFBLFNBQUFnRCxHQUNBQSxFQUNBN1QsR0FDQTRRLE9BTkEsTUFPQWhCLFdBQ0ExWCxNQUFBdWYsSUFLQXpYLE9BMkJBaVMsR0FDQS9mLE9BQUFxbEIsRUFBQXJsQixPQUNBMGUsT0FBQSxNQUNBaEIsU0FBQTJILEVBQUFyZixHQUNBQSxRQUNBcWYsVUFDQWhELGFBQ0FuaUIsS0E3RkEsU0FBQW9WLEVBQUFoSixHQUNBUCxNQUFBLHFCQUFBdUosRUFBQSxZQUFBbVAsRUFBQW5QLFVBQUF0WCxJQUFBc1gsRUFBQWhKLFlBQUF0TyxJQUFBc08sR0FBQSxpSkFFQSxJQUNBb1IsRUFBQUcsRUFBQXZJLEVBQUFoSixFQUFBNFUsSUFBQW5CLEVBQUFyQyxVQUVBMkQsRUFBQTVDLG9CQUFBZixFQUhBLE9BR0FpQixFQUFBLFNBQUFnRCxHQUNBLEdBQUFBLEVBQUEsQ0FFQSxJQUNBNEQsRUFEQXhGLEVBQUEvWixNQUNBLEVBRUF3ZixFQUFBekYsRUFBQXNGLFFBQUFqYixNQUFBLEdBQ0FvYixFQUFBeGxCLE9BQUF1bEIsRUFDQUMsRUFBQWppQixPQUFBZ2lCLEVBQUFDLEVBQUF4bEIsT0FBQXVsQixFQUFBN0gsR0FFQThILEVBQUF0bEIsS0FBQXdkLEdBR0E1UCxHQUNBNFEsT0FqQkEsT0FrQkFoQixXQUNBMVgsTUFBQXVmLEVBQ0FGLFFBQUFHLFFBdUVBcG5CLFFBbEVBLFNBQUFrWCxFQUFBaEosR0FDQVAsTUFBQSxxQkFBQXVKLEVBQUEsWUFBQW1QLEVBQUFuUCxVQUFBdFgsSUFBQXNYLEVBQUFoSixZQUFBdE8sSUFBQXNPLEdBQUEsb0pBRUEsSUFDQW9SLEVBQUFHLEVBQUF2SSxFQUFBaEosRUFBQTRVLElBQUFuQixFQUFBckMsVUFFQTJELEVBQUE1QyxvQkFBQWYsRUFIQSxVQUdBaUIsRUFBQSxTQUFBZ0QsR0FDQUEsSUFFQTVCLEVBQUFzRixRQUFBdEYsRUFBQS9aLE9BQUEwWCxFQUVBNVAsR0FBZ0I0USxPQVJoQixVQVFnQmhCLGlCQXdEaEJ5RSxLQUNBVSxPQWhDQSxXQUNBLE9BQUFWLEdBQUEsSUFnQ0FXLFVBN0JBLFdBQ0EsT0FBQVgsRUFBQSxJQTZCQXNELE1BMUJBLFNBQUF2b0IsR0FDQSxJQUFBcW9CLEVBQUF4RixFQUFBL1osTUFBQTlJLEVBQ0EsT0FBQXFvQixHQUFBLEdBQUFBLEVBQUF4RixFQUFBc0YsUUFBQXJsQixRQXlCQStpQixNQXRCQSxXQUNBLElBQUF6RSxFQUFBOWQsVUFBQVIsT0FBQSxRQUFBaEMsSUFBQXdDLFVBQUEsSUFBQUEsVUFBQSxHQUNBLE9BQUE2Z0IsRUFBQTlDLFVBQUFELElBcUJBMkUsT0FsQkEsU0FBQWpaLEdBQ0EsT0FBQXFYLEVBQUF4QyxlQUFBN1UsS0FvQkEsT0FBQStWLEdDekpBMkYsRUFBQXZwQixPQUFBb08sUUFBQSxTQUFBeEosR0FBbUQsUUFBQXRGLEVBQUEsRUFBZ0JBLEVBQUErRSxVQUFBUixPQUFzQnZFLElBQUEsQ0FBTyxJQUFBZ0UsRUFBQWUsVUFBQS9FLEdBQTJCLFFBQUF1QixLQUFBeUMsRUFBMEJ0RCxPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUE2RCxFQUFBekMsS0FBeUQrRCxFQUFBL0QsR0FBQXlDLEVBQUF6QyxJQUFpQyxPQUFBK0QsR0FJL08sU0FBQW1ILEVBQUFGLEVBQUFwTSxHQUFpRCxJQUFBb00sRUFBYSxVQUFBQyxlQUFBLDZEQUF5RixPQUFBck0sR0FBQSxpQkFBQUEsR0FBQSxtQkFBQUEsRUFBQW9NLEVBQUFwTSxFQWF2SixJQUFBK3BCLEVBQUEsU0FBQUMsR0FHQSxTQUFBQyxJQUNBLElBQUFDLEVBQUEvZCxHQW5CQSxTQUFBSixFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQXFCM0ZDLENBQUFwSixLQUFBbW5CLEdBRUEsUUFBQTdHLEVBQUF4ZSxVQUFBUixPQUFBOUIsRUFBQTRZLE1BQUFrSSxHQUFBQyxFQUFBLEVBQW1FQSxFQUFBRCxFQUFhQyxJQUNoRi9nQixFQUFBK2dCLEdBQUF6ZSxVQUFBeWUsR0FHQSxPQUFBNkcsRUFBQS9kLEVBQUFHLEVBQUF4SixLQUFBa25CLEVBQUFocUIsS0FBQTJFLE1BQUFxbEIsR0FBQWxuQixNQUFBaUIsT0FBQXpCLEtBQUE2SixFQUFBdUUsT0FDQWlHLE1BQUF4SyxFQUFBZ2UsYUFBQWhlLEVBQUFOLE1BQUFzWSxRQUFBckMsU0FBQXBDLFdBQ0twVCxFQUFBSCxFQUFBK2QsR0EwREwsT0FuRkEsU0FBQTFkLEVBQUFDLEdBQTBDLHNCQUFBQSxHQUFBLE9BQUFBLEVBQStELFVBQUFSLFVBQUEsa0VBQUFRLEdBQXVHRCxFQUFBL0ssVUFBQWxCLE9BQUFZLE9BQUFzTCxLQUFBaEwsV0FBeUVpTCxhQUFlNUwsTUFBQTBMLEVBQUEvTCxZQUFBLEVBQUFrTSxVQUFBLEVBQUFDLGNBQUEsS0FBNkVILElBQUFsTSxPQUFBc00sZUFBQXRNLE9BQUFzTSxlQUFBTCxFQUFBQyxHQUFBRCxFQUFBTSxVQUFBTCxHQVlyWE0sQ0FBQWtkLEVBQUFELEdBZ0JBQyxFQUFBeG9CLFVBQUF1TCxnQkFBQSxXQUNBLE9BQ0FvZCxPQUFBTixLQUF5QmhuQixLQUFBZ0osUUFBQXNlLFFBQ3pCakcsUUFBQXJoQixLQUFBK0ksTUFBQXNZLFFBQ0FuSSxPQUNBOEYsU0FBQWhmLEtBQUErSSxNQUFBc1ksUUFBQXJDLFNBQ0FuTCxNQUFBN1QsS0FBQTROLE1BQUFpRyxXQU1Bc1QsRUFBQXhvQixVQUFBMG9CLGFBQUEsU0FBQXpLLEdBQ0EsT0FDQWhHLEtBQUEsSUFDQTJRLElBQUEsSUFDQUMsVUFDQUMsUUFBQSxNQUFBN0ssSUFJQXVLLEVBQUF4b0IsVUFBQStvQixtQkFBQSxXQUNBLElBQUFDLEVBQUEzbkIsS0FFQTRuQixFQUFBNW5CLEtBQUErSSxNQUNBd0IsRUFBQXFkLEVBQUFyZCxTQUNBOFcsRUFBQXVHLEVBQUF2RyxRQUdBRSxJQUFBLE1BQUFoWCxHQUFBLElBQUFzZCxFQUFBNW9CLEVBQUE2b0IsU0FBQUMsTUFBQXhkLEdBQUEsOENBS0F2SyxLQUFBd2tCLFNBQUFuRCxFQUFBa0QsT0FBQSxXQUNBb0QsRUFBQXZZLFVBQ0F5RSxNQUFBOFQsRUFBQU4sYUFBQWhHLEVBQUFyQyxTQUFBcEMsZUFLQXVLLEVBQUF4b0IsVUFBQStQLDBCQUFBLFNBQUFDLEdBQ0FxWixJQUFBaG9CLEtBQUErSSxNQUFBc1ksVUFBQTFTLEVBQUEwUyxRQUFBLHVDQUdBOEYsRUFBQXhvQixVQUFBaVEscUJBQUEsV0FDQTVPLEtBQUF3a0IsWUFHQTJDLEVBQUF4b0IsVUFBQXlMLE9BQUEsV0FDQSxJQUFBRyxFQUFBdkssS0FBQStJLE1BQUF3QixTQUVBLE9BQUFBLEVBQUFzZCxFQUFBNW9CLEVBQUE2b0IsU0FBQXhkLEtBQUFDLEdBQUEsTUFHQTRjLEVBeEVBLENBeUVDVSxFQUFBNW9CLEVBQUFncEIsV0FFRGhCLEVBQUF6YyxXQUNBNlcsUUFBQXhaLEVBQUE1SSxFQUFBUixPQUFBd0osV0FDQXNDLFNBQUExQyxFQUFBNUksRUFBQXloQixNQUVBdUcsRUFBQTlaLGNBQ0FtYSxPQUFBemYsRUFBQTVJLEVBQUFSLFFBRUF3b0IsRUFBQXZjLG1CQUNBNGMsT0FBQXpmLEVBQUE1SSxFQUFBUixPQUFBd0osWUFJQSxJQUFBaWdCLEVBQUEsRUNyR0FDLEVBQUEsRUNEQSxTQUFBQyxFQUFBOWUsRUFBQXBNLEdBQWlELElBQUFvTSxFQUFhLFVBQUFDLGVBQUEsNkRBQXlGLE9BQUFyTSxHQUFBLGlCQUFBQSxHQUFBLG1CQUFBQSxFQUFBb00sRUFBQXBNLEVBY3ZKLElBQUFtckIsRUFBQSxTQUFBbkIsR0FHQSxTQUFBb0IsSUFDQSxJQUFBbEIsRUFBQS9kLEdBcEJBLFNBQUFKLEVBQUFDLEdBQWlELEtBQUFELGFBQUFDLEdBQTBDLFVBQUFDLFVBQUEscUNBc0IzRm9mLENBQUF2b0IsS0FBQXNvQixHQUVBLFFBQUFoSSxFQUFBeGUsVUFBQVIsT0FBQTlCLEVBQUE0WSxNQUFBa0ksR0FBQUMsRUFBQSxFQUFtRUEsRUFBQUQsRUFBYUMsSUFDaEYvZ0IsRUFBQStnQixHQUFBemUsVUFBQXllLEdBR0EsT0FBQTZHLEVBQUEvZCxFQUFBK2UsRUFBQXBvQixLQUFBa25CLEVBQUFocUIsS0FBQTJFLE1BQUFxbEIsR0FBQWxuQixNQUFBaUIsT0FBQXpCLEtBQUE2SixFQUFBZ1ksUUFBQUMsRUFBQWpZLEVBQUFOLE9BQUFxZixFQUFBL2UsRUFBQStkLEdBV0EsT0FuQ0EsU0FBQTFkLEVBQUFDLEdBQTBDLHNCQUFBQSxHQUFBLE9BQUFBLEVBQStELFVBQUFSLFVBQUEsa0VBQUFRLEdBQXVHRCxFQUFBL0ssVUFBQWxCLE9BQUFZLE9BQUFzTCxLQUFBaEwsV0FBeUVpTCxhQUFlNUwsTUFBQTBMLEVBQUEvTCxZQUFBLEVBQUFrTSxVQUFBLEVBQUFDLGNBQUEsS0FBNkVILElBQUFsTSxPQUFBc00sZUFBQXRNLE9BQUFzTSxlQUFBTCxFQUFBQyxHQUFBRCxFQUFBTSxVQUFBTCxHQWFyWDZlLENBQUFGLEVBQUFwQixHQWNBb0IsRUFBQTNwQixVQUFBK29CLG1CQUFBLFdBQ0FNLEtBQUFob0IsS0FBQStJLE1BQUFzWSxRQUFBLGdKQUdBaUgsRUFBQTNwQixVQUFBeUwsT0FBQSxXQUNBLE9BQUF5ZCxFQUFBNW9CLEVBQUE4RixjQUFBb2pCLEdBQXdDOUcsUUFBQXJoQixLQUFBcWhCLFFBQUE5VyxTQUFBdkssS0FBQStJLE1BQUF3QixZQUd4QytkLEVBdkJBLENBd0JDVCxFQUFBNW9CLEVBQUFncEIsV0FFREksRUFBQTdkLFdBQ0E0WCxTQUFBdmEsRUFBQTVJLEVBQUF3cEIsT0FDQXpHLGFBQUFuYSxFQUFBNUksRUFBQXlwQixLQUNBekksb0JBQUFwWSxFQUFBNUksRUFBQStJLEtBQ0FtYSxVQUFBdGEsRUFBQTVJLEVBQUEwcEIsT0FDQXBlLFNBQUExQyxFQUFBNUksRUFBQXloQixNQUlBLElBQUFrSSxFQUFBLEVDakRBLFNBQUFDLEVBQUF2ZixFQUFBcE0sR0FBaUQsSUFBQW9NLEVBQWEsVUFBQUMsZUFBQSw2REFBeUYsT0FBQXJNLEdBQUEsaUJBQUFBLEdBQUEsbUJBQUFBLEVBQUFvTSxFQUFBcE0sRUFjdkosSUFBQTRyQixHQUFBLFNBQUE1QixHQUdBLFNBQUE2QixJQUNBLElBQUEzQixFQUFBL2QsR0FwQkEsU0FBQUosRUFBQUMsR0FBaUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQUMsVUFBQSxxQ0FzQjNGNmYsQ0FBQWhwQixLQUFBK29CLEdBRUEsUUFBQXpJLEVBQUF4ZSxVQUFBUixPQUFBOUIsRUFBQTRZLE1BQUFrSSxHQUFBQyxFQUFBLEVBQW1FQSxFQUFBRCxFQUFhQyxJQUNoRi9nQixFQUFBK2dCLEdBQUF6ZSxVQUFBeWUsR0FHQSxPQUFBNkcsRUFBQS9kLEVBQUF3ZixFQUFBN29CLEtBQUFrbkIsRUFBQWhxQixLQUFBMkUsTUFBQXFsQixHQUFBbG5CLE1BQUFpQixPQUFBekIsS0FBQTZKLEVBQUFnWSxRQUFBOEQsRUFBQTliLEVBQUFOLE9BQUE4ZixFQUFBeGYsRUFBQStkLEdBV0EsT0FuQ0EsU0FBQTFkLEVBQUFDLEdBQTBDLHNCQUFBQSxHQUFBLE9BQUFBLEVBQStELFVBQUFSLFVBQUEsa0VBQUFRLEdBQXVHRCxFQUFBL0ssVUFBQWxCLE9BQUFZLE9BQUFzTCxLQUFBaEwsV0FBeUVpTCxhQUFlNUwsTUFBQTBMLEVBQUEvTCxZQUFBLEVBQUFrTSxVQUFBLEVBQUFDLGNBQUEsS0FBNkVILElBQUFsTSxPQUFBc00sZUFBQXRNLE9BQUFzTSxlQUFBTCxFQUFBQyxHQUFBRCxFQUFBTSxVQUFBTCxHQWFyWHNmLENBQUFGLEVBQUE3QixHQWNBNkIsRUFBQXBxQixVQUFBK29CLG1CQUFBLFdBQ0FNLEtBQUFob0IsS0FBQStJLE1BQUFzWSxRQUFBLDBJQUdBMEgsRUFBQXBxQixVQUFBeUwsT0FBQSxXQUNBLE9BQUF5ZCxFQUFBNW9CLEVBQUE4RixjQUFBb2pCLEdBQXdDOUcsUUFBQXJoQixLQUFBcWhCLFFBQUE5VyxTQUFBdkssS0FBQStJLE1BQUF3QixZQUd4Q3dlLEVBdkJBLENBd0JDbEIsRUFBQTVvQixFQUFBZ3BCLFdBRURhLEdBQUF0ZSxXQUNBNFgsU0FBQXZhLEVBQUE1SSxFQUFBd3BCLE9BQ0F4SSxvQkFBQXBZLEVBQUE1SSxFQUFBK0ksS0FDQXNkLFNBQUF6ZCxFQUFBNUksRUFBQWlxQixPQUFBLCtCQUNBM2UsU0FBQTFDLEVBQUE1SSxFQUFBeWhCLE1BSUEsSUFBQXlJLEdBQUEsR0NsREFDLEdBQUEzckIsT0FBQW9PLFFBQUEsU0FBQXhKLEdBQW1ELFFBQUF0RixFQUFBLEVBQWdCQSxFQUFBK0UsVUFBQVIsT0FBc0J2RSxJQUFBLENBQU8sSUFBQWdFLEVBQUFlLFVBQUEvRSxHQUEyQixRQUFBdUIsS0FBQXlDLEVBQTBCdEQsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBNkQsRUFBQXpDLEtBQXlEK0QsRUFBQS9ELEdBQUF5QyxFQUFBekMsSUFBaUMsT0FBQStELEdBTS9PLFNBQUFnbkIsR0FBQS9mLEVBQUFwTSxHQUFpRCxJQUFBb00sRUFBYSxVQUFBQyxlQUFBLDZEQUF5RixPQUFBck0sR0FBQSxpQkFBQUEsR0FBQSxtQkFBQUEsRUFBQW9NLEVBQUFwTSxFQVN2SixJQUFBb3NCLEdBQUEsU0FBQTNJLEdBQ0EsU0FBQUEsRUFBQTRJLFNBQUE1SSxFQUFBNkksUUFBQTdJLEVBQUE4SSxTQUFBOUksRUFBQStJLFdBT0FDLEdBQUEsU0FBQXpDLEdBR0EsU0FBQTBDLElBQ0EsSUFBQXhDLEVBQUEvZCxHQXZCQSxTQUFBSixFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQXlCM0YwZ0IsQ0FBQTdwQixLQUFBNHBCLEdBRUEsUUFBQXRKLEVBQUF4ZSxVQUFBUixPQUFBOUIsRUFBQTRZLE1BQUFrSSxHQUFBQyxFQUFBLEVBQW1FQSxFQUFBRCxFQUFhQyxJQUNoRi9nQixFQUFBK2dCLEdBQUF6ZSxVQUFBeWUsR0FHQSxPQUFBNkcsRUFBQS9kLEVBQUFnZ0IsR0FBQXJwQixLQUFBa25CLEVBQUFocUIsS0FBQTJFLE1BQUFxbEIsR0FBQWxuQixNQUFBaUIsT0FBQXpCLEtBQUE2SixFQUFBeWdCLFlBQUEsU0FBQW5KLEdBR0EsR0FGQXRYLEVBQUFOLE1BQUFnaEIsU0FBQTFnQixFQUFBTixNQUFBZ2hCLFFBQUFwSixJQUVBQSxFQUFBcUosa0JBQ0EsSUFBQXJKLEVBQUFzSixTQUNBNWdCLEVBQUFOLE1BQUExRyxTQUNBaW5CLEdBQUEzSSxHQUNBLENBQ0FBLEVBQUF1SixpQkFFQSxJQUFBN0ksRUFBQWhZLEVBQUFMLFFBQUFzZSxPQUFBakcsUUFDQThJLEVBQUE5Z0IsRUFBQU4sTUFDQXJKLEVBQUF5cUIsRUFBQXpxQixRQUNBd2QsRUFBQWlOLEVBQUFqTixHQUdBeGQsRUFDQTJoQixFQUFBM2hCLFFBQUF3ZCxHQUVBbUUsRUFBQTdmLEtBQUEwYixLQUdLbU0sR0FBQWhnQixFQUFBK2QsR0FzQkwsT0F2RUEsU0FBQTFkLEVBQUFDLEdBQTBDLHNCQUFBQSxHQUFBLE9BQUFBLEVBQStELFVBQUFSLFVBQUEsa0VBQUFRLEdBQXVHRCxFQUFBL0ssVUFBQWxCLE9BQUFZLE9BQUFzTCxLQUFBaEwsV0FBeUVpTCxhQUFlNUwsTUFBQTBMLEVBQUEvTCxZQUFBLEVBQUFrTSxVQUFBLEVBQUFDLGNBQUEsS0FBNkVILElBQUFsTSxPQUFBc00sZUFBQXRNLE9BQUFzTSxlQUFBTCxFQUFBQyxHQUFBRCxFQUFBTSxVQUFBTCxHQWdCclh5Z0IsQ0FBQVIsRUFBQTFDLEdBb0NBMEMsRUFBQWpyQixVQUFBeUwsT0FBQSxXQUNBLElBQUF3ZCxFQUFBNW5CLEtBQUErSSxNQUVBbVUsR0FEQTBLLEVBQUFsb0IsUUFDQWtvQixFQUFBMUssSUFDQW1OLEVBQUF6QyxFQUFBeUMsU0FDQXRoQixFQS9EQSxTQUFBckQsRUFBQUgsR0FBOEMsSUFBQWxELEtBQWlCLFFBQUF0RixLQUFBMkksRUFBcUJILEVBQUFYLFFBQUE3SCxJQUFBLEdBQW9DVSxPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUF3SSxFQUFBM0ksS0FBNkRzRixFQUFBdEYsR0FBQTJJLEVBQUEzSSxJQUFzQixPQUFBc0YsRUErRDNNNEssQ0FBQTJhLEdBQUEsNEJBRUFyRyxJQUFBdmhCLEtBQUFnSixRQUFBc2UsT0FBQSxnREFFQS9GLFNBQUFqaUIsSUFBQTRkLEVBQUEsc0NBRUEsSUFBQW1FLEVBQUFyaEIsS0FBQWdKLFFBQUFzZSxPQUFBakcsUUFFQXJDLEVBQUEsaUJBQUE5QixFQUFBaUMsRUFBQWpDLEVBQUEsVUFBQW1FLEVBQUFyQyxVQUFBOUIsRUFFQXRXLEVBQUF5YSxFQUFBc0MsV0FBQTNFLEdBQ0EsT0FBQTZJLEVBQUE1b0IsRUFBQThGLGNBQUEsSUFBQXFrQixNQUErQ3JnQixHQUFVZ2hCLFFBQUEvcEIsS0FBQThwQixZQUFBbGpCLE9BQUFtSSxJQUFBc2IsTUFHekRULEVBeERBLENBeURDL0IsRUFBQTVvQixFQUFBZ3BCLFdBRUQwQixHQUFBbmYsV0FDQXVmLFFBQUFsaUIsRUFBQTVJLEVBQUErSSxLQUNBM0YsT0FBQXdGLEVBQUE1SSxFQUFBd3BCLE9BQ0Evb0IsUUFBQW1JLEVBQUE1SSxFQUFBeXBCLEtBQ0F4TCxHQUFBclYsRUFBQTVJLEVBQUFxckIsV0FBQXppQixFQUFBNUksRUFBQXdwQixPQUFBNWdCLEVBQUE1SSxFQUFBUixTQUFBd0osV0FDQW9pQixTQUFBeGlCLEVBQUE1SSxFQUFBcXJCLFdBQUF6aUIsRUFBQTVJLEVBQUF3cEIsT0FBQTVnQixFQUFBNUksRUFBQStJLFFBRUEyaEIsR0FBQWxRLGNBQ0EvWixTQUFBLEdBRUFpcUIsR0FBQXhjLGNBQ0FtYSxPQUFBemYsRUFBQTVJLEVBQUE2SSxPQUNBdVosUUFBQXhaLEVBQUE1SSxFQUFBNkksT0FDQXRHLEtBQUFxRyxFQUFBNUksRUFBQStJLEtBQUFDLFdBQ0F2SSxRQUFBbUksRUFBQTVJLEVBQUErSSxLQUFBQyxXQUNBMGIsV0FBQTliLEVBQUE1SSxFQUFBK0ksS0FBQUMsYUFDS0EsYUFDRkEsWUFJSCxJQUFBc2lCLEdBQUEsR0NyR0EsU0FBQUMsR0FBQWxoQixFQUFBcE0sR0FBaUQsSUFBQW9NLEVBQWEsVUFBQUMsZUFBQSw2REFBeUYsT0FBQXJNLEdBQUEsaUJBQUFBLEdBQUEsbUJBQUFBLEVBQUFvTSxFQUFBcE0sRUFjdkosSUFBQXV0QixHQUFBLFNBQUF2RCxHQUdBLFNBQUF3RCxJQUNBLElBQUF0RCxFQUFBL2QsR0FwQkEsU0FBQUosRUFBQUMsR0FBaUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQUMsVUFBQSxxQ0FzQjNGd2hCLENBQUEzcUIsS0FBQTBxQixHQUVBLFFBQUFwSyxFQUFBeGUsVUFBQVIsT0FBQTlCLEVBQUE0WSxNQUFBa0ksR0FBQUMsRUFBQSxFQUFtRUEsRUFBQUQsRUFBYUMsSUFDaEYvZ0IsRUFBQStnQixHQUFBemUsVUFBQXllLEdBR0EsT0FBQTZHLEVBQUEvZCxFQUFBbWhCLEdBQUF4cUIsS0FBQWtuQixFQUFBaHFCLEtBQUEyRSxNQUFBcWxCLEdBQUFsbkIsTUFBQWlCLE9BQUF6QixLQUFBNkosRUFBQWdZLFFBQUFpRixFQUFBamQsRUFBQU4sT0FBQXloQixHQUFBbmhCLEVBQUErZCxHQVdBLE9BbkNBLFNBQUExZCxFQUFBQyxHQUEwQyxzQkFBQUEsR0FBQSxPQUFBQSxFQUErRCxVQUFBUixVQUFBLGtFQUFBUSxHQUF1R0QsRUFBQS9LLFVBQUFsQixPQUFBWSxPQUFBc0wsS0FBQWhMLFdBQXlFaUwsYUFBZTVMLE1BQUEwTCxFQUFBL0wsWUFBQSxFQUFBa00sVUFBQSxFQUFBQyxjQUFBLEtBQTZFSCxJQUFBbE0sT0FBQXNNLGVBQUF0TSxPQUFBc00sZUFBQUwsRUFBQUMsR0FBQUQsRUFBQU0sVUFBQUwsR0FhclhpaEIsQ0FBQUYsRUFBQXhELEdBY0F3RCxFQUFBL3JCLFVBQUErb0IsbUJBQUEsV0FDQU0sS0FBQWhvQixLQUFBK0ksTUFBQXNZLFFBQUEsOElBR0FxSixFQUFBL3JCLFVBQUF5TCxPQUFBLFdBQ0EsT0FBQXlkLEVBQUE1b0IsRUFBQThGLGNBQUFtakIsR0FBd0M3RyxRQUFBcmhCLEtBQUFxaEIsUUFBQTlXLFNBQUF2SyxLQUFBK0ksTUFBQXdCLFlBR3hDbWdCLEVBdkJBLENBd0JDN0MsRUFBQTVvQixFQUFBZ3BCLFdBRUR3QyxHQUFBamdCLFdBQ0FnYyxlQUFBM2UsRUFBQTVJLEVBQUE0ckIsTUFDQW5FLGFBQUE3ZSxFQUFBNUksRUFBQTBwQixPQUNBMUksb0JBQUFwWSxFQUFBNUksRUFBQStJLEtBQ0FtYSxVQUFBdGEsRUFBQTVJLEVBQUEwcEIsT0FDQXBlLFNBQUExQyxFQUFBNUksRUFBQXloQixNQUlBLElDaERBb0ssR0RnREEsdUJFakRBQyxNQUVBQyxHQUFBLEVBbUVBQyxHQTVDQSxTQUFBck8sR0FDQSxJQUFBMVosRUFBQXBCLFVBQUFSLE9BQUEsUUFBQWhDLElBQUF3QyxVQUFBLEdBQUFBLFVBQUEsTUFDQVEsRUFBQVIsVUFBQSxHQUVBLGlCQUFBb0IsT0FBOEMwVCxLQUFBMVQsSUFFOUMsSUFBQWdvQixFQUFBaG9CLEVBQ0EwVCxFQUFBc1UsRUFBQXRVLEtBQ0F1VSxFQUFBRCxFQUFBRSxNQUNBQSxPQUFBOXJCLElBQUE2ckIsS0FDQUUsRUFBQUgsRUFBQWxTLE9BQ0FBLE9BQUExWixJQUFBK3JCLEtBQ0FDLEVBQUFKLEVBQUFuUyxVQUNBQSxPQUFBelosSUFBQWdzQixLQUdBLFNBQUExVSxFQUFBLE9BQUF0VSxFQUVBLElBQUFpcEIsRUF2Q0EsU0FBQTdULEVBQUF4VSxHQUNBLElBQUFzb0IsRUFBQSxHQUFBdG9CLEVBQUErVixJQUFBL1YsRUFBQThWLE9BQUE5VixFQUFBNlYsVUFDQTBTLEVBQUFWLEdBQUFTLEtBQUFULEdBQUFTLE9BRUEsR0FBQUMsRUFBQS9ULEdBQUEsT0FBQStULEVBQUEvVCxHQUVBLElBQUFuUyxLQUVBbW1CLEdBQXlCN1MsR0FEekI4UyxLQUFBalUsRUFBQW5TLEVBQUFyQyxHQUN5QnFDLFFBT3pCLE9BTEF5bEIsR0FiQSxNQWNBUyxFQUFBL1QsR0FBQWdVLEVBQ0FWLE1BR0FVLEVBd0JBRSxDQUFBaFYsR0FBd0NxQyxJQUFBbVMsRUFBQXBTLFNBQUFELGNBQ3hDRixFQUFBMFMsRUFBQTFTLEdBQ0F0VCxFQUFBZ21CLEVBQUFobUIsS0FFQXNPLEVBQUFnRixFQUFBOUIsS0FBQTZGLEdBRUEsSUFBQS9JLEVBQUEsWUFFQSxJQUFBMFQsRUFBQTFULEVBQUEsR0FDQWdZLEVBQUFoWSxFQUFBbkksTUFBQSxHQUVBK2IsRUFBQTdLLElBQUEySyxFQUVBLE9BQUE2RCxJQUFBM0QsRUFBQSxNQUdBN1EsT0FDQTJRLElBQUEsTUFBQTNRLEdBQUEsS0FBQTJRLEVBQUEsSUFBQUEsRUFDQUUsVUFDQUQsT0FBQWppQixFQUFBNlcsT0FBQSxTQUFBeGEsRUFBQXRELEVBQUFnSixHQUVBLE9BREExRixFQUFBdEQsRUFBQWhCLE1BQUF1dUIsRUFBQXZrQixHQUNBMUYsU0NsRUFrcUIsR0FBQXJ1QixPQUFBb08sUUFBQSxTQUFBeEosR0FBbUQsUUFBQXRGLEVBQUEsRUFBZ0JBLEVBQUErRSxVQUFBUixPQUFzQnZFLElBQUEsQ0FBTyxJQUFBZ0UsRUFBQWUsVUFBQS9FLEdBQTJCLFFBQUF1QixLQUFBeUMsRUFBMEJ0RCxPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUE2RCxFQUFBekMsS0FBeUQrRCxFQUFBL0QsR0FBQXlDLEVBQUF6QyxJQUFpQyxPQUFBK0QsR0FJL08sU0FBQTBwQixHQUFBemlCLEVBQUFwTSxHQUFpRCxJQUFBb00sRUFBYSxVQUFBQyxlQUFBLDZEQUF5RixPQUFBck0sR0FBQSxpQkFBQUEsR0FBQSxtQkFBQUEsRUFBQW9NLEVBQUFwTSxFQVV2SixJQUFBOHVCLEdBQUEsU0FBQXpoQixHQUNBLFdBQUFzZCxFQUFBNW9CLEVBQUE2b0IsU0FBQUMsTUFBQXhkLElBT0EwaEIsR0FBQSxTQUFBL0UsR0FHQSxTQUFBZ0YsSUFDQSxJQUFBOUUsRUFBQS9kLEdBeEJBLFNBQUFKLEVBQUFDLEdBQWlELEtBQUFELGFBQUFDLEdBQTBDLFVBQUFDLFVBQUEscUNBMEIzRmdqQixDQUFBbnNCLEtBQUFrc0IsR0FFQSxRQUFBNUwsRUFBQXhlLFVBQUFSLE9BQUE5QixFQUFBNFksTUFBQWtJLEdBQUFDLEVBQUEsRUFBbUVBLEVBQUFELEVBQWFDLElBQ2hGL2dCLEVBQUErZ0IsR0FBQXplLFVBQUF5ZSxHQUdBLE9BQUE2RyxFQUFBL2QsRUFBQTBpQixHQUFBL3JCLEtBQUFrbkIsRUFBQWhxQixLQUFBMkUsTUFBQXFsQixHQUFBbG5CLE1BQUFpQixPQUFBekIsS0FBQTZKLEVBQUF1RSxPQUNBaUcsTUFBQXhLLEVBQUFnZSxhQUFBaGUsRUFBQU4sTUFBQU0sRUFBQUwsUUFBQXNlLFNBQ0t5RSxHQUFBMWlCLEVBQUErZCxHQTRFTCxPQTFHQSxTQUFBMWQsRUFBQUMsR0FBMEMsc0JBQUFBLEdBQUEsT0FBQUEsRUFBK0QsVUFBQVIsVUFBQSxrRUFBQVEsR0FBdUdELEVBQUEvSyxVQUFBbEIsT0FBQVksT0FBQXNMLEtBQUFoTCxXQUF5RWlMLGFBQWU1TCxNQUFBMEwsRUFBQS9MLFlBQUEsRUFBQWtNLFVBQUEsRUFBQUMsY0FBQSxLQUE2RUgsSUFBQWxNLE9BQUFzTSxlQUFBdE0sT0FBQXNNLGVBQUFMLEVBQUFDLEdBQUFELEVBQUFNLFVBQUFMLEdBaUJyWHlpQixDQUFBRixFQUFBaEYsR0FnQkFnRixFQUFBdnRCLFVBQUF1TCxnQkFBQSxXQUNBLE9BQ0FvZCxPQUFBd0UsTUFBeUI5ckIsS0FBQWdKLFFBQUFzZSxRQUN6QnBPLE9BQ0E4RixTQUFBaGYsS0FBQStJLE1BQUFpVyxVQUFBaGYsS0FBQWdKLFFBQUFzZSxPQUFBcE8sTUFBQThGLFNBQ0FuTCxNQUFBN1QsS0FBQTROLE1BQUFpRyxXQU1BcVksRUFBQXZ0QixVQUFBMG9CLGFBQUEsU0FBQWxkLEVBQUFtZCxHQUNBLElBQUErRSxFQUFBbGlCLEVBQUFraUIsY0FDQXJOLEVBQUE3VSxFQUFBNlUsU0FDQXBJLEVBQUF6TSxFQUFBeU0sS0FDQW9DLEVBQUE3TyxFQUFBNk8sT0FDQW9TLEVBQUFqaEIsRUFBQWloQixNQUNBclMsRUFBQTVPLEVBQUE0TyxVQUVBLEdBQUFzVCxFQUFBLE9BQUFBLEVBRUE5SyxJQUFBK0YsRUFBQSxpRUFFQSxJQUFBcE8sRUFBQW9PLEVBQUFwTyxNQUVBMEQsR0FBQW9DLEdBQUE5RixFQUFBOEYsVUFBQXBDLFNBRUEsT0FBQXFPLEdBQUFyTyxHQUFnQ2hHLE9BQUFvQyxTQUFBb1MsUUFBQXJTLGFBQWlFRyxFQUFBckYsUUFHakdxWSxFQUFBdnRCLFVBQUErb0IsbUJBQUEsV0FDQU0sTUFBQWhvQixLQUFBK0ksTUFBQXVqQixXQUFBdHNCLEtBQUErSSxNQUFBcUIsUUFBQSw2R0FFQTRkLE1BQUFob0IsS0FBQStJLE1BQUF1akIsV0FBQXRzQixLQUFBK0ksTUFBQXdCLFdBQUF5aEIsR0FBQWhzQixLQUFBK0ksTUFBQXdCLFdBQUEsaUhBRUF5ZCxNQUFBaG9CLEtBQUErSSxNQUFBcUIsUUFBQXBLLEtBQUErSSxNQUFBd0IsV0FBQXloQixHQUFBaHNCLEtBQUErSSxNQUFBd0IsV0FBQSwrR0FHQTJoQixFQUFBdnRCLFVBQUErUCwwQkFBQSxTQUFBQyxFQUFBNGQsR0FDQXZFLE1BQUFyWixFQUFBcVEsV0FBQWhmLEtBQUErSSxNQUFBaVcsVUFBQSwyS0FFQWdKLE9BQUFyWixFQUFBcVEsVUFBQWhmLEtBQUErSSxNQUFBaVcsVUFBQSx1S0FFQWhmLEtBQUFvUCxVQUNBeUUsTUFBQTdULEtBQUFxbkIsYUFBQTFZLEVBQUE0ZCxFQUFBakYsV0FJQTRFLEVBQUF2dEIsVUFBQXlMLE9BQUEsV0FDQSxJQUFBeUosRUFBQTdULEtBQUE0TixNQUFBaUcsTUFDQStULEVBQUE1bkIsS0FBQStJLE1BQ0F3QixFQUFBcWQsRUFBQXJkLFNBQ0EraEIsRUFBQTFFLEVBQUEwRSxVQUNBbGlCLEVBQUF3ZCxFQUFBeGQsT0FDQW9pQixFQUFBeHNCLEtBQUFnSixRQUFBc2UsT0FDQWpHLEVBQUFtTCxFQUFBbkwsUUFDQW5JLEVBQUFzVCxFQUFBdFQsTUFDQXVULEVBQUFELEVBQUFDLGNBR0ExakIsR0FBaUI4SyxRQUFBbUwsU0FEakJoZixLQUFBK0ksTUFBQWlXLFVBQUE5RixFQUFBOEYsU0FDaUJxQyxVQUFBb0wsaUJBRWpCLE9BQUFILEVBQUF6WSxFQUFBZ1UsRUFBQTVvQixFQUFBOEYsY0FBQXVuQixFQUFBdmpCLEdBQUEsS0FFQXFCLEVBQUF5SixFQUFBekosRUFBQXJCLEdBQUEsS0FFQSxtQkFBQXdCLElBQUF4QixHQUVBd0IsSUFBQXloQixHQUFBemhCLEdBQUFzZCxFQUFBNW9CLEVBQUE2b0IsU0FBQXhkLEtBQUFDLEdBRUEsTUFHQTJoQixFQTFGQSxDQTJGQ3JFLEVBQUE1b0IsRUFBQWdwQixXQUVEZ0UsR0FBQXpoQixXQUNBNmhCLGNBQUF4a0IsRUFBQTVJLEVBQUFSLE9BQ0FtWSxLQUFBL08sRUFBQTVJLEVBQUF3cEIsT0FDQTJDLE1BQUF2akIsRUFBQTVJLEVBQUF5cEIsS0FDQTFQLE9BQUFuUixFQUFBNUksRUFBQXlwQixLQUNBM1AsVUFBQWxSLEVBQUE1SSxFQUFBeXBCLEtBQ0E0RCxVQUFBemtCLEVBQUE1SSxFQUFBK0ksS0FDQW9DLE9BQUF2QyxFQUFBNUksRUFBQStJLEtBQ0F1QyxTQUFBMUMsRUFBQTVJLEVBQUFxckIsV0FBQXppQixFQUFBNUksRUFBQStJLEtBQUFILEVBQUE1SSxFQUFBeWhCLE9BQ0ExQixTQUFBblgsRUFBQTVJLEVBQUFSLFFBRUF3dEIsR0FBQTllLGNBQ0FtYSxPQUFBemYsRUFBQTVJLEVBQUE2SSxPQUNBdVosUUFBQXhaLEVBQUE1SSxFQUFBUixPQUFBd0osV0FDQWlSLE1BQUFyUixFQUFBNUksRUFBQVIsT0FBQXdKLFdBQ0F3a0IsY0FBQTVrQixFQUFBNUksRUFBQVIsVUFHQXd0QixHQUFBdmhCLG1CQUNBNGMsT0FBQXpmLEVBQUE1SSxFQUFBUixPQUFBd0osWUFJQSxJQUFBeWtCLEdBQUEsR0N2SUFDLEdBQUEsR0NIQUMsR0FBQW52QixPQUFBb08sUUFBQSxTQUFBeEosR0FBbUQsUUFBQXRGLEVBQUEsRUFBZ0JBLEVBQUErRSxVQUFBUixPQUFzQnZFLElBQUEsQ0FBTyxJQUFBZ0UsRUFBQWUsVUFBQS9FLEdBQTJCLFFBQUF1QixLQUFBeUMsRUFBMEJ0RCxPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUE2RCxFQUFBekMsS0FBeUQrRCxFQUFBL0QsR0FBQXlDLEVBQUF6QyxJQUFpQyxPQUFBK0QsR0FFL093cUIsR0FBQSxtQkFBQS91QixRQUFBLGlCQUFBQSxPQUFBaWdCLFNBQUEsU0FBQXJZLEdBQW9HLGNBQUFBLEdBQXFCLFNBQUFBLEdBQW1CLE9BQUFBLEdBQUEsbUJBQUE1SCxRQUFBNEgsRUFBQWtFLGNBQUE5TCxRQUFBNEgsSUFBQTVILE9BQUFhLFVBQUEsZ0JBQUErRyxHQVk1SSxJQUFBb25CLEdBQUEsU0FBQTNpQixHQUNBLElBQUErUyxFQUFBL1MsRUFBQStTLEdBQ0FrTyxFQUFBamhCLEVBQUFpaEIsTUFDQXBTLEVBQUE3TyxFQUFBNk8sT0FDQWdHLEVBQUE3VSxFQUFBNlUsU0FDQStOLEVBQUE1aUIsRUFBQTRpQixnQkFDQUMsRUFBQTdpQixFQUFBNmlCLFVBQ0FDLEVBQUE5aUIsRUFBQThpQixZQUNBbHBCLEVBQUFvRyxFQUFBcEcsTUFDQW1wQixFQUFBL2lCLEVBQUFpVyxTQUNBK00sRUFBQWhqQixFQUFBLGdCQUNBaWpCLEVBckJBLFNBQUExbkIsRUFBQUgsR0FBOEMsSUFBQWxELEtBQWlCLFFBQUF0RixLQUFBMkksRUFBcUJILEVBQUFYLFFBQUE3SCxJQUFBLEdBQW9DVSxPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUF3SSxFQUFBM0ksS0FBNkRzRixFQUFBdEYsR0FBQTJJLEVBQUEzSSxJQUFzQixPQUFBc0YsRUFxQjNNZ3JCLENBQUFsakIsR0FBQSxpSEFFQXlNLEVBQUEscUJBQUFzRyxFQUFBLFlBQUEyUCxHQUFBM1AsTUFBQU4sU0FBQU0sRUFHQW9RLEVBQUExVyxLQUFBbFgsUUFBQSw0QkFBdUQsUUFFdkQsT0FBQW1vQixFQUFBNW9CLEVBQUE4RixjQUFBNG5CLElBQ0EvVixLQUFBMFcsRUFDQWxDLFFBQ0FwUyxTQUNBZ0csV0FDQXpVLFNBQUEsU0FBQTRELEdBQ0EsSUFBQTZRLEVBQUE3USxFQUFBNlEsU0FDQW5MLEVBQUExRixFQUFBMEYsTUFFQXVNLEtBQUE4TSxJQUFBclosRUFBQW1MLEdBQUFuTCxHQUVBLE9BQUFnVSxFQUFBNW9CLEVBQUE4RixjQUFBd2xCLEdBQUFxQyxJQUNBMVAsS0FDQThQLFVBQUE1TSxHQUFBNE0sRUFBQUQsR0FBQXZsQixPQUFBLFNBQUF6SyxHQUNBLE9BQUFBLElBQ1NtRSxLQUFBLEtBQUE4ckIsRUFDVGpwQixNQUFBcWMsRUFBQXdNLE1BQXFDN29CLEVBQUFrcEIsR0FBQWxwQixFQUNyQ3dwQixlQUFBbk4sR0FBQStNLEdBQUEsTUFDT0MsUUFLUE4sR0FBQXRpQixXQUNBMFMsR0FBQXFOLEdBQUEvZixVQUFBMFMsR0FDQWtPLE1BQUF2akIsRUFBQTVJLEVBQUF5cEIsS0FDQTFQLE9BQUFuUixFQUFBNUksRUFBQXlwQixLQUNBMUosU0FBQW5YLEVBQUE1SSxFQUFBUixPQUNBc3VCLGdCQUFBbGxCLEVBQUE1SSxFQUFBd3BCLE9BQ0F1RSxVQUFBbmxCLEVBQUE1SSxFQUFBd3BCLE9BQ0F3RSxZQUFBcGxCLEVBQUE1SSxFQUFBUixPQUNBc0YsTUFBQThELEVBQUE1SSxFQUFBUixPQUNBMmhCLFNBQUF2WSxFQUFBNUksRUFBQStJLEtBQ0F1bEIsZUFBQTFsQixFQUFBNUksRUFBQWlxQixPQUFBLGlEQUdBNEQsR0FBQXJULGNBQ0FzVCxnQkFBQSxTQUNBUSxlQUFBLFFBR0EsSUFBQUMsR0FBQSxHQzFEQSxJQUFBQyxHQUFBLFNBQUF2RyxHQUdBLFNBQUF3RyxJQUdBLE9BckJBLFNBQUF6a0IsRUFBQUMsR0FBaUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQUMsVUFBQSxxQ0FtQjNGd2tCLENBQUEzdEIsS0FBQTB0QixHQWpCQSxTQUFBcGtCLEVBQUFwTSxHQUFpRCxJQUFBb00sRUFBYSxVQUFBQyxlQUFBLDZEQUF5RixPQUFBck0sR0FBQSxpQkFBQUEsR0FBQSxtQkFBQUEsRUFBQW9NLEVBQUFwTSxFQW1Cdkowd0IsQ0FBQTV0QixLQUFBa25CLEVBQUFybEIsTUFBQTdCLEtBQUE4QixZQXNDQSxPQXZEQSxTQUFBNEgsRUFBQUMsR0FBMEMsc0JBQUFBLEdBQUEsT0FBQUEsRUFBK0QsVUFBQVIsVUFBQSxrRUFBQVEsR0FBdUdELEVBQUEvSyxVQUFBbEIsT0FBQVksT0FBQXNMLEtBQUFoTCxXQUF5RWlMLGFBQWU1TCxNQUFBMEwsRUFBQS9MLFlBQUEsRUFBQWtNLFVBQUEsRUFBQUMsY0FBQSxLQUE2RUgsSUFBQWxNLE9BQUFzTSxlQUFBdE0sT0FBQXNNLGVBQUFMLEVBQUFDLEdBQUFELEVBQUFNLFVBQUFMLEdBWXJYa2tCLENBQUFILEVBQUF4RyxHQVFBd0csRUFBQS91QixVQUFBbXZCLE9BQUEsU0FBQTlNLEdBQ0FoaEIsS0FBQXNrQixTQUFBdGtCLEtBQUFza0IsVUFFQXRrQixLQUFBc2tCLFFBQUF0a0IsS0FBQWdKLFFBQUFzZSxPQUFBakcsUUFBQWdELE1BQUFyRCxJQUdBME0sRUFBQS91QixVQUFBb3ZCLFFBQUEsV0FDQS90QixLQUFBc2tCLFVBQ0F0a0IsS0FBQXNrQixVQUNBdGtCLEtBQUFza0IsUUFBQSxPQUlBb0osRUFBQS91QixVQUFBK29CLG1CQUFBLFdBQ0FuRyxJQUFBdmhCLEtBQUFnSixRQUFBc2UsT0FBQSxrREFFQXRuQixLQUFBK0ksTUFBQWlsQixNQUFBaHVCLEtBQUE4dEIsT0FBQTl0QixLQUFBK0ksTUFBQWlZLFVBR0EwTSxFQUFBL3VCLFVBQUErUCwwQkFBQSxTQUFBQyxHQUNBQSxFQUFBcWYsS0FDQWh1QixLQUFBK0ksTUFBQWlsQixNQUFBaHVCLEtBQUErSSxNQUFBaVksVUFBQXJTLEVBQUFxUyxTQUFBaGhCLEtBQUE4dEIsT0FBQW5mLEVBQUFxUyxTQUVBaGhCLEtBQUErdEIsV0FJQUwsRUFBQS91QixVQUFBaVEscUJBQUEsV0FDQTVPLEtBQUErdEIsV0FHQUwsRUFBQS91QixVQUFBeUwsT0FBQSxXQUNBLGFBR0FzakIsRUE1Q0EsQ0E2Q0M3RixFQUFBNW9CLEVBQUFncEIsV0FFRHdGLEdBQUFqakIsV0FDQXdqQixLQUFBbm1CLEVBQUE1SSxFQUFBeXBCLEtBQ0ExSCxRQUFBblosRUFBQTVJLEVBQUFxckIsV0FBQXppQixFQUFBNUksRUFBQStJLEtBQUFILEVBQUE1SSxFQUFBd3BCLFNBQUF4Z0IsWUFFQXdsQixHQUFBaFUsY0FDQXVVLE1BQUEsR0FFQVAsR0FBQXRnQixjQUNBbWEsT0FBQXpmLEVBQUE1SSxFQUFBNkksT0FDQXVaLFFBQUF4WixFQUFBNUksRUFBQTZJLE9BQ0F1YyxNQUFBeGMsRUFBQTVJLEVBQUErSSxLQUFBQyxhQUNLQSxhQUNGQSxZQUlILElDM0VBZ21CLEdEMkVBLEdFNUVBQyxNQUVBQyxHQUFBLEVBZ0NBQyxHQVhBLFdBQ0EsSUFBQTFXLEVBQUE1VixVQUFBUixPQUFBLFFBQUFoQyxJQUFBd0MsVUFBQSxHQUFBQSxVQUFBLE9BQ0EwbEIsRUFBQTFsQixVQUFBUixPQUFBLFFBQUFoQyxJQUFBd0MsVUFBQSxHQUFBQSxVQUFBLE1BRUEsWUFBQTRWLEVBQ0FBLEVBeEJBLFNBQUFBLEdBQ0EsSUFBQThULEVBQUE5VCxFQUNBK1QsRUFBQXlDLEdBQUExQyxLQUFBMEMsR0FBQTFDLE9BRUEsR0FBQUMsRUFBQS9ULEdBQUEsT0FBQStULEVBQUEvVCxHQUVBLElBQUEyVyxFQUFBMUMsR0FBQTFzQixFQUFBbVgsUUFBQXNCLEdBT0EsT0FMQXlXLEdBWEEsTUFZQTFDLEVBQUEvVCxHQUFBMlcsRUFDQUYsTUFHQUUsRUFhQUMsQ0FBQTVXLEVBQ0E2VyxDQUFBL0csR0FBNEJoUCxRQUFBLEtDakM1QmdXLEdBQUEvd0IsT0FBQW9PLFFBQUEsU0FBQXhKLEdBQW1ELFFBQUF0RixFQUFBLEVBQWdCQSxFQUFBK0UsVUFBQVIsT0FBc0J2RSxJQUFBLENBQU8sSUFBQWdFLEVBQUFlLFVBQUEvRSxHQUEyQixRQUFBdUIsS0FBQXlDLEVBQTBCdEQsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBNkQsRUFBQXpDLEtBQXlEK0QsRUFBQS9ELEdBQUF5QyxFQUFBekMsSUFBaUMsT0FBQStELEdBb0IvTyxJQUFBb3NCLEdBQUEsU0FBQXZILEdBR0EsU0FBQXdILElBR0EsT0F4QkEsU0FBQXpsQixFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQXNCM0Z3bEIsQ0FBQTN1QixLQUFBMHVCLEdBcEJBLFNBQUFwbEIsRUFBQXBNLEdBQWlELElBQUFvTSxFQUFhLFVBQUFDLGVBQUEsNkRBQXlGLE9BQUFyTSxHQUFBLGlCQUFBQSxHQUFBLG1CQUFBQSxFQUFBb00sRUFBQXBNLEVBc0J2SjB4QixDQUFBNXVCLEtBQUFrbkIsRUFBQXJsQixNQUFBN0IsS0FBQThCLFlBK0RBLE9BbkZBLFNBQUE0SCxFQUFBQyxHQUEwQyxzQkFBQUEsR0FBQSxPQUFBQSxFQUErRCxVQUFBUixVQUFBLGtFQUFBUSxHQUF1R0QsRUFBQS9LLFVBQUFsQixPQUFBWSxPQUFBc0wsS0FBQWhMLFdBQXlFaUwsYUFBZTVMLE1BQUEwTCxFQUFBL0wsWUFBQSxFQUFBa00sVUFBQSxFQUFBQyxjQUFBLEtBQTZFSCxJQUFBbE0sT0FBQXNNLGVBQUF0TSxPQUFBc00sZUFBQUwsRUFBQUMsR0FBQUQsRUFBQU0sVUFBQUwsR0FlclhrbEIsQ0FBQUgsRUFBQXhILEdBUUF3SCxFQUFBL3ZCLFVBQUFtd0IsU0FBQSxXQUNBLE9BQUE5dUIsS0FBQWdKLFFBQUFzZSxRQUFBdG5CLEtBQUFnSixRQUFBc2UsT0FBQW1GLGVBR0FpQyxFQUFBL3ZCLFVBQUErb0IsbUJBQUEsV0FDQW5HLElBQUF2aEIsS0FBQWdKLFFBQUFzZSxPQUFBLG9EQUVBdG5CLEtBQUE4dUIsWUFBQTl1QixLQUFBK3VCLFdBR0FMLEVBQUEvdkIsVUFBQTBQLGtCQUFBLFdBQ0FyTyxLQUFBOHVCLFlBQUE5dUIsS0FBQSt1QixXQUdBTCxFQUFBL3ZCLFVBQUF1USxtQkFBQSxTQUFBOGYsR0FDQSxJQUFBQyxFQUFBOVAsRUFBQTZQLEVBQUE5UixJQUNBZ1MsRUFBQS9QLEVBQUFuZixLQUFBK0ksTUFBQW1VLElBRUF3QyxFQUFBdVAsRUFBQUMsR0FDQWxILEtBQUEsb0VBQUFrSCxFQUFBdFMsU0FBQXNTLEVBQUFqUSxPQUFBLEtBSUFqZixLQUFBK3VCLFdBR0FMLEVBQUEvdkIsVUFBQXd3QixVQUFBLFNBQUFobEIsR0FDQSxJQUFBa2lCLEVBQUFsaUIsRUFBQWtpQixjQUNBblAsRUFBQS9TLEVBQUErUyxHQUVBLE9BQUFtUCxFQUNBLGlCQUFBblAsRUFDQWtSLEdBQUFsUixFQUFBbVAsRUFBQTdFLFFBRUFnSCxNQUEwQnRSLEdBQzFCTixTQUFBd1IsR0FBQWxSLEVBQUFOLFNBQUF5UCxFQUFBN0UsVUFLQXRLLEdBR0F3UixFQUFBL3ZCLFVBQUFvd0IsUUFBQSxXQUNBLElBQUExTixFQUFBcmhCLEtBQUFnSixRQUFBc2UsT0FBQWpHLFFBQ0E3ZixFQUFBeEIsS0FBQStJLE1BQUF2SCxLQUVBMGIsRUFBQWxkLEtBQUFtdkIsVUFBQW52QixLQUFBK0ksT0FFQXZILEVBQ0E2ZixFQUFBN2YsS0FBQTBiLEdBRUFtRSxFQUFBM2hCLFFBQUF3ZCxJQUlBd1IsRUFBQS92QixVQUFBeUwsT0FBQSxXQUNBLGFBR0Fza0IsRUFyRUEsQ0FzRUM3RyxFQUFBNW9CLEVBQUFncEIsV0FFRHdHLEdBQUFqa0IsV0FDQTZoQixjQUFBeGtCLEVBQUE1SSxFQUFBUixPQUNBK0MsS0FBQXFHLEVBQUE1SSxFQUFBeXBCLEtBQ0F2TCxLQUFBdFYsRUFBQTVJLEVBQUF3cEIsT0FDQXZMLEdBQUFyVixFQUFBNUksRUFBQXFyQixXQUFBemlCLEVBQUE1SSxFQUFBd3BCLE9BQUE1Z0IsRUFBQTVJLEVBQUFSLFNBQUF3SixZQUVBd21CLEdBQUFoVixjQUNBalksTUFBQSxHQUVBaXRCLEdBQUF0aEIsY0FDQW1hLE9BQUF6ZixFQUFBNUksRUFBQTZJLE9BQ0F1WixRQUFBeFosRUFBQTVJLEVBQUE2SSxPQUNBdEcsS0FBQXFHLEVBQUE1SSxFQUFBK0ksS0FBQUMsV0FDQXZJLFFBQUFtSSxFQUFBNUksRUFBQStJLEtBQUFDLGFBQ0tBLFdBQ0x3a0IsY0FBQTVrQixFQUFBNUksRUFBQVIsU0FDR3dKLFlBSUgsSUM3R0FtbkIsR0Q2R0EsR0VoSEFDLEdBQUE1eEIsT0FBQW9PLFFBQUEsU0FBQXhKLEdBQW1ELFFBQUF0RixFQUFBLEVBQWdCQSxFQUFBK0UsVUFBQVIsT0FBc0J2RSxJQUFBLENBQU8sSUFBQWdFLEVBQUFlLFVBQUEvRSxHQUEyQixRQUFBdUIsS0FBQXlDLEVBQTBCdEQsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBNkQsRUFBQXpDLEtBQXlEK0QsRUFBQS9ELEdBQUF5QyxFQUFBekMsSUFBaUMsT0FBQStELEdBTS9PLFNBQUFpdEIsR0FBQWhtQixFQUFBcE0sR0FBaUQsSUFBQW9NLEVBQWEsVUFBQUMsZUFBQSw2REFBeUYsT0FBQXJNLEdBQUEsaUJBQUFBLEdBQUEsbUJBQUFBLEVBQUFvTSxFQUFBcE0sRUFXdkosSUFBQXF5QixHQUFBLFNBQUEzWSxHQUNBLFlBQUFBLEVBQUFpRyxPQUFBLEdBQUFqRyxFQUFBLElBQUFBLEdBR0E0WSxHQUFBLFNBQUFwTixFQUFBcEQsR0FDQSxPQUFBb0QsRUFFQWlOLE1BQW9CclEsR0FDcEJwQyxTQUFBMlMsR0FBQW5OLEdBQUFwRCxFQUFBcEMsV0FIQW9DLEdBbUJBeVEsR0FBQSxTQUFBelEsR0FDQSx1QkFBQUEsSUFBQUQsRUFBQUMsSUFHQTBRLEdBQUEsU0FBQWxqQixHQUNBLGtCQUNBK1UsS0FBQSxzQ0FBQS9VLEtBSUFSLEdBQUEsYUFTQTJqQixHQUFBLFNBQUF6SSxHQUdBLFNBQUEwSSxJQUNBLElBQUF4SSxFQUFBL2QsR0E1REEsU0FBQUosRUFBQUMsR0FBaUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQUMsVUFBQSxxQ0E4RDNGMG1CLENBQUE3dkIsS0FBQTR2QixHQUVBLFFBQUF0UCxFQUFBeGUsVUFBQVIsT0FBQTlCLEVBQUE0WSxNQUFBa0ksR0FBQUMsRUFBQSxFQUFtRUEsRUFBQUQsRUFBYUMsSUFDaEYvZ0IsRUFBQStnQixHQUFBemUsVUFBQXllLEdBR0EsT0FBQTZHLEVBQUEvZCxFQUFBaW1CLEdBQUF0dkIsS0FBQWtuQixFQUFBaHFCLEtBQUEyRSxNQUFBcWxCLEdBQUFsbkIsTUFBQWlCLE9BQUF6QixLQUFBNkosRUFBQXNhLFdBQUEsU0FBQS9NLEdBQ0EsT0FBQTJZLEdBQUFsbUIsRUFBQU4sTUFBQXFaLFNBQUFxTixHQUFBN1ksS0FDS3ZOLEVBQUF5bUIsV0FBQSxTQUFBOVEsR0FDTCxJQUFBbUwsRUFBQTlnQixFQUFBTixNQUNBcVosRUFBQStILEVBQUEvSCxTQUNBcFosRUFBQW1oQixFQUFBbmhCLFFBRUFBLEVBQUFnWCxPQUFBLE9BQ0FoWCxFQUFBZ1csU0FBQXdRLEdBQUFwTixFQUFBakQsRUFBQUgsSUFDQWhXLEVBQUF1ZSxJQUFBa0ksR0FBQXptQixFQUFBZ1csV0FDSzNWLEVBQUEwbUIsY0FBQSxTQUFBL1EsR0FDTCxJQUFBZ1IsRUFBQTNtQixFQUFBTixNQUNBcVosRUFBQTROLEVBQUE1TixTQUNBcFosRUFBQWduQixFQUFBaG5CLFFBRUFBLEVBQUFnWCxPQUFBLFVBQ0FoWCxFQUFBZ1csU0FBQXdRLEdBQUFwTixFQUFBakQsRUFBQUgsSUFDQWhXLEVBQUF1ZSxJQUFBa0ksR0FBQXptQixFQUFBZ1csV0FDSzNWLEVBQUE0bUIsYUFBQSxXQUNMLE9BQUFqa0IsSUFDSzNDLEVBQUE2bUIsWUFBQSxXQUNMLE9BQUFsa0IsSUFDS3NqQixHQUFBam1CLEVBQUErZCxHQXNDTCxPQTVIQSxTQUFBMWQsRUFBQUMsR0FBMEMsc0JBQUFBLEdBQUEsT0FBQUEsRUFBK0QsVUFBQVIsVUFBQSxrRUFBQVEsR0FBdUdELEVBQUEvSyxVQUFBbEIsT0FBQVksT0FBQXNMLEtBQUFoTCxXQUF5RWlMLGFBQWU1TCxNQUFBMEwsRUFBQS9MLFlBQUEsRUFBQWtNLFVBQUEsRUFBQUMsY0FBQSxLQUE2RUgsSUFBQWxNLE9BQUFzTSxlQUFBdE0sT0FBQXNNLGVBQUFMLEVBQUFDLEdBQUFELEVBQUFNLFVBQUFMLEdBcURyWHdtQixDQUFBUCxFQUFBMUksR0FvQ0EwSSxFQUFBanhCLFVBQUF1TCxnQkFBQSxXQUNBLE9BQ0FvZCxRQUNBbUYsY0FBQXpzQixLQUFBK0ksTUFBQUMsV0FLQTRtQixFQUFBanhCLFVBQUErb0IsbUJBQUEsV0FDQU0sS0FBQWhvQixLQUFBK0ksTUFBQXNZLFFBQUEsOElBR0F1TyxFQUFBanhCLFVBQUF5TCxPQUFBLFdBQ0EsSUFBQXdkLEVBQUE1bkIsS0FBQStJLE1BQ0FxWixFQUFBd0YsRUFBQXhGLFNBRUFwRCxHQURBNEksRUFBQTVlLFFBQ0E0ZSxFQUFBNUksVUFDQWpXLEVBaEhBLFNBQUFyRCxFQUFBSCxHQUE4QyxJQUFBbEQsS0FBaUIsUUFBQXRGLEtBQUEySSxFQUFxQkgsRUFBQVgsUUFBQTdILElBQUEsR0FBb0NVLE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQXdJLEVBQUEzSSxLQUE2RHNGLEVBQUF0RixHQUFBMkksRUFBQTNJLElBQXNCLE9BQUFzRixFQWdIM00rdEIsQ0FBQXhJLEdBQUEsa0NBRUF2RyxHQUNBc0MsV0FBQTNqQixLQUFBMmpCLFdBQ0EzRCxPQUFBLE1BQ0FoQixTQTFGQSxTQUFBb0QsRUFBQXBELEdBQ0EsSUFBQW9ELEVBQUEsT0FBQXBELEVBRUEsSUFBQXRiLEVBQUE2ckIsR0FBQW5OLEdBRUEsV0FBQXBELEVBQUFwQyxTQUFBaFksUUFBQWxCLEdBQUFzYixFQUVBcVEsTUFBb0JyUSxHQUNwQnBDLFNBQUFvQyxFQUFBcEMsU0FBQS9FLE9BQUFuVSxFQUFBcEMsVUFrRkErdUIsQ0FBQWpPLEVBQUFqRCxFQUFBSCxJQUNBeGQsS0FBQXhCLEtBQUE4dkIsV0FDQXB3QixRQUFBTSxLQUFBK3ZCLGNBQ0F0TSxHQUFBaU0sR0FBQSxNQUNBdkwsT0FBQXVMLEdBQUEsVUFDQXRMLFVBQUFzTCxHQUFBLGFBQ0FuTCxPQUFBdmtCLEtBQUFpd0IsYUFDQTVMLE1BQUFya0IsS0FBQWt3QixhQUdBLE9BQUFySSxFQUFBNW9CLEVBQUE4RixjQUFBbWpCLEVBQUFtSCxNQUFrRHRtQixHQUFVc1ksY0FHNUR1TyxFQXhFQSxDQXlFQy9ILEVBQUE1b0IsRUFBQWdwQixXQUVEMEgsR0FBQW5sQixXQUNBNFgsU0FBQXZhLEVBQUE1SSxFQUFBd3BCLE9BQ0F6ZixRQUFBbkIsRUFBQTVJLEVBQUFSLE9BQUF3SixXQUNBK1csU0FBQW5YLEVBQUE1SSxFQUFBcXJCLFdBQUF6aUIsRUFBQTVJLEVBQUF3cEIsT0FBQTVnQixFQUFBNUksRUFBQVIsVUFFQWt4QixHQUFBbFcsY0FDQTJJLFNBQUEsR0FDQXBELFNBQUEsS0FFQTJRLEdBQUFqbEIsbUJBQ0E0YyxPQUFBemYsRUFBQTVJLEVBQUFSLE9BQUF3SixZQUlBLElDbEpBcW9CLEdEa0pBLEdFcklBLElBQUFDLEdBQUEsU0FBQXJKLEdBR0EsU0FBQXNKLElBR0EsT0F0QkEsU0FBQXZuQixFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQW9CM0ZzbkIsQ0FBQXp3QixLQUFBd3dCLEdBbEJBLFNBQUFsbkIsRUFBQXBNLEdBQWlELElBQUFvTSxFQUFhLFVBQUFDLGVBQUEsNkRBQXlGLE9BQUFyTSxHQUFBLGlCQUFBQSxHQUFBLG1CQUFBQSxFQUFBb00sRUFBQXBNLEVBb0J2Snd6QixDQUFBMXdCLEtBQUFrbkIsRUFBQXJsQixNQUFBN0IsS0FBQThCLFlBd0NBLE9BMURBLFNBQUE0SCxFQUFBQyxHQUEwQyxzQkFBQUEsR0FBQSxPQUFBQSxFQUErRCxVQUFBUixVQUFBLGtFQUFBUSxHQUF1R0QsRUFBQS9LLFVBQUFsQixPQUFBWSxPQUFBc0wsS0FBQWhMLFdBQXlFaUwsYUFBZTVMLE1BQUEwTCxFQUFBL0wsWUFBQSxFQUFBa00sVUFBQSxFQUFBQyxjQUFBLEtBQTZFSCxJQUFBbE0sT0FBQXNNLGVBQUF0TSxPQUFBc00sZUFBQUwsRUFBQUMsR0FBQUQsRUFBQU0sVUFBQUwsR0FhclhnbkIsQ0FBQUgsRUFBQXRKLEdBUUFzSixFQUFBN3hCLFVBQUErb0IsbUJBQUEsV0FDQW5HLElBQUF2aEIsS0FBQWdKLFFBQUFzZSxPQUFBLG1EQUdBa0osRUFBQTd4QixVQUFBK1AsMEJBQUEsU0FBQUMsR0FDQXFaLE1BQUFyWixFQUFBcVEsV0FBQWhmLEtBQUErSSxNQUFBaVcsVUFBQSw0S0FFQWdKLE9BQUFyWixFQUFBcVEsVUFBQWhmLEtBQUErSSxNQUFBaVcsVUFBQSx5S0FHQXdSLEVBQUE3eEIsVUFBQXlMLE9BQUEsV0FDQSxJQUFBOE8sRUFBQWxaLEtBQUFnSixRQUFBc2UsT0FBQXBPLE1BQ0EzTyxFQUFBdkssS0FBQStJLE1BQUF3QixTQUVBeVUsRUFBQWhmLEtBQUErSSxNQUFBaVcsVUFBQTlGLEVBQUE4RixTQUVBbkwsT0FBQSxFQUNBK2MsT0FBQSxFQWlCQSxPQWhCQS9JLEVBQUE1b0IsRUFBQTZvQixTQUFBdGlCLFFBQUErRSxFQUFBLFNBQUFFLEdBQ0EsU0FBQW9KLEdBQUFnVSxFQUFBNW9CLEVBQUE0eEIsZUFBQXBtQixHQUFBLENBQ0EsSUFBQXFtQixFQUFBcm1CLEVBQUExQixNQUNBZ29CLEVBQUFELEVBQUFsYSxLQUNBd1UsRUFBQTBGLEVBQUExRixNQUNBcFMsRUFBQThYLEVBQUE5WCxPQUNBRCxFQUFBK1gsRUFBQS9YLFVBQ0FvRSxFQUFBMlQsRUFBQTNULEtBRUF2RyxFQUFBbWEsR0FBQTVULEVBRUF5VCxFQUFBbm1CLEVBQ0FvSixFQUFBb1gsR0FBQWpNLEVBQUFwQyxVQUE4Q2hHLE9BQUF3VSxRQUFBcFMsU0FBQUQsYUFBaUVHLEVBQUFyRixVQUkvR0EsRUFBQWdVLEVBQUE1b0IsRUFBQSt4QixhQUFBSixHQUE4QzVSLFdBQUFxTixjQUFBeFksSUFBMkMsTUFHekYyYyxFQTlDQSxDQStDQzNJLEVBQUE1b0IsRUFBQWdwQixXQUVEc0ksR0FBQXBqQixjQUNBbWEsT0FBQXpmLEVBQUE1SSxFQUFBNkksT0FDQW9SLE1BQUFyUixFQUFBNUksRUFBQVIsT0FBQXdKLGFBQ0dBLFlBRUhzb0IsR0FBQS9sQixXQUNBRCxTQUFBMUMsRUFBQTVJLEVBQUF5aEIsS0FDQTFCLFNBQUFuWCxFQUFBNUksRUFBQVIsUUFJQSxJQ3pFQXd5QixHRHlFQSxHRXpFQUMsR0FBQSxHQ0FBQyxHQUFBLHVCQ0hBQyxHQUFBM3pCLE9BQUFvTyxRQUFBLFNBQUF4SixHQUFtRCxRQUFBdEYsRUFBQSxFQUFnQkEsRUFBQStFLFVBQUFSLE9BQXNCdkUsSUFBQSxDQUFPLElBQUFnRSxFQUFBZSxVQUFBL0UsR0FBMkIsUUFBQXVCLEtBQUF5QyxFQUEwQnRELE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQTZELEVBQUF6QyxLQUF5RCtELEVBQUEvRCxHQUFBeUMsRUFBQXpDLElBQWlDLE9BQUErRCxHQVkvTyxJQ1RBZ3ZCLEdEU0EsU0FBQXBKLEdBQ0EsSUFBQXFKLEVBQUEsU0FBQXZvQixHQUNBLElBQUF3b0IsRUFBQXhvQixFQUFBd29CLG9CQUNBQyxFQWJBLFNBQUE5ckIsRUFBQUgsR0FBOEMsSUFBQWxELEtBQWlCLFFBQUF0RixLQUFBMkksRUFBcUJILEVBQUFYLFFBQUE3SCxJQUFBLEdBQW9DVSxPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUF3SSxFQUFBM0ksS0FBNkRzRixFQUFBdEYsR0FBQTJJLEVBQUEzSSxJQUFzQixPQUFBc0YsRUFhM01vdkIsQ0FBQTFvQixHQUFBLHdCQUVBLE9BQUE4ZSxFQUFBNW9CLEVBQUE4RixjQUFBMm5CLElBQ0FuaUIsU0FBQSxTQUFBbW5CLEdBQ0EsT0FBQTdKLEVBQUE1b0IsRUFBQThGLGNBQUFrakIsRUFBQW1KLE1BQXlESSxFQUFBRSxHQUN6RDNpQixJQUFBd2lCLFNBWUEsT0FOQUQsRUFBQS9qQixZQUFBLGVBQUEwYSxFQUFBMWEsYUFBQTBhLEVBQUEzcUIsTUFBQSxJQUNBZzBCLEVBQUFsa0IsaUJBQUE2YSxFQUNBcUosRUFBQTltQixXQUNBK21CLG9CQUFBMXBCLEVBQUE1SSxFQUFBK0ksTUFHQXVILEtBQUEraEIsRUFBQXJKLGc0QkV4QkEwSixHQUNBQyxLQUFBLGVBQUFuUCxLQUFBQyxTQUFBM2lCLFNBQUEsSUFBQWtsQixVQUFBLEdBQUE1SCxNQUFBLElBQUFuYyxLQUFBLEtBQ0Eyd0IsUUFBQSxrQkFBQXBQLEtBQUFDLFNBQUEzaUIsU0FBQSxJQUFBa2xCLFVBQUEsR0FBQTVILE1BQUEsSUFBQW5jLEtBQUEsTUFHQTRjLEVBQUEsbUJBQUFoZ0IsUUFBQSxpQkFBQUEsT0FBQWlnQixTQUFBLFNBQUFyWSxHQUNBLGNBQUFBLEdBQ0MsU0FBQUEsR0FDRCxPQUFBQSxHQUFBLG1CQUFBNUgsUUFBQTRILEVBQUFrRSxjQUFBOUwsUUFBQTRILElBQUE1SCxPQUFBYSxVQUFBLGdCQUFBK0csR0FHQWtHLEVBQUFuTyxPQUFBb08sUUFBQSxTQUFBeEosR0FDQSxRQUFBdEYsRUFBQSxFQUFpQkEsRUFBQStFLFVBQUFSLE9BQXNCdkUsSUFBQSxDQUN2QyxJQUFBZ0UsRUFBQWUsVUFBQS9FLEdBRUEsUUFBQXVCLEtBQUF5QyxFQUNBdEQsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBNkQsRUFBQXpDLEtBQ0ErRCxFQUFBL0QsR0FBQXlDLEVBQUF6QyxJQUtBLE9BQUErRCxHQU9BLFNBQUF5dkIsRUFBQXBzQixHQUNBLHdCQUFBQSxFQUFBLFlBQUFvWSxFQUFBcFksS0FBQSxPQUFBQSxFQUFBLFNBR0EsSUFEQSxJQUFBcXNCLEVBQUFyc0IsRUFDQSxPQUFBakksT0FBQTZTLGVBQUF5aEIsSUFDQUEsRUFBQXQwQixPQUFBNlMsZUFBQXloQixHQUdBLE9BQUF0MEIsT0FBQTZTLGVBQUE1SyxLQUFBcXNCLEVBNEJBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQWhrQixFQU9BLEdBTEEsbUJBQUErakIsUUFBQSxJQUFBQyxJQUNBQSxFQUFBRCxFQUNBQSxPQUFBNXlCLFFBR0EsSUFBQTZ5QixFQUFBLENBQ0Esc0JBQUFBLEVBQ0EsVUFBQTV5QixNQUFBLDJDQUdBLE9BQUE0eUIsRUFBQUgsRUFBQUcsQ0FBQUYsRUFBQUMsR0FHQSxzQkFBQUQsRUFDQSxVQUFBMXlCLE1BQUEsMENBR0EsSUFBQTZ5QixFQUFBSCxFQUNBSSxFQUFBSCxFQUNBSSxLQUNBQyxFQUFBRCxFQUNBRSxHQUFBLEVBRUEsU0FBQUMsSUFDQUYsSUFBQUQsSUFDQUMsRUFBQUQsRUFBQTVtQixTQVNBLFNBQUFsRCxJQUNBLEdBQUFncUIsRUFDQSxVQUFBanpCLE1BQUEsd01BR0EsT0FBQTh5QixFQTBCQSxTQUFBL3BCLEVBQUFnRCxHQUNBLHNCQUFBQSxFQUNBLFVBQUEvTCxNQUFBLDJDQUdBLEdBQUFpekIsRUFDQSxVQUFBanpCLE1BQUEsK1RBR0EsSUFBQTZJLEdBQUEsRUFLQSxPQUhBcXFCLElBQ0FGLEVBQUEvd0IsS0FBQThKLEdBRUEsV0FDQSxHQUFBbEQsRUFBQSxDQUlBLEdBQUFvcUIsRUFDQSxVQUFBanpCLE1BQUEsb0tBR0E2SSxHQUFBLEVBRUFxcUIsSUFDQSxJQUFBbnJCLEVBQUFpckIsRUFBQTN0QixRQUFBMEcsR0FDQWluQixFQUFBMXRCLE9BQUF5QyxFQUFBLEtBNkJBLFNBQUFpQixFQUFBeVgsR0FDQSxJQUFBOFIsRUFBQTlSLEdBQ0EsVUFBQXpnQixNQUFBLDJFQUdBLFlBQUF5Z0IsRUFBQS9hLEtBQ0EsVUFBQTFGLE1BQUEsc0ZBR0EsR0FBQWl6QixFQUNBLFVBQUFqekIsTUFBQSxzQ0FHQSxJQUNBaXpCLEdBQUEsRUFDQUgsRUFBQUQsRUFBQUMsRUFBQXJTLEdBQ0ssUUFDTHdTLEdBQUEsRUFJQSxJQURBLElBQUFwbkIsRUFBQWtuQixFQUFBQyxFQUNBeDFCLEVBQUEsRUFBbUJBLEVBQUFxTyxFQUFBOUosT0FBc0J2RSxJQUFBLEVBRXpDdU8sRUFEQUYsRUFBQXJPLE1BSUEsT0FBQWlqQixFQWtFQSxPQUZBelgsR0FBWXRELEtBQUEwc0IsRUFBQUMsUUFFWnpqQixHQUNBNUYsV0FDQUQsWUFDQUUsV0FDQWtxQixlQXpEQSxTQUFBQyxHQUNBLHNCQUFBQSxFQUNBLFVBQUFwekIsTUFBQSw4Q0FHQTZ5QixFQUFBTyxFQUNBcHFCLEdBQWN0RCxLQUFBMHNCLEVBQUFFLGFBb0RYZSxFQUFBLEdBM0NILFdBQ0EsSUFBQXpvQixFQUVBMG9CLEVBQUF2cUIsRUFDQSxPQUFBNkIsR0FTQTdCLFVBQUEsU0FBQXdxQixHQUNBLHdCQUFBQSxFQUFBLFlBQUFoVixFQUFBZ1YsS0FBQSxPQUFBQSxFQUNBLFVBQUEzcEIsVUFBQSwwQ0FHQSxTQUFBNHBCLElBQ0FELEVBQUF0bkIsTUFDQXNuQixFQUFBdG5CLEtBQUFoRCxLQU1BLE9BRkF1cUIsS0FFZ0I1bkIsWUFEaEIwbkIsRUFBQUUsT0FHS0gsRUFBQSxjQUNMLE9BQUE1eUIsTUFDS21LLEdBYUZnRSxFQXVCSCxTQUFBNmtCLEVBQUExMEIsRUFBQTBoQixHQUNBLElBQUFpVCxFQUFBalQsS0FBQS9hLEtBR0EsZ0JBRkFndUIsR0FBQSxXQUFBQyxPQUFBRCxHQUFBLGtCQUVBLGNBQUEzMEIsRUFBQSxpTEE4REEsU0FBQTYwQixFQUFBQyxHQUdBLElBRkEsSUFBQUMsRUFBQTUxQixPQUFBOEgsS0FBQTZ0QixHQUNBRSxLQUNBdjJCLEVBQUEsRUFBaUJBLEVBQUFzMkIsRUFBQS94QixPQUF3QnZFLElBQUEsQ0FDekMsSUFBQXVCLEVBQUErMEIsRUFBQXQyQixHQUVBLEVBTUEsbUJBQUFxMkIsRUFBQTkwQixLQUNBZzFCLEVBQUFoMUIsR0FBQTgwQixFQUFBOTBCLElBR0EsSUFBQWkxQixFQUFBOTFCLE9BQUE4SCxLQUFBK3RCLEdBT0EsSUFBQUUsT0FBQSxFQUNBLEtBeERBLFNBQUFKLEdBQ0EzMUIsT0FBQThILEtBQUE2dEIsR0FBQTV0QixRQUFBLFNBQUFsSCxHQUNBLElBQUEyekIsRUFBQW1CLEVBQUE5MEIsR0FHQSxZQUZBMnpCLE9BQUEzeUIsR0FBMkMyRixLQUFBMHNCLEVBQUFDLE9BRzNDLFVBQUFyeUIsTUFBQSxZQUFBakIsRUFBQSxpUkFJQSxRQUFnRCxJQUFoRDJ6QixPQUFBM3lCLEdBQW1DMkYsS0FEbkMsZ0NBQUF3ZCxLQUFBQyxTQUFBM2lCLFNBQUEsSUFBQWtsQixVQUFBLEdBQUE1SCxNQUFBLElBQUFuYyxLQUFBLE9BRUEsVUFBQTNCLE1BQUEsWUFBQWpCLEVBQUEsNkVBQUFxekIsRUFBQUMsS0FBQSxpVEE4Q0E2QixDQUFBSCxHQUNHLE1BQUFuMEIsR0FDSHEwQixFQUFBcjBCLEVBR0Esa0JBQ0EsSUFBQXlPLEVBQUE5TCxVQUFBUixPQUFBLFFBQUFoQyxJQUFBd0MsVUFBQSxHQUFBQSxVQUFBLE1BQ0FrZSxFQUFBbGUsVUFBQSxHQUVBLEdBQUEweEIsRUFDQSxNQUFBQSxFQVlBLElBRkEsSUFBQUUsR0FBQSxFQUNBN2dCLEtBQ0E4Z0IsRUFBQSxFQUFvQkEsRUFBQUosRUFBQWp5QixPQUE4QnF5QixJQUFBLENBQ2xELElBQUFwVCxFQUFBZ1QsRUFBQUksR0FDQTFCLEVBQUFxQixFQUFBL1MsR0FDQXFULEVBQUFobUIsRUFBQTJTLEdBQ0FzVCxFQUFBNUIsRUFBQTJCLEVBQUE1VCxHQUNBLFlBQUE2VCxFQUFBLENBQ0EsSUFBQUMsRUFBQWQsRUFBQXpTLEVBQUFQLEdBQ0EsVUFBQXpnQixNQUFBdTBCLEdBRUFqaEIsRUFBQTBOLEdBQUFzVCxFQUNBSCxLQUFBRyxJQUFBRCxFQUVBLE9BQUFGLEVBQUE3Z0IsRUFBQWpGLEdBSUEsU0FBQW1tQixFQUFBQyxFQUFBenJCLEdBQ0Esa0JBQ0EsT0FBQUEsRUFBQXlyQixFQUFBbnlCLE1BQUE3QixLQUFBOEIsYUF5QkEsU0FBQW15QixFQUFBQyxFQUFBM3JCLEdBQ0Esc0JBQUEyckIsRUFDQSxPQUFBSCxFQUFBRyxFQUFBM3JCLEdBR0Esd0JBQUEyckIsRUFBQSxZQUFBcFcsRUFBQW9XLEtBQUEsT0FBQUEsRUFDQSxVQUFBMzBCLE1BQUEsaUZBQUEyMEIsRUFBQSxnQkFBQUEsRUFBQSxZQUFBcFcsRUFBQW9XLElBQUEsOEZBS0EsSUFGQSxJQUFBM3VCLEVBQUE5SCxPQUFBOEgsS0FBQTJ1QixHQUNBQyxLQUNBcDNCLEVBQUEsRUFBaUJBLEVBQUF3SSxFQUFBakUsT0FBaUJ2RSxJQUFBLENBQ2xDLElBQUF1QixFQUFBaUgsRUFBQXhJLEdBQ0FpM0IsRUFBQUUsRUFBQTUxQixHQUNBLG1CQUFBMDFCLElBQ0FHLEVBQUE3MUIsR0FBQXkxQixFQUFBQyxFQUFBenJCLElBR0EsT0FBQTRyQixFQWNBLFNBQUFDLElBQ0EsUUFBQTlULEVBQUF4ZSxVQUFBUixPQUFBK3lCLEVBQUFqYyxNQUFBa0ksR0FBQUMsRUFBQSxFQUFrRUEsRUFBQUQsRUFBYUMsSUFDL0U4VCxFQUFBOVQsR0FBQXplLFVBQUF5ZSxHQUdBLFdBQUE4VCxFQUFBL3lCLE9BQ0EsU0FBQXdTLEdBQ0EsT0FBQUEsR0FJQSxJQUFBdWdCLEVBQUEveUIsT0FDQSt5QixFQUFBLEdBR0FBLEVBQUFqWSxPQUFBLFNBQUFuZCxFQUFBQyxHQUNBLGtCQUNBLE9BQUFELEVBQUFDLEVBQUEyQyxXQUFBdkMsRUFBQXdDLGVBcUJBLFNBQUF3eUIsSUFDQSxRQUFBaFUsRUFBQXhlLFVBQUFSLE9BQUFpekIsRUFBQW5jLE1BQUFrSSxHQUFBQyxFQUFBLEVBQXdFQSxFQUFBRCxFQUFhQyxJQUNyRmdVLEVBQUFoVSxHQUFBemUsVUFBQXllLEdBR0EsZ0JBQUF5UixHQUNBLGtCQUNBLFFBQUF3QyxFQUFBMXlCLFVBQUFSLE9BQUE5QixFQUFBNFksTUFBQW9jLEdBQUFDLEVBQUEsRUFBd0VBLEVBQUFELEVBQWVDLElBQ3ZGajFCLEVBQUFpMUIsR0FBQTN5QixVQUFBMnlCLEdBR0EsSUFBQWhyQixFQUFBdW9CLEVBQUFud0IsV0FBQXZDLEVBQUFFLEdBQ0FrMUIsRUFBQSxXQUNBLFVBQUFuMUIsTUFBQSwySEFHQW8xQixHQUNBbnNCLFNBQUFpQixFQUFBakIsU0FDQUQsU0FBQSxXQUNBLE9BQUFtc0IsRUFBQTd5QixXQUFBdkMsRUFBQXdDLGFBR0E4eUIsRUFBQUwsRUFBQXQwQixJQUFBLFNBQUE0MEIsR0FDQSxPQUFBQSxFQUFBRixLQUlBLE9BRkFELEVBQUFOLEVBQUF2eUIsV0FBQXZDLEVBQUFzMUIsRUFBQVIsQ0FBQTNxQixFQUFBbEIsVUFFQXFELEtBQXdCbkMsR0FDeEJsQixTQUFBbXNCLG9EQzNqQkEsSUFHQUksRUFIQUMsRUFBQXA0QixFQUFBLElBTUFtNEIsRUFEQSxvQkFBQXhyQixLQUNBQSxLQUNDLG9CQUFBdEgsT0FDREEsWUFDQyxJQUFBZ3pCLEVBQ0RBLEVBRUFsNEIsRUFLQSxJQUFBK0ksRUFBQXBJLE9BQUFzM0IsRUFBQSxFQUFBdDNCLENBQUFxM0IsR0FDQUcsRUFBQTs7Ozs7RUNWQSxJQUFBL2EsRUFBQXpjLE9BQUF5YyxzQkFDQXRiLEVBQUFuQixPQUFBa0IsVUFBQUMsZUFDQXMyQixFQUFBejNCLE9BQUFrQixVQUFBdzJCLHFCQXNEQXI0QixFQUFBRCxRQTVDQSxXQUNBLElBQ0EsSUFBQVksT0FBQW9PLE9BQ0EsU0FNQSxJQUFBdXBCLEVBQUEsSUFBQWxDLE9BQUEsT0FFQSxHQURBa0MsRUFBQSxRQUNBLE1BQUEzM0IsT0FBQXdjLG9CQUFBbWIsR0FBQSxHQUNBLFNBS0EsSUFEQSxJQUFBQyxLQUNBdDRCLEVBQUEsRUFBaUJBLEVBQUEsR0FBUUEsSUFDekJzNEIsRUFBQSxJQUFBbkMsT0FBQW9DLGFBQUF2NEIsTUFLQSxrQkFIQVUsT0FBQXdjLG9CQUFBb2IsR0FBQXAxQixJQUFBLFNBQUF6QixHQUNBLE9BQUE2MkIsRUFBQTcyQixLQUVBMEMsS0FBQSxJQUNBLFNBSUEsSUFBQXEwQixLQUlBLE1BSEEsdUJBQUFsWSxNQUFBLElBQUE3WCxRQUFBLFNBQUFnd0IsR0FDQUQsRUFBQUMsT0FHQSx5QkFEQS8zQixPQUFBOEgsS0FBQTlILE9BQUFvTyxVQUFrQzBwQixJQUFBcjBCLEtBQUEsSUFNaEMsTUFBQXUwQixHQUVGLFVBSUFDLEdBQUFqNEIsT0FBQW9PLE9BQUEsU0FBQXhKLEVBQUF0QixHQUtBLElBSkEsSUFBQW9jLEVBRUF3WSxFQURBelksRUF0REEsU0FBQTBZLEdBQ0EsVUFBQUEsUUFBQXQyQixJQUFBczJCLEVBQ0EsVUFBQXpzQixVQUFBLHlEQUdBLE9BQUExTCxPQUFBbTRCLEdBaURBQyxDQUFBeHpCLEdBR0F2RCxFQUFBLEVBQWdCQSxFQUFBZ0QsVUFBQVIsT0FBc0J4QyxJQUFBLENBR3RDLFFBQUFSLEtBRkE2ZSxFQUFBMWYsT0FBQXFFLFVBQUFoRCxJQUdBRixFQUFBMUIsS0FBQWlnQixFQUFBN2UsS0FDQTRlLEVBQUE1ZSxHQUFBNmUsRUFBQTdlLElBSUEsR0FBQTRiLEVBQUEsQ0FDQXliLEVBQUF6YixFQUFBaUQsR0FDQSxRQUFBcGdCLEVBQUEsRUFBa0JBLEVBQUE0NEIsRUFBQXIwQixPQUFvQnZFLElBQ3RDbTRCLEVBQUFoNEIsS0FBQWlnQixFQUFBd1ksRUFBQTU0QixNQUNBbWdCLEVBQUF5WSxFQUFBNTRCLElBQUFvZ0IsRUFBQXdZLEVBQUE1NEIsTUFNQSxPQUFBbWdCLGlDQ25FQSxJQUFBNFksRUFBQSxTQUFBOTJCLEtBK0JBbEMsRUFBQUQsUUFyQkEsU0FBQWtDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUE5QixFQUFBQyxFQUFBOEIsRUFBQUMsR0FHQSxHQUZBMDJCLEVBQUE5MkIsSUFFQUQsRUFBQSxDQUNBLElBQUFNLEVBQ0EsUUFBQUMsSUFBQU4sRUFDQUssRUFBQSxJQUFBRSxNQUFBLHFJQUNLLENBQ0wsSUFBQUMsR0FBQVAsRUFBQUMsRUFBQTlCLEVBQUFDLEVBQUE4QixFQUFBQyxHQUNBSyxFQUFBLEdBQ0FKLEVBQUEsSUFBQUUsTUFBQVAsRUFBQVUsUUFBQSxpQkFDQSxPQUFBRixFQUFBQyxTQUVBbkMsS0FBQSxzQkFJQSxNQURBK0IsRUFBQU0sWUFBQSxFQUNBTixrQ0NoQ0F2QyxFQUFBRCx5Q0NMQSxTQUFBazVCLEVBQUFqaUIsR0FDQSxrQkFDQSxPQUFBQSxHQVNBLElBQUFraUIsRUFBQSxhQUVBQSxFQUFBQyxZQUFBRixFQUNBQyxFQUFBRSxpQkFBQUgsR0FBQSxHQUNBQyxFQUFBRyxnQkFBQUosR0FBQSxHQUNBQyxFQUFBSSxnQkFBQUwsRUFBQSxNQUNBQyxFQUFBSyxnQkFBQSxXQUNBLE9BQUFyMkIsTUFFQWcyQixFQUFBTSxvQkFBQSxTQUFBeGlCLEdBQ0EsT0FBQUEsR0FHQWhYLEVBQUFELFFBQUFtNUIsaUJDbkNBLElBQUFPLEVBR0FBLEVBQUEsV0FDQSxPQUFBdjJCLEtBREEsR0FJQSxJQUVBdTJCLEtBQUFubUIsU0FBQSxjQUFBQSxLQUFBLEVBQUFvbUIsTUFBQSxRQUNDLE1BQUFyM0IsR0FFRCxpQkFBQTZDLFNBQUF1MEIsRUFBQXYwQixRQU9BbEYsRUFBQUQsUUFBQTA1QixnT0NuQkEsSUFBQUUsRUFBQTk1QixFQUFBLElBRUEsTUFDTSs1QixFQUFnQiwwREFFaEJDLEVBQWlCcjRCLE1BQVVvNEIsS0FBZ0JwNEIsU0FDM0NzNEIsRUFBZ0IsQ0FBQ3Q0QixFQUFLdTRCLE9BQWtCSCxLQUFnQnA0QixjQUFnQnU0QixTQUV4RUMsRUFBbUJweEIsR0FDbkJBLEVBQ0dqSSxPQUFPOEgsS0FBS0csR0FBS3pGLElBQUkzQixJQUMxQixNQUFNeTRCLEVBQU9yeEIsRUFBSXBILEdBRWpCLE9BREF5NEIsRUFBS3o0QixJQUFNQSxFQUNKeTRCLE9BSUVqYyxpQkFBaUIsTUFDckIsRUFBQTJiLEVBQUE3NEIsUUFBTzg0QixVQUNYcGIsS0FBSzBiLElBQ0osTUFBTXRoQixFQUFhb2hCLEVBQWlCRSxHQUVwQyxPQURBdGhCLEVBQVdsUSxRQUFRc1EsR0FBWUEsRUFBU3VHLFNBQVd5YSxFQUFpQmhoQixFQUFTdUcsV0FDdEUzRyxLQUlBeUYsY0FBY3JGLEtBQ3pCLEdBQXFCLFVBQWxCQSxFQUFTeFksS0FDVixPQUFPMjVCLFFBQVFDLE9BQU8sb0JBR3hCLE1BQU0zUCxLQUFTbVAsU0FDZixPQUFPLEVBQUFELEVBQUFVLE1BQUs1UCxFQUFLelIsR0FDZHdGLEtBQUs1RSxJQUNKWixFQUFTeFgsSUFBTW9ZLEVBQUlwWixLQUNad1ksTUFJQXNGLGlCQUFpQnRGLEtBQzVCLE1BQU15UixFQUFNb1AsRUFBZTdnQixFQUFTeFgsS0FDcEMsT0FBTyxFQUFBbTRCLEVBQUFXLEtBQUk3UCxFQUFLelIsS0FHTHVGLGlCQUFpQjlaLEtBQzVCLE1BQU1nbUIsRUFBTW9QLEVBQWVwMUIsR0FDM0IsT0FBTyxFQUFBazFCLEVBQUFZLEtBQUk5UCxLQUdBM0wsdUJBQXVCRixLQUNsQyxNQUFNNkwsS0FBU21QLEtBQWdCaGIsRUFBUUQsMkJBQ3ZDLE9BQU8sRUFBQWdiLEVBQUFVLE1BQUs1UCxFQUFLN0wsR0FDZEosS0FBSzVFLElBQ0pnRixFQUFRcGQsSUFBTW9ZLEVBQUlwWixLQUNYb2UsTUFHQUssd0JBQXdCTCxLQUNuQyxNQUFNNkwsRUFBTXFQLEVBQWNsYixFQUFRRCxXQUFZQyxFQUFRcGQsS0FDdEQsT0FBTyxFQUFBbTRCLEVBQUFXLEtBQUk3UCxFQUFLN0wsS0FHTFEsd0JBQXdCUixLQUNuQyxNQUFNNkwsRUFBTXFQLEVBQWNsYixFQUFRRCxXQUFZQyxFQUFRcGQsS0FDdEQsT0FBTyxFQUFBbTRCLEVBQUFZLEtBQUk5UCxvRkMvRGIsSUFBQStQLEVBQUEzNkIsRUFBQSxjQUNBQSxFQUFBLFFBRUFBLEVBQUEsOERBRU00NkIsVUFBb0J0UCxZQUFVM0wsZUFBQTljLEdBQUEsSUFBQTRuQixFQUFBLE9BQUFBLEVBQUFvUSxTQUFBaDRCLEdBQUFRLEtBQ2xDNE4sT0FDRTZwQixTQUFTLEVBQ1RsMkIsR0FBSSxLQUNKakUsS0FBTSxHQUNObzZCLE1BQU8sSUFMeUIxM0IsS0FzQmxDMjNCLGFBQWUsR0FBR3QxQixhQUNoQnJDLEtBQUtvUCxVQUFXa04sQ0FBQ2phLEVBQU8vRSxNQUFPK0UsRUFBT3JFLFVBdkJOZ0MsS0EwQmxDNDNCLGFBQWdCalgsS0FDZEEsRUFBTXVKLGlCQUNOLE1BQU01c0IsS0FBRUEsRUFBRm82QixNQUFRQSxFQUFScDVCLElBQWVBLEdBQVEwQixLQUFLNE4sTUFDNUI4TixHQUFZcGUsT0FBTW82QixTQUNyQnA1QixJQUFLb2QsRUFBUXBkLElBQU1BLEdBQ25CMEIsS0FBSytJLE1BQU0yUyxVQUNaQSxFQUFRRCxXQUFhemIsS0FBSytJLE1BQU0yUyxRQUFRRCxZQUUxQ3piLEtBQUsrSSxNQUFNOHVCLFdBQVduYyxHQUN0QjFiLEtBQUtvUCxVQUFXOVIsS0FBTSxHQUFJbzZCLE1BQU8sT0FuQ0R0USxFQWVsQy9ZLG9CQUNFLE1BQU1xTixRQUFFQSxHQUFZMWIsS0FBSytJLE1BQ3pCLElBQUkyUyxFQUFTLE9BQU8sS0FFcEIxYixLQUFLb1AsU0FBU3NNLEdBbUJoQnRSLFNBQ0UsTUFBTTlMLElBQUVBLEVBQUZoQixLQUFPQSxFQUFQbzZCLE1BQWFBLEdBQVUxM0IsS0FBSzROLE9BQzVCa3FCLFNBQUVBLEdBQWE5M0IsS0FBSytJLE1BRTFCLE9BQ0VndkIsRUFBQUMsUUFBQWp6QixjQUFBLFFBQU9rekIsU0FBVWo0QixLQUFLNDNCLGNBRXBCRyxFQUFBQyxRQUFBanpCLGNBQUEscUJBRUVnekIsRUFBQUMsUUFBQWp6QixjQUFBLFNBQU96SCxLQUFLLE9BQU9VLE1BQU9WLEVBQU00NkIsU0FBVWw0QixLQUFLMjNCLGdCQUVqREksRUFBQUMsUUFBQWp6QixjQUFBLHNCQUVFZ3pCLEVBQUFDLFFBQUFqekIsY0FBQSxTQUFPekgsS0FBSyxRQUFRVSxNQUFPMDVCLEVBQU9RLFNBQVVsNEIsS0FBSzIzQixnQkFHbkRJLEVBQUFDLFFBQUFqekIsY0FBQSxRQUFNaW9CLFVBQVcvcEIsVUFBT2sxQixhQUN0QkosRUFBQUMsUUFBQWp6QixjQUFBLFVBQVFFLEtBQUssVUFBVzNHLEVBQU0sU0FBVyxPQUN4Q0EsR0FBT3k1QixFQUFBQyxRQUFBanpCLGNBQUEsVUFBUUUsS0FBSyxTQUFTOGtCLFFBQVMrTixHQUEvQixXQUVWQyxFQUFBQyxRQUFBanpCLGNBQUEsY0ExREZ3eUIsRUFRRy9zQixXQUNMa1IsUUFBUzBjLFVBQVUzNUIsT0FDbkJvNUIsV0FBWU8sVUFBVXB3QixLQUFLQyxXQUMzQjZ2QixTQUFVTSxVQUFVcHdCLEtBQ3BCeVQsV0FBWTJjLFVBQVUzUCxPQUFPeGdCLHNCQXFEbEJzdkIsaUZDdkVmLElBQUFELEVBQUEzNkIsRUFBQSxjQUNBQSxFQUFBLDZEQUVNMDdCLFVBQXFCcFEsWUFBVTNMLGVBQUE5YyxHQUFBLElBQUE0bkIsRUFBQSxPQUFBQSxFQUFBb1EsU0FBQWg0QixHQUFBUSxLQUNuQzROLE9BQ0U2cEIsU0FBUyxFQUNUbjVCLElBQUssS0FDTGhCLEtBQU0sR0FDTmc3QixPQUFRLEdBQ1JqYyxZQUNBdkcsU0FBVSxNQVB1QjlWLEtBdUJuQzQzQixhQUFnQmpYLEtBQ2RBLEVBQU11SixpQkFDTixNQUFNNXNCLEtBQUVBLEVBQUZnN0IsT0FBUUEsRUFBUmg2QixJQUFnQkEsR0FBUTBCLEtBQUs0TixNQUM3QmtJLEdBQWF4WSxPQUFNZzdCLFVBQ3RCaDZCLElBQUt3WCxFQUFTeFgsSUFBTUEsR0FFdkIwQixLQUFLK0ksTUFBTTh1QixXQUFXL2hCLEdBQ3RCOVYsS0FBS29QLFVBQVc5UixLQUFNLEdBQUlnN0IsT0FBUSxPQTlCRHQ0QixLQWlDbkMyM0IsYUFBZSxHQUFHdDFCLGFBQ2hCckMsS0FBS29QLFVBQVdrTixDQUFDamEsRUFBTy9FLE1BQU8rRSxFQUFPckUsVUFsQ0xvcEIsRUFnQm5DL1ksb0JBQ0UsTUFBTXlILFNBQUVBLEdBQWE5VixLQUFLK0ksTUFDdEIrTSxHQUVKOVYsS0FBS29QLFNBQVMwRyxHQWlCaEIxTCxTQUNFLE1BQU05TCxJQUFFQSxFQUFGaEIsS0FBT0EsRUFBUGc3QixPQUFhQSxHQUFXdDRCLEtBQUs0TixPQUM3QmtxQixTQUFFQSxHQUFhOTNCLEtBQUsrSSxNQUUxQixPQUNFZ3ZCLEVBQUFDLFFBQUFqekIsY0FBQSxRQUFNa3pCLFNBQVVqNEIsS0FBSzQzQixjQUNuQkcsRUFBQUMsUUFBQWp6QixjQUFBLHFCQUVFZ3pCLEVBQUFDLFFBQUFqekIsY0FBQSxTQUFPekgsS0FBSyxPQUFPVSxNQUFPVixFQUFNNDZCLFNBQVVsNEIsS0FBSzIzQixnQkFFakRJLEVBQUFDLFFBQUFqekIsY0FBQSx1QkFFRWd6QixFQUFBQyxRQUFBanpCLGNBQUEsU0FBT3pILEtBQUssU0FBU1UsTUFBT3M2QixFQUFRSixTQUFVbDRCLEtBQUsyM0IsZ0JBR3JESSxFQUFBQyxRQUFBanpCLGNBQUEsV0FDRWd6QixFQUFBQyxRQUFBanpCLGNBQUEsWUFDRWd6QixFQUFBQyxRQUFBanpCLGNBQUEsVUFBUUUsS0FBSyxVQUFXM0csRUFBTSxTQUFXLE9BQ3hDQSxHQUFPeTVCLEVBQUFDLFFBQUFqekIsY0FBQSxVQUFRRSxLQUFLLFNBQVM4a0IsUUFBUytOLEdBQS9CLGNBdkRkTyxFQVVHN3RCLFdBQ0xzTCxTQUFVc2lCLFVBQVUzNUIsT0FDcEJvNUIsV0FBWU8sVUFBVXB3QixLQUFLQyxXQUMzQjZ2QixTQUFVTSxVQUFVcHdCLGdCQWtEVHF3QixpQ0NsRWYsU0FBQXJELEdBQ0EsSUFBQXVELEVBQUEsaUJBQUF2RCxRQUFBdjNCLGlCQUFBdTNCLEVBRUFDLEVBQUEscURDSEEsU0FBQXVELEVBQUExRCxHQUNBLElBQUFqdkIsRUFDQS9ILEVBQUFnM0IsRUFBQWgzQixPQWFBLE1BWEEsbUJBQUFBLEVBQ0FBLEVBQUEyNkIsV0FDQTV5QixFQUFBL0gsRUFBQTI2QixZQUVBNXlCLEVBQUEvSCxFQUFBLGNBQ0FBLEVBQUEyNkIsV0FBQTV5QixHQUdBQSxFQUFBLGVBR0FBLGdFQ2ZBLFFBQUFsSixFQUFBLFFBQ0FBLEVBQUEsU0FDQUEsRUFBQSxLQUNBKzdCLEVBQUEvN0IsRUFBQSxPQUNBQSxFQUFBLHdEQUNBQSxFQUFBLElBR0FnOEIsVUFBU3Z1QixPQUNQMnRCLEVBQUFDLFFBQUFqekIsY0FBQzJ6QixFQUFBN3ZCLFVBQVNZLE1BQU9BLFdBQ2ZzdUIsRUFBQUMsUUFBQWp6QixjQUFDNnpCLEVBQUFaLFFBQUQsT0FFRi8xQixTQUFTNDJCLGVBQWU7Ozs7Ozs7O0dDSGIsSUFBQTliLEVBQUFwZ0IsRUFBQSxJQUFBNkIsRUFBQTdCLEVBQUEsSUFBQWtDLEVBQUFsQyxFQUFBLElBQUFtOEIsRUFBQW44QixFQUFBLElBQUFrQixFQUFBLG1CQUFBQyxlQUFBaTdCLElBQUE5NkIsRUFBQUosRUFBQUMsT0FBQWk3QixJQUFBLHVCQUFBQyxFQUFBbjdCLEVBQUFDLE9BQUFpN0IsSUFBQSxzQkFBQUUsRUFBQXA3QixFQUFBQyxPQUFBaTdCLElBQUEsd0JBQUFHLEVBQUFyN0IsRUFBQUMsT0FBQWk3QixJQUFBLDJCQUFBcnBCLEVBQUE3UixFQUFBQyxPQUFBaTdCLElBQUEsd0JBQUFwcEIsRUFBQTlSLEVBQUFDLE9BQUFpN0IsSUFBQSx3QkFBQUksRUFBQXQ3QixFQUFBQyxPQUFBaTdCLElBQUEsdUJBQUFLLEVBQUF2N0IsRUFBQUMsT0FBQWk3QixJQUFBLDBCQUFBTSxFQUNieDdCLEVBQUFDLE9BQUFpN0IsSUFBQSwyQkFBd0NsN0IsR0FBQUMsT0FBQWk3QixJQUFBLGlCQUErQixJQUFBekgsRUFBQSxtQkFBQXh6QixlQUFBaWdCLFNBQWtELFNBQUF1YixFQUFBcjZCLEdBQWMsUUFBQUMsRUFBQTRDLFVBQUFSLE9BQUEsRUFBQW5DLEVBQUEseURBQUFGLEVBQUE3QixFQUFBLEVBQThGQSxFQUFBOEIsRUFBSTlCLElBQUErQixHQUFBLFdBQUFzQixtQkFBQXFCLFVBQUExRSxFQUFBLElBQXFEb0IsR0FBQSwyQkFBQVMsRUFBQSw0SEFBa0NFLEdBQ2hVLElBQUFvNkIsR0FBT0MsVUFBQSxXQUFxQixVQUFTQyxtQkFBQSxhQUFnQ0Msb0JBQUEsYUFBaUNDLGdCQUFBLGNBQStCLFNBQUFDLEVBQUEzNkIsRUFBQUMsRUFBQUMsR0FBa0JhLEtBQUErSSxNQUFBOUosRUFBYWUsS0FBQWdKLFFBQUE5SixFQUFlYyxLQUFBb0QsS0FBQXZFLEVBQVltQixLQUFBNjVCLFFBQUExNkIsR0FBQW82QixFQUFzUyxTQUFBTyxLQUM3YyxTQUFBQyxFQUFBOTZCLEVBQUFDLEVBQUFDLEdBQWtCYSxLQUFBK0ksTUFBQTlKLEVBQWFlLEtBQUFnSixRQUFBOUosRUFBZWMsS0FBQW9ELEtBQUF2RSxFQUFZbUIsS0FBQTY1QixRQUFBMTZCLEdBQUFvNkIsRUFEK0hLLEVBQUFqN0IsVUFBQXE3QixvQkFBZ0NKLEVBQUFqN0IsVUFBQXlRLFNBQUEsU0FBQW5RLEVBQUFDLEdBQW1DLGlCQUFBRCxHQUFBLG1CQUFBQSxHQUFBLE1BQUFBLEdBQUFxNkIsRUFBQSxNQUFtRXQ1QixLQUFBNjVCLFFBQUFGLGdCQUFBMzVCLEtBQUFmLEVBQUFDLEVBQUEsYUFBbUQwNkIsRUFBQWo3QixVQUFBOFAsWUFBQSxTQUFBeFAsR0FBb0NlLEtBQUE2NUIsUUFBQUosbUJBQUF6NUIsS0FBQWYsRUFBQSxnQkFDOWE2NkIsRUFBQW43QixVQUFBaTdCLEVBQUFqN0IsVUFBb0csSUFBQXM3QixFQUFBRixFQUFBcDdCLFVBQUEsSUFBQW03QixFQUF3QkcsRUFBQXJ3QixZQUFBbXdCLEVBQWdCaGQsRUFBQWtkLEVBQUFMLEVBQUFqN0IsV0FBaUJzN0IsRUFBQUMsc0JBQUEsRUFBMEIsSUFBQUMsR0FBTzV1QixRQUFBLE1BQWE2dUIsRUFBQTM4QixPQUFBa0IsVUFBQUMsZUFBQXk3QixHQUFzQy83QixLQUFBLEVBQUF5USxLQUFBLEVBQUF1ckIsUUFBQSxFQUFBQyxVQUFBLEdBQ2pQLFNBQUFDLEVBQUF2N0IsRUFBQUMsRUFBQUMsR0FBa0IsSUFBQS9CLE9BQUEsRUFBQUMsS0FBaUJrNUIsRUFBQSxLQUFBa0UsRUFBQSxLQUFlLFNBQUF2N0IsRUFBQSxJQUFBOUIsVUFBQSxJQUFBOEIsRUFBQTZQLE1BQUEwckIsRUFBQXY3QixFQUFBNlAsVUFBQSxJQUFBN1AsRUFBQVosTUFBQWk0QixFQUFBLEdBQUFyM0IsRUFBQVosS0FBQVksRUFBQWs3QixFQUFBbDlCLEtBQUFnQyxFQUFBOUIsS0FBQWk5QixFQUFBejdCLGVBQUF4QixLQUFBQyxFQUFBRCxHQUFBOEIsRUFBQTlCLElBQTRILElBQUFnQyxFQUFBMEMsVUFBQVIsT0FBQSxFQUF5QixPQUFBbEMsRUFBQS9CLEVBQUFrTixTQUFBcEwsT0FBc0IsS0FBQUMsRUFBQSxDQUFhLFFBQUFwQyxFQUFBb2IsTUFBQWhaLEdBQUFqQyxFQUFBLEVBQXVCQSxFQUFBaUMsRUFBSWpDLElBQUFILEVBQUFHLEdBQUEyRSxVQUFBM0UsRUFBQSxHQUF3QkUsRUFBQWtOLFNBQUF2TixFQUFhLEdBQUFpQyxLQUFBd2EsYUFBQSxJQUFBcmMsS0FBQWdDLEVBQUFILEVBQUF3YSxrQkFBQSxJQUFBcGMsRUFBQUQsS0FBQUMsRUFBQUQsR0FBQWdDLEVBQUFoQyxJQUE0RSxPQUFPczlCLFNBQUF6OEIsRUFBQWdILEtBQUFoRyxFQUFBWCxJQUFBaTRCLEVBQUF4bkIsSUFBQTByQixFQUFBMXhCLE1BQUExTCxFQUFBczlCLE9BQUFSLEVBQUE1dUIsU0FDN1gsU0FBQXF2QixFQUFBMzdCLEdBQWMsdUJBQUFBLEdBQUEsT0FBQUEsS0FBQXk3QixXQUFBejhCLEVBQTRKLElBQUE0OEIsRUFBQSxPQUFBQyxLQUFrQixTQUFBQyxFQUFBOTdCLEVBQUFDLEVBQUFDLEVBQUEvQixHQUFvQixHQUFBMDlCLEVBQUF4NUIsT0FBQSxDQUFhLElBQUFqRSxFQUFBeTlCLEVBQUE5ZCxNQUFzRSxPQUF4RDNmLEVBQUF3SSxPQUFBNUcsRUFBVzVCLEVBQUEyOUIsVUFBQTk3QixFQUFjN0IsRUFBQTJLLEtBQUE3SSxFQUFTOUIsRUFBQTJMLFFBQUE1TCxFQUFZQyxFQUFBMHFCLE1BQUEsRUFBVTFxQixFQUFTLE9BQU93SSxPQUFBNUcsRUFBQSs3QixVQUFBOTdCLEVBQUE4SSxLQUFBN0ksRUFBQTZKLFFBQUE1TCxFQUFBMnFCLE1BQUEsR0FBK0MsU0FBQWtULEVBQUFoOEIsR0FBY0EsRUFBQTRHLE9BQUEsS0FBYzVHLEVBQUErN0IsVUFBQSxLQUFpQi83QixFQUFBK0ksS0FBQSxLQUFZL0ksRUFBQStKLFFBQUEsS0FBZS9KLEVBQUE4b0IsTUFBQSxFQUFVLEdBQUErUyxFQUFBeDVCLFFBQUF3NUIsRUFBQXQ1QixLQUFBdkMsR0FDcGIsU0FBQWk4QixFQUFBajhCLEVBQUFDLEVBQUFDLEVBQUEvQixHQUFvQixJQUFBQyxTQUFBNEIsRUFBZSxjQUFBNUIsR0FBQSxZQUFBQSxJQUFBNEIsRUFBQSxNQUF5QyxJQUFBczNCLEdBQUEsRUFBUyxVQUFBdDNCLEVBQUFzM0IsR0FBQSxPQUFpQixPQUFBbDVCLEdBQWUsMEJBQUFrNUIsR0FBQSxFQUFpQyxNQUFNLG9CQUFBdDNCLEVBQUF5N0IsVUFBaUMsS0FBQXo4QixFQUFBLEtBQUErNkIsRUFBQXpDLEdBQUEsR0FBb0IsR0FBQUEsRUFBQSxPQUFBcDNCLEVBQUEvQixFQUFBNkIsRUFBQSxLQUFBQyxFQUFBLElBQUFpOEIsRUFBQWw4QixFQUFBLEdBQUFDLEdBQUEsRUFBZ0UsR0FBdkJxM0IsRUFBQSxFQUFJcjNCLEVBQUEsS0FBQUEsRUFBQSxJQUFBQSxFQUFBLElBQW1Ca1osTUFBQThGLFFBQUFqZixHQUFBLFFBQUF3N0IsRUFBQSxFQUFnQ0EsRUFBQXg3QixFQUFBcUMsT0FBV201QixJQUFBLENBQVksSUFBQXI3QixFQUFBRixFQUFBaThCLEVBQVA5OUIsRUFBQTRCLEVBQUF3N0IsR0FBT0EsR0FBZWxFLEdBQUEyRSxFQUFBNzlCLEVBQUErQixFQUFBRCxFQUFBL0IsUUFBYyxVQUFBNkIsUUFBQSxJQUFBQSxFQUFBRyxFQUFBLEtBQUFBLEVBQUEsbUJBQUFBLEVBQUFreUIsR0FBQXJ5QixFQUFBcXlCLElBQUFyeUIsRUFBQSxlQUFBRyxFQUFBLHdCQUFBQSxFQUFBLElBQUFILEVBQUFHLEVBQUFsQyxLQUFBK0IsR0FDcld3N0IsRUFBQSxJQUFJcDlCLEVBQUE0QixFQUFBdU0sUUFBQTR2QixNQUFtQjdFLEdBQUEyRSxFQUFBNzlCLElBQUFXLE1BQUFvQixFQUFBRixFQUFBaThCLEVBQUE5OUIsRUFBQW85QixLQUFBdDdCLEVBQUEvQixPQUFzQyxXQUFBQyxHQUFBaThCLEVBQUEsMEJBQUFuNkIsRUFBQSxHQUFBRixHQUFBLHFCQUEwRXhCLE9BQUE4SCxLQUFBdEcsR0FBQWlDLEtBQUEsVUFBOEIvQixFQUFBLElBQVMsT0FBQW8zQixFQUFTLFNBQUE0RSxFQUFBbDhCLEVBQUFDLEdBQWdCLHVCQUFBRCxHQUFBLE9BQUFBLEdBQUEsTUFBQUEsRUFBQVgsSUFGckksU0FBQVcsR0FBbUIsSUFBQUMsR0FBT204QixJQUFBLEtBQUFDLElBQUEsTUFBbUIsY0FBQXI4QixHQUFBUyxRQUFBLGlCQUFBVCxHQUE2QyxPQUFBQyxFQUFBRCxLQUUyQ3M4QixDQUFBdDhCLEVBQUFYLEtBQUFZLEVBQUFhLFNBQUEsSUFBOEUsU0FBQXk3QixFQUFBdjhCLEVBQUFDLEdBQWdCRCxFQUFBK0ksS0FBQTlLLEtBQUErQixFQUFBK0osUUFBQTlKLEVBQUFELEVBQUE4b0IsU0FDclMsU0FBQTBULEVBQUF4OEIsRUFBQUMsRUFBQUMsR0FBa0IsSUFBQS9CLEVBQUE2QixFQUFBNEcsT0FBQXhJLEVBQUE0QixFQUFBKzdCLFVBQTZCLzdCLElBQUErSSxLQUFBOUssS0FBQStCLEVBQUErSixRQUFBOUosRUFBQUQsRUFBQThvQixTQUFxQzNQLE1BQUE4RixRQUFBamYsR0FBQXk4QixFQUFBejhCLEVBQUE3QixFQUFBK0IsRUFBQTI1QixFQUFBeEMscUJBQUEsTUFBQXIzQixJQUFBMjdCLEVBQUEzN0IsS0FBQUMsRUFBQTdCLElBQUE0QixFQUFBWCxLQUFBWSxLQUFBWixNQUFBVyxFQUFBWCxJQUFBLE9BQUFXLEVBQUFYLEtBQUFvQixRQUFBbTdCLEVBQUEsWUFBQTE3QixFQUFBRixHQUF3SXk3QixTQUFBejhCLEVBQUFnSCxLQUFBaEcsRUFBQWdHLEtBQUEzRyxJQUFBWSxFQUFBNlAsSUFBQTlQLEVBQUE4UCxJQUFBaEcsTUFBQTlKLEVBQUE4SixNQUFBNHhCLE9BQUExN0IsRUFBQTA3QixTQUFxRXY5QixFQUFBb0UsS0FBQXZDLElBQWEsU0FBQXk4QixFQUFBejhCLEVBQUFDLEVBQUFDLEVBQUEvQixFQUFBQyxHQUFzQixJQUFBazVCLEVBQUEsR0FBUyxNQUFBcDNCLElBQUFvM0IsR0FBQSxHQUFBcDNCLEdBQUFPLFFBQUFtN0IsRUFBQSxZQUF5QzM3QixFQUFBNjdCLEVBQUE3N0IsRUFBQXEzQixFQUFBbjVCLEVBQUFDLEdBQWEsTUFBQTRCLEdBQUFpOEIsRUFBQWo4QixFQUFBLEdBQUF3OEIsRUFBQXY4QixHQUFxQis3QixFQUFBLzdCLEdBQ3haLElBQUF5OEIsR0FBTzdULFVBQVU3bkIsSUFBQSxTQUFBaEIsRUFBQUMsRUFBQUMsR0FBb0IsU0FBQUYsRUFBQSxPQUFBQSxFQUFvQixJQUFBN0IsS0FBeUIsT0FBaEJzK0IsRUFBQXo4QixFQUFBN0IsRUFBQSxLQUFBOEIsRUFBQUMsR0FBZ0IvQixHQUFTb0ksUUFBQSxTQUFBdkcsRUFBQUMsRUFBQUMsR0FBeUIsU0FBQUYsRUFBQSxPQUFBQSxFQUFvQkMsRUFBQTY3QixFQUFBLFVBQUE3N0IsRUFBQUMsR0FBbUIsTUFBQUYsR0FBQWk4QixFQUFBajhCLEVBQUEsR0FBQXU4QixFQUFBdDhCLEdBQXFCKzdCLEVBQUEvN0IsSUFBSzZvQixNQUFBLFNBQUE5b0IsR0FBbUIsYUFBQUEsRUFBQSxFQUFBaThCLEVBQUFqOEIsRUFBQSxHQUFBNjVCLEVBQUExQyxnQkFBQSxPQUFnRHdGLFFBQUEsU0FBQTM4QixHQUFxQixJQUFBQyxLQUEyQyxPQUFsQ3c4QixFQUFBejhCLEVBQUFDLEVBQUEsS0FBQTQ1QixFQUFBeEMscUJBQWtDcDNCLEdBQVNvTCxLQUFBLFNBQUFyTCxHQUF1QyxPQUFyQjI3QixFQUFBMzdCLElBQUFxNkIsRUFBQSxPQUFxQnI2QixJQUFVNDhCLFVBQUEsV0FBc0IsT0FBT3R3QixRQUFBLE9BQWMwYyxVQUFBMlIsRUFBQWtDLGNBQUEvQixFQUFBZ0MsY0FBQSxTQUFBOThCLEVBQUFDLEdBQ3JQLFlBRDhTLElBQUFBLE1BQUEsT0FBcUJELEdBQUd5N0IsU0FBQXZCLEVBQzllNkMsc0JBQUE5OEIsRUFBQSs4QixjQUFBaDlCLEVBQUFpOUIsY0FBQWo5QixFQUFBazlCLGVBQUFsOUIsRUFBQW05QixhQUFBLEVBQUFDLGNBQUEsRUFBQXh6QixTQUFBLEtBQUF5ekIsU0FBQSxPQUFxSXp6QixVQUFZNnhCLFNBQUEvcUIsRUFBQTRzQixTQUFBdDlCLEdBQXVCQSxFQUFBcTlCLFNBQUFyOUIsR0FBb0J1OUIsV0FBQSxTQUFBdjlCLEdBQXdCLE9BQU95N0IsU0FBQXJCLEVBQUFqdkIsT0FBQW5MLElBQXFCdzlCLFNBQUF4RCxFQUFBeUQsV0FBQXhELEVBQUF5RCxtQkFBQXZELEVBQUF3RCxrQkFBQWx0QixFQUFBM0ssY0FBQXkxQixFQUFBeEosYUFBQSxTQUFBL3hCLEVBQUFDLEVBQUFDLElBQStHLE9BQUFGLFFBQUEsSUFBQUEsSUFBQXE2QixFQUFBLE1BQUFyNkIsR0FBdUMsSUFBQTdCLE9BQUEsRUFBQUMsRUFBQTBmLEtBQW1COWQsRUFBQThKLE9BQUF3dEIsRUFBQXQzQixFQUFBWCxJQUFBbThCLEVBQUF4N0IsRUFBQThQLElBQUEzUCxFQUFBSCxFQUFBMDdCLE9BQXFDLFNBQUF6N0IsRUFBQSxNQUFZLElBQUFBLEVBQUE2UCxNQUFBMHJCLEVBQUF2N0IsRUFBQTZQLElBQUEzUCxFQUFBKzZCLEVBQUE1dUIsY0FBc0MsSUFDaGZyTSxFQUFBWixNQUFBaTRCLEVBQUEsR0FBQXIzQixFQUFBWixLQUFvQixJQUFBdEIsT0FBQSxFQUFrRSxJQUFBSSxLQUFyRDZCLEVBQUFnRyxNQUFBaEcsRUFBQWdHLEtBQUF3VSxlQUFBemMsRUFBQWlDLEVBQUFnRyxLQUFBd1UsY0FBcUR2YSxFQUFBazdCLEVBQUFsOUIsS0FBQWdDLEVBQUE5QixLQUFBaTlCLEVBQUF6N0IsZUFBQXhCLEtBQUFDLEVBQUFELFFBQUEsSUFBQThCLEVBQUE5QixTQUFBLElBQUFKLElBQUFJLEdBQUE4QixFQUFBOUIsSUFBOEcsUUFBckJBLEVBQUEwRSxVQUFBUixPQUFBLEdBQXFCakUsRUFBQWtOLFNBQUFwTCxPQUFzQixLQUFBL0IsRUFBQSxDQUFhSixFQUFBb2IsTUFBQWhiLEdBQVcsUUFBQUQsRUFBQSxFQUFZQSxFQUFBQyxFQUFJRCxJQUFBSCxFQUFBRyxHQUFBMkUsVUFBQTNFLEVBQUEsR0FBd0JFLEVBQUFrTixTQUFBdk4sRUFBYSxPQUFPMDlCLFNBQUF6OEIsRUFBQWdILEtBQUFoRyxFQUFBZ0csS0FBQTNHLElBQUFpNEIsRUFBQXhuQixJQUFBMHJCLEVBQUExeEIsTUFBQTFMLEVBQUFzOUIsT0FBQXY3QixJQUFxRHk5QixjQUFBLFNBQUE1OUIsR0FBMkIsSUFBQUMsRUFBQXM3QixFQUFBajhCLEtBQUEsS0FBQVUsR0FBOEIsT0FBVEMsRUFBQStGLEtBQUFoRyxFQUFTQyxHQUFTMnhCLGVBQUErSixFQUFBMXRCLFFBQUEsU0FBQTR2QixvREFBdUZDLGtCQUFBNUMsRUFDNWZ0dUIsT0FBQWtSLElBQVVpZ0IsR0FBSWhGLFFBQUEyRCxHQUFVc0IsRUFBQUQsR0FBQXJCLEdBQUFxQixFQUFXbGdDLEVBQUFELFFBQUFvZ0MsRUFBQWpGLFFBQUFpRixFQUFBakYsUUFBQWlGLGlDQ25CbkMsU0FBQUMsSUFFQSxHQUNBLG9CQUFBQyxnQ0FDQSxtQkFBQUEsK0JBQUFELFNBY0EsSUFFQUMsK0JBQUFELFlBQ0csTUFBQXpILEdBR0gySCxRQUFBLzlCLE1BQUFvMkIsSUFPQXlILEdBQ0FwZ0MsRUFBQUQsUUFBQUYsRUFBQTs7Ozs7Ozs7R0N0QmEsSUFBQTBnQyxFQUFBMWdDLEVBQUEsSUFBQTJnQyxFQUFBM2dDLEVBQUEsR0FBQVEsRUFBQVIsRUFBQSxJQUFBa0MsRUFBQWxDLEVBQUEsSUFBQXM4QixFQUFBdDhCLEVBQUEsSUFBQTRnQyxFQUFBNWdDLEVBQUEsSUFBQTZnQyxFQUFBN2dDLEVBQUEsSUFBQThnQyxFQUFBOWdDLEVBQUEsSUFBQStnQyxFQUFBL2dDLEVBQUEsSUFDYixTQUFBeThCLEVBQUFuNkIsR0FBYyxRQUFBQyxFQUFBNEMsVUFBQVIsT0FBQSxFQUFBbEUsRUFBQSx5REFBQTZCLEVBQUE1QixFQUFBLEVBQThGQSxFQUFBNkIsRUFBSTdCLElBQUFELEdBQUEsV0FBQXFELG1CQUFBcUIsVUFBQXpFLEVBQUEsSUFBcURnZ0MsR0FBQSwyQkFBQXArQixFQUFBLDRIQUFtQzdCLEdBQTZIa2dDLEdBQUFsRSxFQUFBLE9BRXJVLElBQUFDLEdBQU9zRSxhQUFBLEtBQUFDLGlCQUFBLEVBQUFDLGNBQUEsS0FBQUMsa0JBQUEsRUFBQUMsc0JBQUEsU0FBQTkrQixFQUFBQyxFQUFBOUIsRUFBQUMsRUFBQThCLEVBQUFDLEVBQUFtM0IsRUFBQWtFLEVBQUExZCxJQURQLFNBQUE5ZCxFQUFBQyxFQUFBOUIsRUFBQUMsRUFBQThCLEVBQUFDLEVBQUFtM0IsRUFBQWtFLEVBQUExZCxHQUErQi9jLEtBQUE0OUIsaUJBQUEsRUFBd0I1OUIsS0FBQTI5QixhQUFBLEtBQXVCLElBQUFuL0IsRUFBQTRaLE1BQUF6WixVQUFBK00sTUFBQXhPLEtBQUE0RSxVQUFBLEdBQThDLElBQUk1QyxFQUFBMkMsTUFBQXpFLEVBQUFvQixHQUFhLE1BQUFYLEdBQVNtQyxLQUFBMjlCLGFBQUE5L0IsRUFBQW1DLEtBQUE0OUIsaUJBQUEsS0FDakIvN0IsTUFBQXczQixFQUFBdjNCLFlBQXNCazhCLHdDQUFBLFNBQUEvK0IsRUFBQUMsRUFBQTlCLEVBQUFDLEVBQUE4QixFQUFBQyxFQUFBbTNCLEVBQUFrRSxFQUFBMWQsR0FBbUgsR0FBOUNzYyxFQUFBMEUsc0JBQUFsOEIsTUFBQTdCLEtBQUE4QixXQUE4Q3UzQixFQUFBNEUsaUJBQUEsQ0FBdUIsSUFBQXovQixFQUFBNjZCLEVBQUE2RSxtQkFBMkI3RSxFQUFBeUUsbUJBQUF6RSxFQUFBeUUsa0JBQUEsRUFBQXpFLEVBQUF3RSxjQUFBci9CLEtBQStEMi9CLG1CQUFBLFdBQStCLE9BQ2xWLFdBQWMsR0FBQTlFLEVBQUF5RSxpQkFBQSxDQUF1QixJQUFBNytCLEVBQUFvNkIsRUFBQXdFLGNBQWlFLE1BQTNDeEUsRUFBQXdFLGNBQUEsS0FBcUJ4RSxFQUFBeUUsa0JBQUEsRUFBc0I3K0IsSUFENE80QyxNQUFBdzNCLEVBQUF2M0IsWUFBNkJtOEIsZUFBQSxXQUEyQixPQUFBNUUsRUFBQXVFLGlCQUF5Qk0saUJBQUEsV0FBNkIsR0FBQTdFLEVBQUF1RSxnQkFBQSxDQUFzQixJQUFBMytCLEVBQ2xpQm82QixFQUFBc0UsYUFBd0QsT0FBekN0RSxFQUFBc0UsYUFBQSxLQUFvQnRFLEVBQUF1RSxpQkFBQSxFQUFxQjMrQixFQUFTbTZCLEVBQUEsU0FBMkgsSUFBQWdGLEVBQUEsS0FBQUMsS0FDNUwsU0FBQUMsSUFBYyxHQUFBRixFQUFBLFFBQUFuL0IsS0FBQW8vQixFQUFBLENBQXVCLElBQUFuL0IsRUFBQW0vQixFQUFBcC9CLEdBQUE3QixFQUFBZ2hDLEVBQUF4NUIsUUFBQTNGLEdBQWtELElBQXRCLEVBQUE3QixHQUFBZzhCLEVBQUEsS0FBQW42QixJQUFzQnMvQixFQUFBbmhDLEdBQW1FLFFBQUFDLEtBQXhENkIsRUFBQXMvQixlQUFBcEYsRUFBQSxLQUFBbjZCLEdBQWlDcy9CLEVBQUFuaEMsR0FBQThCLEVBQVE5QixFQUFBOEIsRUFBQXUvQixXQUFlLENBQWdCLElBQUF0L0IsT0FBQSxFQUFhQyxFQUFBaEMsRUFBQUMsR0FBQWs1QixFQUFBcjNCLEVBQUF1N0IsRUFBQXA5QixFQUFtQnFoQyxFQUFBOS9CLGVBQUE2N0IsSUFBQXJCLEVBQUEsS0FBQXFCLEdBQXNDaUUsRUFBQWpFLEdBQUFyN0IsRUFBUSxJQUFBMmQsRUFBQTNkLEVBQUF1L0Isd0JBQWdDLEdBQUE1aEIsRUFBQSxDQUFNLElBQUE1ZCxLQUFBNGQsSUFBQW5lLGVBQUFPLElBQUF5L0IsRUFBQTdoQixFQUFBNWQsR0FBQW8zQixFQUFBa0UsR0FBNkN0N0IsR0FBQSxPQUFLQyxFQUFBeS9CLGtCQUFBRCxFQUFBeC9CLEVBQUF5L0IsaUJBQUF0SSxFQUFBa0UsR0FBQXQ3QixHQUFBLEdBQUFBLEdBQUEsRUFBK0RBLEdBQUFpNkIsRUFBQSxLQUFBLzdCLEVBQUE0QixLQUMvWSxTQUFBMi9CLEVBQUEzL0IsRUFBQUMsRUFBQTlCLEdBQW1CMGhDLEVBQUE3L0IsSUFBQW02QixFQUFBLE1BQUFuNkIsR0FBd0I2L0IsRUFBQTcvQixHQUFBQyxFQUFRNi9CLEVBQUE5L0IsR0FBQUMsRUFBQXUvQixXQUFBcmhDLEdBQUE0aEMsYUFBbUMsSUFBQVQsS0FBQUcsS0FBZUksS0FBTUMsS0FBTyxTQUFBRSxFQUFBaGdDLEdBQWVtL0IsR0FBQWhGLEVBQUEsT0FBbUJnRixFQUFBaG1CLE1BQUF6WixVQUFBK00sTUFBQXhPLEtBQUErQixHQUFpQ3EvQixJQUFLLFNBQUE1YyxFQUFBemlCLEdBQWUsSUFBQTdCLEVBQUE4QixHQUFBLEVBQVcsSUFBQTlCLEtBQUE2QixFQUFBLEdBQUFBLEVBQUFMLGVBQUF4QixHQUFBLENBQW1DLElBQUFDLEVBQUE0QixFQUFBN0IsR0FBV2loQyxFQUFBei9CLGVBQUF4QixJQUFBaWhDLEVBQUFqaEMsS0FBQUMsSUFBQWdoQyxFQUFBamhDLElBQUFnOEIsRUFBQSxNQUFBaDhCLEdBQUFpaEMsRUFBQWpoQyxHQUFBQyxFQUFBNkIsR0FBQSxHQUF3RUEsR0FBQW8vQixJQUMxVSxJQUFBWSxHQUFRQyxRQUFBWixFQUFBYSx5QkFBQVYsRUFBQVcsd0JBQUFQLEVBQUFRLDZCQUFBUCxFQUFBUSwwQkFBQSxLQUFBQyx1QkFBQVAsRUFBQVEseUJBQUEvZCxHQUF1TGdlLEVBQUEsS0FBQUMsRUFBQSxLQUFBQyxFQUFBLEtBQXlCLFNBQUFDLEVBQUE1Z0MsRUFBQUMsRUFBQTlCLEVBQUFDLEdBQXFCNkIsRUFBQUQsRUFBQWdHLE1BQUEsZ0JBQTBCaEcsRUFBQTZnQyxjQUFBRixFQUFBdmlDLEdBQXNCZzhCLEVBQUEyRSx3Q0FBQTkrQixFQUFBOUIsT0FBQSxFQUFBNkIsR0FBd0RBLEVBQUE2Z0MsY0FBQSxLQUNyVixTQUFBQyxFQUFBOWdDLEVBQUFDLEdBQXdDLE9BQXZCLE1BQUFBLEdBQUFrNkIsRUFBQSxNQUF1QixNQUFBbjZCLEVBQUFDLEVBQW9Ca1osTUFBQThGLFFBQUFqZixHQUFxQm1aLE1BQUE4RixRQUFBaGYsSUFBQUQsRUFBQXVDLEtBQUFLLE1BQUE1QyxFQUFBQyxHQUFBRCxJQUErQ0EsRUFBQXVDLEtBQUF0QyxHQUFVRCxHQUFTbVosTUFBQThGLFFBQUFoZixJQUFBRCxHQUFBZ0MsT0FBQS9CLElBQUFELEVBQUFDLEdBQTRDLFNBQUE4Z0MsRUFBQS9nQyxFQUFBQyxFQUFBOUIsR0FBbUJnYixNQUFBOEYsUUFBQWpmLEtBQUF1RyxRQUFBdEcsRUFBQTlCLEdBQUE2QixHQUFBQyxFQUFBaEMsS0FBQUUsRUFBQTZCLEdBQStDLElBQUFnaEMsRUFBQSxLQUNqUSxTQUFBQyxFQUFBamhDLEVBQUFDLEdBQWlCLEdBQUFELEVBQUEsQ0FBTSxJQUFBN0IsRUFBQTZCLEVBQUFraEMsbUJBQUE5aUMsRUFBQTRCLEVBQUFtaEMsbUJBQWtELEdBQUFob0IsTUFBQThGLFFBQUE5Z0IsR0FBQSxRQUFBK0IsRUFBQSxFQUFnQ0EsRUFBQS9CLEVBQUFrRSxTQUFBckMsRUFBQW9oQyx1QkFBc0NsaEMsSUFBQTBnQyxFQUFBNWdDLEVBQUFDLEVBQUE5QixFQUFBK0IsR0FBQTlCLEVBQUE4QixTQUFzQi9CLEdBQUF5aUMsRUFBQTVnQyxFQUFBQyxFQUFBOUIsRUFBQUMsR0FBb0I0QixFQUFBa2hDLG1CQUFBLEtBQTBCbGhDLEVBQUFtaEMsbUJBQUEsS0FBMEJuaEMsRUFBQXFoQyxnQkFBQXJoQyxFQUFBMkssWUFBQTIyQixRQUFBdGhDLElBQTRDLFNBQUF1aEMsRUFBQXZoQyxHQUFlLE9BQUFpaEMsRUFBQWpoQyxHQUFBLEdBQWdCLFNBQUF3aEMsRUFBQXhoQyxHQUFlLE9BQUFpaEMsRUFBQWpoQyxHQUFBLEdBQWdCLElBQUF5aEMsR0FBUWxCLHVCQUFBUCxFQUFBUSx5QkFBQS9kLEdBQy9WLFNBQUFpZixFQUFBMWhDLEVBQUFDLEdBQWlCLElBQUE5QixFQUFBNkIsRUFBQTJoQyxVQUFrQixJQUFBeGpDLEVBQUEsWUFBa0IsSUFBQUMsRUFBQXFpQyxFQUFBdGlDLEdBQVksSUFBQUMsRUFBQSxZQUFrQkQsRUFBQUMsRUFBQTZCLEdBQU9ELEVBQUEsT0FBQUMsR0FBWSxnTkFBQTdCLEtBQUF3akMsWUFBQXhqQyxJQUFBLFlBQUE0QixJQUFBZ0csT0FBQSxVQUFBaEcsR0FBQSxXQUFBQSxHQUFBLGFBQUFBLElBQWtUQSxHQUFBNUIsRUFBSyxNQUFBNEIsRUFBUSxRQUFBQSxHQUFBLEVBQWEsT0FBQUEsRUFBQSxNQUFpQjdCLEdBQUEsbUJBQUFBLEdBQUFnOEIsRUFBQSxNQUFBbDZCLFNBQUE5QixHQUNuY0EsR0FBUyxTQUFBMGpDLEVBQUE3aEMsRUFBQUMsR0FBaUIsT0FBQUQsSUFBQWdoQyxFQUFBRixFQUFBRSxFQUFBaGhDLElBQXdCQSxFQUFBZ2hDLEVBQUtBLEVBQUEsS0FBUWhoQyxJQUFBK2dDLEVBQUEvZ0MsRUFBQUMsRUFBQXNoQyxFQUFBQyxHQUFBUixHQUFBN0csRUFBQSxNQUFBQyxFQUFBOEUsc0JBQWtFLFNBQUE0QyxFQUFBOWhDLEVBQUFDLEVBQUE5QixFQUFBQyxHQUFxQixRQUFBOEIsRUFBQSxLQUFBQyxFQUFBLEVBQW1CQSxFQUFBbS9CLEVBQUFqOUIsT0FBWWxDLElBQUEsQ0FBSyxJQUFBbTNCLEVBQUFnSSxFQUFBbi9CLEdBQVltM0IsUUFBQWlJLGNBQUF2L0IsRUFBQUMsRUFBQTlCLEVBQUFDLE1BQUE4QixFQUFBNGdDLEVBQUE1Z0MsRUFBQW8zQixJQUE2Q3VLLEVBQUEzaEMsR0FBQSxHQUFTLElBQUE2aEMsR0FBUUMsVUFBQVAsRUFBQVEsWUFBQVAsRUFBQVEsaUJBQUFMLEVBQUFNLDBCQUFBTCxHQUE2RU0sRUFBQTVlLEtBQUFDLFNBQUEzaUIsU0FBQSxJQUFBMkwsTUFBQSxHQUFBNGxCLEVBQUEsMkJBQUErUCxFQUFBQyxFQUFBLHdCQUFBRCxFQUNqVixTQUFBRSxFQUFBdGlDLEdBQWUsR0FBQUEsRUFBQXF5QixHQUFBLE9BQUFyeUIsRUFBQXF5QixHQUFvQixNQUFLcnlCLEVBQUFxeUIsSUFBTSxLQUFBcnlCLEVBQUF3RixXQUFnQyxZQUFoQ3hGLElBQUF3RixXQUF3RCxZQUFQeEYsSUFBQXF5QixJQUFPa1EsS0FBQSxJQUFBdmlDLEVBQUF1aUMsSUFBQXZpQyxFQUFBLEtBQW1DLFNBQUF3aUMsRUFBQXhpQyxHQUFlLE9BQUFBLEVBQUF1aUMsS0FBQSxJQUFBdmlDLEVBQUF1aUMsSUFBQSxPQUFBdmlDLEVBQUEyaEMsVUFBMkN4SCxFQUFBLE1BQVEsU0FBQXNJLEVBQUF6aUMsR0FBZSxPQUFBQSxFQUFBcWlDLElBQUEsS0FBbUIsSUFBQUssR0FBUUMsa0JBQUEsU0FBQTNpQyxFQUFBQyxHQUFnQ0EsRUFBQW95QixHQUFBcnlCLEdBQU80aUMsMkJBQUFOLEVBQUFPLG9CQUFBLFNBQUE3aUMsR0FBc0UsUUFBUEEsSUFBQXF5QixLQUFPLElBQUFyeUIsRUFBQXVpQyxLQUFBLElBQUF2aUMsRUFBQXVpQyxJQUFBLEtBQUF2aUMsR0FBc0M4aUMsb0JBQUFOLEVBQUFPLDZCQUFBTixFQUFBTyxpQkFBQSxTQUFBaGpDLEVBQUFDLEdBQXVGRCxFQUFBcWlDLEdBQUFwaUMsSUFDL2QsU0FBQTA2QixFQUFBMzZCLEdBQWMsR0FBQUEsSUFBQWlqQyxhQUFjampDLEdBQUEsSUFBQUEsRUFBQXVpQyxLQUFvQixPQUFBdmlDLEdBQUEsS0FBZ0IsU0FBQWtqQyxFQUFBbGpDLEVBQUFDLEVBQUE5QixHQUFtQixRQUFBQyxLQUFhNEIsR0FBRTVCLEVBQUFtRSxLQUFBdkMsS0FBQTI2QixFQUFBMzZCLEdBQWtCLElBQUFBLEVBQUE1QixFQUFBaUUsT0FBZSxFQUFBckMsS0FBTUMsRUFBQTdCLEVBQUE0QixHQUFBLFdBQUE3QixHQUFzQixJQUFBNkIsRUFBQSxFQUFRQSxFQUFBNUIsRUFBQWlFLE9BQVdyQyxJQUFBQyxFQUFBN0IsRUFBQTRCLEdBQUEsVUFBQTdCLEdBQXdCLFNBQUFnbEMsRUFBQW5qQyxFQUFBQyxFQUFBOUIsSUFBbUI4QixFQUFBeWhDLEVBQUExaEMsRUFBQTdCLEVBQUFpbEMsZUFBQTFELHdCQUFBei9CLE9BQUE5QixFQUFBK2lDLG1CQUFBSixFQUFBM2lDLEVBQUEraUMsbUJBQUFqaEMsR0FBQTlCLEVBQUFnakMsbUJBQUFMLEVBQUEzaUMsRUFBQWdqQyxtQkFBQW5oQyxJQUF1SixTQUFBcWpDLEVBQUFyakMsR0FBZUEsS0FBQW9qQyxlQUFBMUQseUJBQUF3RCxFQUFBbGpDLEVBQUFzakMsWUFBQUgsRUFBQW5qQyxHQUNuWSxTQUFBdWpDLEVBQUF2akMsR0FBZSxHQUFBQSxLQUFBb2pDLGVBQUExRCx3QkFBQSxDQUFnRCxJQUFBei9CLEVBQUFELEVBQUFzakMsWUFBa0NKLEVBQWRqakMsSUFBQTA2QixFQUFBMTZCLEdBQUEsS0FBY2tqQyxFQUFBbmpDLElBQVksU0FBQXdqQyxFQUFBeGpDLEVBQUFDLEVBQUE5QixHQUFtQjZCLEdBQUE3QixLQUFBaWxDLGVBQUF4RCxtQkFBQTMvQixFQUFBeWhDLEVBQUExaEMsRUFBQTdCLEVBQUFpbEMsZUFBQXhELHFCQUFBemhDLEVBQUEraUMsbUJBQUFKLEVBQUEzaUMsRUFBQStpQyxtQkFBQWpoQyxHQUFBOUIsRUFBQWdqQyxtQkFBQUwsRUFBQTNpQyxFQUFBZ2pDLG1CQUFBbmhDLElBQXdMLFNBQUF5akMsRUFBQXpqQyxHQUFlQSxLQUFBb2pDLGVBQUF4RCxrQkFBQTRELEVBQUF4akMsRUFBQXNqQyxZQUFBLEtBQUF0akMsR0FBK0QsU0FBQTBqQyxHQUFBMWpDLEdBQWUrZ0MsRUFBQS9nQyxFQUFBcWpDLEdBQ3JaLFNBQUFNLEdBQUEzakMsRUFBQUMsRUFBQTlCLEVBQUFDLEdBQXFCLEdBQUFELEdBQUFDLEVBQUE0QixFQUFBLENBQW1CLElBQVIsSUFBQUUsRUFBQS9CLEVBQVFnQyxFQUFBL0IsRUFBQWs1QixFQUFBLEVBQUFrRSxFQUFBdDdCLEVBQW9CczdCLEVBQUVBLEVBQUFiLEVBQUFhLEdBQUFsRSxJQUFXa0UsRUFBQSxFQUFJLFFBQUExZCxFQUFBM2QsRUFBWTJkLEVBQUVBLEVBQUE2YyxFQUFBN2MsR0FBQTBkLElBQVcsS0FBSyxFQUFBbEUsRUFBQWtFLEdBQU10N0IsRUFBQXk2QixFQUFBejZCLEdBQUFvM0IsSUFBWSxLQUFLLEVBQUFrRSxFQUFBbEUsR0FBTW4zQixFQUFBdzZCLEVBQUF4NkIsR0FBQXE3QixJQUFZLEtBQUtsRSxLQUFJLENBQUUsR0FBQXAzQixJQUFBQyxHQUFBRCxJQUFBQyxFQUFBeWpDLFVBQUEsTUFBQTVqQyxFQUFrQ0UsRUFBQXk2QixFQUFBejZCLEdBQU9DLEVBQUF3NkIsRUFBQXg2QixHQUFPRCxFQUFBLFVBQU9BLEVBQUEsS0FBZ0IsSUFBSkMsRUFBQUQsRUFBSUEsS0FBUy9CLE9BQUFnQyxJQUF5QixRQUFkbTNCLEVBQUFuNUIsRUFBQXlsQyxZQUFjdE0sSUFBQW4zQixJQUF5QkQsRUFBQXFDLEtBQUFwRSxHQUFVQSxFQUFBdzhCLEVBQUF4OEIsR0FBTyxJQUFBQSxLQUFTQyxPQUFBK0IsSUFBeUIsUUFBZG0zQixFQUFBbDVCLEVBQUF3bEMsWUFBY3RNLElBQUFuM0IsSUFBeUJoQyxFQUFBb0UsS0FBQW5FLEdBQVVBLEVBQUF1OEIsRUFBQXY4QixHQUFPLElBQUFBLEVBQUEsRUFBUUEsRUFBQThCLEVBQUFtQyxPQUFXakUsSUFBQW9sQyxFQUFBdGpDLEVBQUE5QixHQUFBLFVBQUE0QixHQUF5QixJQUFBQSxFQUFBN0IsRUFBQWtFLE9BQWUsRUFBQXJDLEtBQU13akMsRUFBQXJsQyxFQUFBNkIsR0FBQSxXQUFBQyxHQUMvYixJQUFBNGpDLElBQVFDLDZCQUFBSixHQUFBSyx1Q0FBQSxTQUFBL2pDLEdBQW1GK2dDLEVBQUEvZ0MsRUFBQXVqQyxJQUFTUywrQkFBQUwsR0FBQU0sMkJBQUEsU0FBQWprQyxHQUEwRStnQyxFQUFBL2dDLEVBQUF5akMsS0FBVyxTQUFBUyxHQUFBbGtDLEVBQUFDLEdBQWlCLElBQUE5QixLQUFzSSxPQUE3SEEsRUFBQTZCLEVBQUFta0MsZUFBQWxrQyxFQUFBa2tDLGNBQW1DaG1DLEVBQUEsU0FBQTZCLEdBQUEsU0FBQUMsRUFBeUI5QixFQUFBLE1BQUE2QixHQUFBLE1BQUFDLEVBQW1COUIsRUFBQSxLQUFBNkIsR0FBQSxLQUFBQyxFQUFpQjlCLEVBQUEsSUFBQTZCLEdBQUEsSUFBQUMsRUFBQWtrQyxjQUE2QmhtQyxFQUNoVixJQUFBaW1DLElBQVFDLGFBQUFILEdBQUEsNEJBQUFJLG1CQUFBSixHQUFBLGtDQUFBSyxlQUFBTCxHQUFBLDhCQUFBTSxjQUFBTixHQUFBLCtCQUFtTU8sTUFBTUMsTUFDak4sU0FBQUMsR0FBQTNrQyxHQUFlLEdBQUF5a0MsR0FBQXprQyxHQUFBLE9BQUF5a0MsR0FBQXprQyxHQUFzQixJQUFBb2tDLEdBQUFwa0MsR0FBQSxPQUFBQSxFQUFtQixJQUFBN0IsRUFBQThCLEVBQUFta0MsR0FBQXBrQyxHQUFjLElBQUE3QixLQUFBOEIsRUFBQSxHQUFBQSxFQUFBTixlQUFBeEIsU0FBQXVtQyxHQUFBLE9BQUFELEdBQUF6a0MsR0FBQUMsRUFBQTlCLEdBQTZELE9BQUE2QixFQURxRjlCLEVBQUFxakIsWUFBQW1qQixHQUFBMWhDLFNBQUE4QyxjQUFBLE9BQUFoQixNQUFBLG1CQUFBL0IsZ0JBQUFxaEMsR0FBQUMsYUFBQU8saUJBQUFSLEdBQUFFLG1CQUFBTSxpQkFBQVIsR0FBQUcsZUFBQUssV0FBQSxvQkFBQTdoQyxlQUFBcWhDLEdBQUFJLGNBQUFLLFlBQzVFLElBQUFDLEdBQUFILEdBQUEsZ0JBQUFJLEdBQUFKLEdBQUEsc0JBQUFLLEdBQUFMLEdBQUEsa0JBQUFNLEdBQUFOLEdBQUEsaUJBQUFPLEdBQUEsc05BQUE5bUIsTUFBQSxLQUFBK21CLEdBQUEsS0FDNUksU0FBQUMsS0FBd0csT0FBMUZELElBQUFqbkMsRUFBQXFqQixZQUFBNGpCLEdBQUEsZ0JBQUFuaUMsU0FBQXFpQyxnQkFBQSwyQkFBMEZGLEdBQVUsSUFBQXRLLElBQU95SyxNQUFBLEtBQUFDLFdBQUEsS0FBQUMsY0FBQSxNQUErQyxTQUFBQyxLQUFjLEdBQUE1SyxHQUFBMkssY0FBQSxPQUFBM0ssR0FBQTJLLGNBQTBDLElBQUF4bEMsRUFBQTVCLEVBQUE2QixFQUFBNDZCLEdBQUEwSyxXQUFBcG5DLEVBQUE4QixFQUFBb0MsT0FBQW5DLEVBQUF3bEMsS0FBQXZsQyxFQUFBRCxFQUFBbUMsT0FBb0QsSUFBQXJDLEVBQUEsRUFBUUEsRUFBQTdCLEdBQUE4QixFQUFBRCxLQUFBRSxFQUFBRixHQUFpQkEsS0FBSyxJQUFBczNCLEVBQUFuNUIsRUFBQTZCLEVBQVUsSUFBQTVCLEVBQUEsRUFBUUEsR0FBQWs1QixHQUFBcjNCLEVBQUE5QixFQUFBQyxLQUFBOEIsRUFBQUMsRUFBQS9CLEdBQXNCQSxLQUErQyxPQUExQ3k4QixHQUFBMkssY0FBQXRsQyxFQUFBdU0sTUFBQXpNLEVBQUEsRUFBQTVCLEVBQUEsRUFBQUEsT0FBQSxHQUEwQ3k4QixHQUFBMkssY0FBdUIsU0FBQUUsS0FBYyxnQkFBQTdLLEdBQUF5SyxNQUFBekssR0FBQXlLLE1BQUF2bUMsTUFBQTg3QixHQUFBeUssTUFBQUYsTUFDOWEsSUFBQU8sR0FBQSx1SEFBQXZuQixNQUFBLEtBQUF3bkIsSUFBNkk1L0IsS0FBQSxLQUFBNUMsT0FBQSxLQUFBeTlCLGNBQUE3RyxFQUFBN0MsZ0JBQUEwTyxXQUFBLEtBQUFDLFFBQUEsS0FBQUMsV0FBQSxLQUFBQyxVQUFBLFNBQUFobUMsR0FBeUgsT0FBQUEsRUFBQWdtQyxXQUFBaHFCLEtBQUFpcUIsT0FBK0JsYixpQkFBQSxLQUFBbWIsVUFBQSxNQUNyUyxTQUFBcEwsR0FBQTk2QixFQUFBQyxFQUFBOUIsRUFBQUMsR0FBNkcsUUFBQThCLEtBQXpGYSxLQUFBcWlDLGVBQUFwakMsRUFBc0JlLEtBQUF1aUMsWUFBQXJqQyxFQUFtQmMsS0FBQW9sQyxZQUFBaG9DLEVBQW1CNkIsRUFBQWUsS0FBQTRKLFlBQUF5N0IsVUFBNkJwbUMsRUFBQUwsZUFBQU8sTUFBQUQsRUFBQUQsRUFBQUUsSUFBQWEsS0FBQWIsR0FBQUQsRUFBQTlCLEdBQUEsV0FBQStCLEVBQUFhLEtBQUFxQyxPQUFBaEYsRUFBQTJDLEtBQUFiLEdBQUEvQixFQUFBK0IsSUFBK1EsT0FBM0thLEtBQUFzbEMsb0JBQUEsTUFBQWxvQyxFQUFBNHNCLGlCQUFBNXNCLEVBQUE0c0Isa0JBQUEsSUFBQTVzQixFQUFBbW9DLGFBQUF0TSxFQUFBOUMsZ0JBQUE4QyxFQUFBL0MsaUJBQThIbDJCLEtBQUFxZ0MscUJBQUFwSCxFQUFBL0MsaUJBQTZDbDJCLEtBRzVYLFNBQUF3bEMsR0FBQXZtQyxFQUFBQyxFQUFBOUIsRUFBQUMsR0FBcUIsR0FBQTJDLEtBQUF5bEMsVUFBQW5rQyxPQUFBLENBQTBCLElBQUFuQyxFQUFBYSxLQUFBeWxDLFVBQUF6b0IsTUFBZ0QsT0FBckJoZCxLQUFBOUMsS0FBQWlDLEVBQUFGLEVBQUFDLEVBQUE5QixFQUFBQyxHQUFxQjhCLEVBQVMsV0FBQWEsS0FBQWYsRUFBQUMsRUFBQTlCLEVBQUFDLEdBQXlCLFNBQUFxb0MsR0FBQXptQyxHQUFlQSxhQUFBZSxNQUFBbzVCLEVBQUEsT0FBa0NuNkIsRUFBQTBtQyxhQUFlLEdBQUEzbEMsS0FBQXlsQyxVQUFBbmtDLFFBQUF0QixLQUFBeWxDLFVBQUFqa0MsS0FBQXZDLEdBQWlELFNBQUEybUMsR0FBQTNtQyxHQUFlQSxFQUFBd21DLGFBQWV4bUMsRUFBQTRtQyxVQUFBTCxHQUFldm1DLEVBQUFzaEMsUUFBQW1GLEdBRi9SN21DLEVBQUFrN0IsR0FBQXA3QixXQUFldXJCLGVBQUEsV0FBMEJscUIsS0FBQWdxQixrQkFBQSxFQUF5QixJQUFBL3FCLEVBQUFlLEtBQUFvbEMsWUFBdUJubUMsTUFBQWlyQixlQUFBanJCLEVBQUFpckIsaUJBQUEsa0JBQUFqckIsRUFBQXNtQyxjQUFBdG1DLEVBQUFzbUMsYUFBQSxHQUFBdmxDLEtBQUFzbEMsbUJBQUFyTSxFQUFBOUMsa0JBQXdJMlAsZ0JBQUEsV0FBNEIsSUFBQTdtQyxFQUFBZSxLQUFBb2xDLFlBQXVCbm1DLE1BQUE2bUMsZ0JBQUE3bUMsRUFBQTZtQyxrQkFBQSxrQkFBQTdtQyxFQUFBOG1DLGVBQUE5bUMsRUFBQThtQyxjQUFBLEdBQUEvbEMsS0FBQXFnQyxxQkFBQXBILEVBQUE5QyxrQkFBOEk2UCxRQUFBLFdBQW9CaG1DLEtBQUFzZ0MsYUFBQXJILEVBQUE5QyxpQkFBb0NtSyxhQUFBckgsRUFBQS9DLGlCQUMxZHlQLFdBQUEsV0FBc0IsSUFBQXptQyxFQUFBRCxFQUFBZSxLQUFBNEosWUFBQXk3QixVQUFtQyxJQUFBbm1DLEtBQUFELEVBQUFlLEtBQUFkLEdBQUEsS0FBd0IsSUFBQUQsRUFBQSxFQUFRQSxFQUFBMmxDLEdBQUF0akMsT0FBWXJDLElBQUFlLEtBQUE0a0MsR0FBQTNsQyxJQUFBLFFBQXdCODZCLEdBQUFzTCxVQUFBUixHQUFlOUssR0FBQWtNLE9BQUEsU0FBQWhuQyxHQUFxQixTQUFBQyxLQUFjLFNBQUE5QixJQUFhLE9BQUFDLEVBQUF3RSxNQUFBN0IsS0FBQThCLFdBQStCLElBQUF6RSxFQUFBMkMsS0FBV2QsRUFBQVAsVUFBQXRCLEVBQUFzQixVQUF3QixJQUFBUSxFQUFBLElBQUFELEVBQTZILE9BQWpITCxFQUFBTSxFQUFBL0IsRUFBQXVCLFdBQWlCdkIsRUFBQXVCLFVBQUFRLEVBQWMvQixFQUFBdUIsVUFBQWlMLFlBQUF4TSxFQUEwQkEsRUFBQWlvQyxVQUFBeG1DLEtBQWdCeEIsRUFBQWdvQyxVQUFBcG1DLEdBQWdCN0IsRUFBQTZvQyxPQUFBNW9DLEVBQUE0b0MsT0FBa0JMLEdBQUF4b0MsR0FBTUEsR0FBVXdvQyxHQUFBN0wsSUFDekYsSUFBQW1NLEdBQUFuTSxHQUFBa00sUUFBaUIzdEIsS0FBQSxPQUFVNnRCLEdBQUFwTSxHQUFBa00sUUFBZTN0QixLQUFBLE9BQVU4dEIsSUFBQSxZQUFBQyxHQUFBbHBDLEVBQUFxakIsV0FBQSxxQkFBQXhlLE9BQUFza0MsR0FBQSxLQUFzRW5wQyxFQUFBcWpCLFdBQUEsaUJBQUF2ZSxXQUFBcWtDLEdBQUFya0MsU0FBQXNrQyxjQUN0YSxJQUFBQyxHQUFBcnBDLEVBQUFxakIsV0FBQSxjQUFBeGUsU0FBQXNrQyxHQUFBRyxHQUFBdHBDLEVBQUFxakIsYUFBQTZsQixJQUFBQyxJQUFBLEVBQUFBLElBQUEsSUFBQUEsSUFBQUksR0FBQXhULE9BQUFvQyxhQUFBLElBQUFxUixJQUFxSEMsYUFBYWpJLHlCQUF5QmtJLFFBQUEsZ0JBQUFDLFNBQUEsd0JBQXdEOUgsY0FBQSxrREFBZ0UrSCxnQkFBaUJwSSx5QkFBeUJrSSxRQUFBLG1CQUFBQyxTQUFBLDJCQUE4RDlILGFBQUEsdURBQUEzaEIsTUFBQSxNQUFnRjJwQixrQkFBbUJySSx5QkFBeUJrSSxRQUFBLHFCQUN2ZkMsU0FBQSw2QkFBcUM5SCxhQUFBLHlEQUFBM2hCLE1BQUEsTUFBa0Y0cEIsbUJBQW9CdEkseUJBQXlCa0ksUUFBQSxzQkFBQUMsU0FBQSw4QkFBb0U5SCxhQUFBLDBEQUFBM2hCLE1BQUEsT0FBb0Y2cEIsSUFBQSxFQUM1VCxTQUFBQyxHQUFBbG9DLEVBQUFDLEdBQWlCLE9BQUFELEdBQVUsdUJBQUFtbkMsR0FBQXhoQyxRQUFBMUYsRUFBQWtvQyxTQUE4QywyQkFBQWxvQyxFQUFBa29DLFFBQXNDLG1EQUFzRCxrQkFBa0IsU0FBQUMsR0FBQXBvQyxHQUEwQix1QkFBWEEsSUFBQXFvQyxTQUFXLFNBQUFyb0MsSUFBQXFaLEtBQUEsS0FBa0QsSUFBQWl2QixJQUFBLEVBRW5RLElBQUFDLElBQVEvSSxXQUFBa0ksR0FBQW5JLGNBQUEsU0FBQXYvQixFQUFBQyxFQUFBOUIsRUFBQUMsR0FBOEMsSUFBQThCLE9BQUEsRUFBYUMsT0FBQSxFQUFhLEdBQUFpbkMsR0FBQW5uQyxFQUFBLENBQVMsT0FBQUQsR0FBVSx1QkFBQUUsRUFBQXduQyxHQUFBSyxpQkFBOEMsTUFBQTluQyxFQUFRLHFCQUFBQyxFQUFBd25DLEdBQUFJLGVBQTBDLE1BQUE3bkMsRUFBUSx3QkFBQUMsRUFBQXduQyxHQUFBTSxrQkFBZ0QsTUFBQS9uQyxFQUFRQyxPQUFBLE9BQVNvb0MsR0FBQUosR0FBQWxvQyxFQUFBN0IsS0FBQStCLEVBQUF3bkMsR0FBQUksZ0JBQUEsWUFBQTluQyxHQUFBLE1BQUE3QixFQUFBZ3FDLFVBQUFqb0MsRUFBQXduQyxHQUFBSyxrQkFDckksT0FEb083bkMsR0FBQXNuQyxLQUFBYyxJQUFBcG9DLElBQUF3bkMsR0FBQUssaUJBQUE3bkMsSUFBQXduQyxHQUFBSSxnQkFBQVEsS0FBQW5vQyxFQUFBc2xDLE9BQUE1SyxHQUFBeUssTUFBQWxuQyxFQUFBeThCLEdBQUEwSyxXQUFBRyxLQUFBNEMsSUFBQSxJQUFBcG9DLEVBQUErbUMsR0FBQUwsVUFBQTFtQyxFQUFBRCxFQUFBOUIsRUFBQUMsR0FBQStCLEVBQUFELEVBQUFtWixLQUMzV2xaLEVBQUEsUUFBQUEsRUFBQWlvQyxHQUFBanFDLE1BQUErQixFQUFBbVosS0FBQWxaLEdBQUF1akMsR0FBQXhqQyxHQUFBQyxFQUFBRCxHQUFBQyxFQUFBLE1BQW1ESCxFQUFBdW5DLEdBSDBOLFNBQUF2bkMsRUFBQUMsR0FBaUIsT0FBQUQsR0FBVSw0QkFBQW9vQyxHQUFBbm9DLEdBQW1DLDJCQUFBQSxFQUFBdW9DLE1BQUEsTUFBNENQLElBQUEsRUFBTVIsSUFBVSx1QkFBQXpuQyxFQUFBQyxFQUFBb1osUUFBQW91QixJQUFBUSxHQUFBLEtBQUFqb0MsRUFBbUQscUJBR3ZZeW9DLENBQUF6b0MsRUFBQTdCLEdBRm5ELFNBQUE2QixFQUFBQyxHQUFpQixHQUFBcW9DLEdBQUEseUJBQUF0b0MsSUFBQW9uQyxJQUFBYyxHQUFBbG9DLEVBQUFDLElBQUFELEVBQUF5bEMsS0FBQTVLLEdBQUF5SyxNQUFBLEtBQUF6SyxHQUFBMEssV0FBQSxLQUFBMUssR0FBQTJLLGNBQUEsS0FBQThDLElBQUEsRUFBQXRvQyxHQUFBLEtBQXlILE9BQUFBLEdBQVUsd0JBQXlCLG9CQUFBQyxFQUFBdXFCLFNBQUF2cUIsRUFBQXNxQixRQUFBdHFCLEVBQUFxcUIsVUFBQXJxQixFQUFBdXFCLFNBQUF2cUIsRUFBQXNxQixPQUFBLENBQTJFLEdBQUF0cUIsRUFBQXlvQyxNQUFBLEVBQUF6b0MsRUFBQXlvQyxLQUFBcm1DLE9BQUEsT0FBQXBDLEVBQUF5b0MsS0FBeUMsR0FBQXpvQyxFQUFBdW9DLE1BQUEsT0FBQXZVLE9BQUFvQyxhQUFBcDJCLEVBQUF1b0MsT0FBK0MsWUFBWSw0QkFBQWhCLEdBQUEsS0FBQXZuQyxFQUFBb1osS0FBNEMscUJBRXJWc3ZCLENBQUEzb0MsRUFBQTdCLE1BQUE4QixFQUFBaW5DLEdBQUFOLFVBQUFjLEdBQUFDLFlBQUExbkMsRUFBQTlCLEVBQUFDLElBQUFpYixLQUFBclosRUFBQTBqQyxHQUFBempDLE1BQUEsS0FBb0YsT0FBQUUsRUFBQUYsRUFBQSxPQUFBQSxFQUFBRSxLQUFBRixLQUFvQzJvQyxHQUFBLEtBQUFDLElBQWFDLG1DQUFBLFNBQUE5b0MsR0FBK0M0b0MsR0FBQTVvQyxJQUFNK29DLEdBQUEsS0FBQUMsR0FBQSxLQUFpQixTQUFBQyxHQUFBanBDLEdBQWUsR0FBQUEsRUFBQTBnQyxFQUFBMWdDLEdBQUEsQ0FBWTRvQyxJQUFBLG1CQUFBQSxHQUFBTSx3QkFBQS9PLEVBQUEsT0FBa0UsSUFBQWw2QixFQUFBd2dDLEVBQUF6Z0MsRUFBQTJoQyxXQUFzQmlILEdBQUFNLHVCQUFBbHBDLEVBQUEyaEMsVUFBQTNoQyxFQUFBZ0csS0FBQS9GLElBQWlELFNBQUFrcEMsR0FBQW5wQyxHQUFlK29DLEdBQUFDLE1BQUF6bUMsS0FBQXZDLEdBQUFncEMsSUFBQWhwQyxHQUFBK29DLEdBQUEvb0MsRUFDamIsU0FBQW9wQyxLQUFjLGNBQUFMLElBQUEsT0FBQUMsR0FBNEIsU0FBQUssS0FBYyxHQUFBTixHQUFBLENBQU8sSUFBQS9vQyxFQUFBK29DLEdBQUE5b0MsRUFBQStvQyxHQUErQixHQUFqQkEsR0FBQUQsR0FBQSxLQUFXRSxHQUFBanBDLEdBQU1DLEVBQUEsSUFBQUQsRUFBQSxFQUFhQSxFQUFBQyxFQUFBb0MsT0FBV3JDLElBQUFpcEMsR0FBQWhwQyxFQUFBRCxLQUFjLElBQUFzcEMsSUFBUXRILFVBQUE2RyxHQUFBVSxvQkFBQUosR0FBQUssa0JBQUFKLEdBQUFLLHFCQUFBSixJQUFrRixTQUFBSyxHQUFBMXBDLEVBQUFDLEdBQWlCLE9BQUFELEVBQUFDLEdBQVksU0FBQTBwQyxHQUFBM3BDLEVBQUFDLEVBQUE5QixHQUFtQixPQUFBNkIsRUFBQUMsRUFBQTlCLEdBQWMsU0FBQXlyQyxNQUFlLElBQUFDLElBQUEsRUFBVSxTQUFBQyxHQUFBOXBDLEVBQUFDLEdBQWlCLEdBQUE0cEMsR0FBQSxPQUFBN3BDLEVBQUFDLEdBQWtCNHBDLElBQUEsRUFBTSxJQUFJLE9BQUFILEdBQUExcEMsRUFBQUMsR0FBZSxRQUFRNHBDLElBQUEsRUFBQVQsT0FBQVEsS0FBQVAsT0FDelgsSUFBQVUsSUFBUUMsT0FBQSxFQUFBQyxNQUFBLEVBQUFDLFVBQUEsRUFBQUMsa0JBQUEsRUFBQUMsT0FBQSxFQUFBQyxPQUFBLEVBQUEzZ0IsUUFBQSxFQUFBNGdCLFVBQUEsRUFBQUMsT0FBQSxFQUFBdnFCLFFBQUEsRUFBQXdxQixLQUFBLEVBQUFDLE1BQUEsRUFBQUMsTUFBQSxFQUFBcGlCLEtBQUEsRUFBQXFpQixNQUFBLEdBQW1KLFNBQUFDLEdBQUE1cUMsR0FBZSxJQUFBQyxFQUFBRCxLQUFBNnFDLFVBQUE3cUMsRUFBQTZxQyxTQUFBMUcsY0FBOEMsZ0JBQUFsa0MsSUFBQThwQyxHQUFBL3BDLEVBQUFnRyxNQUFBLGFBQUEvRixFQUFvRCxTQUFBNnFDLEdBQUE5cUMsR0FBeUcsT0FBMUZBLElBQUFvRCxRQUFBcEQsRUFBQStxQyxZQUFBaG9DLFFBQWlDaW9DLDBCQUFBaHJDLElBQUFnckMseUJBQXlELElBQUFockMsRUFBQWlyQyxTQUFBanJDLEVBQUF3RixXQUFBeEYsRUFDclgsU0FBQWtyQyxHQUFBbHJDLEVBQUFDLEdBQWlCLFNBQUEvQixFQUFBcWpCLFdBQUF0aEIsS0FBQSxxQkFBQStDLGNBQXVFL0MsR0FBVEQsRUFBQSxLQUFBQSxLQUFTZ0QsYUFBZ0IvQyxFQUFBK0MsU0FBQThDLGNBQUEsUUFBQVUsYUFBQXhHLEVBQUEsV0FBNkRDLEVBQUEsbUJBQUFBLEVBQUFELElBQStCQyxHQUFTLFNBQUFrckMsR0FBQW5yQyxHQUFlLElBQUFDLEVBQUFELEVBQUFnRyxLQUFhLE9BQUFoRyxJQUFBNnFDLFdBQUEsVUFBQTdxQyxFQUFBbWtDLGdCQUFBLGFBQUFsa0MsR0FBQSxVQUFBQSxHQUVyTixTQUFBbXJDLEdBQUFwckMsR0FBZUEsRUFBQXFyQyxnQkFBQXJyQyxFQUFBcXJDLGNBRG5DLFNBQUFyckMsR0FBZSxJQUFBQyxFQUFBa3JDLEdBQUFuckMsR0FBQSxrQkFBQTdCLEVBQUFLLE9BQUEwYyx5QkFBQWxiLEVBQUEySyxZQUFBakwsVUFBQU8sR0FBQTdCLEVBQUEsR0FBQTRCLEVBQUFDLEdBQXFHLElBQUFELEVBQUFMLGVBQUFNLFNBQUEsSUFBQTlCLEdBQUEsbUJBQUFBLEVBQUFRLEtBQUEsbUJBQUFSLEVBQUFtdEMsSUFBQSxDQUF1RyxJQUFBcHJDLEVBQUEvQixFQUFBUSxJQUFBd0IsRUFBQWhDLEVBQUFtdEMsSUFBaU0sT0FBN0s5c0MsT0FBQUMsZUFBQXVCLEVBQUFDLEdBQTJCNEssY0FBQSxFQUFBbE0sSUFBQSxXQUErQixPQUFBdUIsRUFBQWpDLEtBQUE4QyxPQUFvQnVxQyxJQUFBLFNBQUF0ckMsR0FBaUI1QixFQUFBLEdBQUE0QixFQUFPRyxFQUFBbEMsS0FBQThDLEtBQUFmLE1BQWtCeEIsT0FBQUMsZUFBQXVCLEVBQUFDLEdBQTJCdkIsV0FBQVAsRUFBQU8sY0FBaUM2c0MsU0FBQSxXQUFvQixPQUFBbnRDLEdBQVNvdEMsU0FBQSxTQUFBeHJDLEdBQXNCNUIsRUFBQSxHQUFBNEIsR0FBT3lyQyxhQUFBLFdBQXlCenJDLEVBQUFxckMsY0FDdGYsWUFBS3JyQyxFQUFBQyxNQUE4QnlyQyxDQUFBMXJDLElBQXlDLFNBQUEyckMsR0FBQTNyQyxHQUFlLElBQUFBLEVBQUEsU0FBZSxJQUFBQyxFQUFBRCxFQUFBcXJDLGNBQXNCLElBQUFwckMsRUFBQSxTQUFlLElBQUE5QixFQUFBOEIsRUFBQXNyQyxXQUFtQm50QyxFQUFBLEdBQTJELE9BQWxENEIsSUFBQTVCLEVBQUErc0MsR0FBQW5yQyxLQUFBNHJDLFFBQUEsZUFBQTVyQyxFQUFBakIsUUFBOENpQixFQUFBNUIsS0FBSUQsSUFBQThCLEVBQUF1ckMsU0FBQXhyQyxJQUFBLEdBQzdOLElBQUE2ckMsR0FBQXhOLEVBQUFSLG1EQUFBQyxrQkFBQWdPLEdBQUEsbUJBQUFqdEMsZUFBQWk3QixJQUFBaVMsR0FBQUQsR0FBQWp0QyxPQUFBaTdCLElBQUEsdUJBQUFrUyxHQUFBRixHQUFBanRDLE9BQUFpN0IsSUFBQSxzQkFBQW1TLEdBQUFILEdBQUFqdEMsT0FBQWk3QixJQUFBLHdCQUFBb1MsR0FBQUosR0FBQWp0QyxPQUFBaTdCLElBQUEsMkJBQUFxUyxHQUFBTCxHQUFBanRDLE9BQUFpN0IsSUFBQSx3QkFBQXNTLEdBQUFOLEdBQUFqdEMsT0FBQWk3QixJQUFBLHdCQUFBdVMsR0FBQVAsR0FBQWp0QyxPQUFBaTdCLElBQUEsdUJBQUF3UyxHQUFBUixHQUFBanRDLE9BQUFpN0IsSUFBQSwwQkFBQXlTLEdBQUFULEdBQUFqdEMsT0FBQWk3QixJQUFBLDJCQUFBMFMsR0FBQVYsR0FBQWp0QyxPQUFBaTdCLElBQUEsaUJBQ0EsTUFBQTJTLEdBQUEsbUJBQUE1dEMsZUFBQWlnQixTQUFxRCxTQUFBNHRCLEdBQUExc0MsR0FBZSxjQUFBQSxRQUFBLElBQUFBLEVBQUEsS0FBNkUsbUJBQTdCQSxFQUFBeXNDLElBQUF6c0MsRUFBQXlzQyxLQUFBenNDLEVBQUEsZUFBNkJBLEVBQUEsS0FDakosU0FBQTJzQyxHQUFBM3NDLEdBQWUsSUFBQUMsRUFBQUQsRUFBQWdHLEtBQWEsc0JBQUEvRixFQUFBLE9BQUFBLEVBQUFxTyxhQUFBck8sRUFBQTVCLEtBQXNELG9CQUFBNEIsRUFBQSxPQUFBQSxFQUFnQyxPQUFBQSxHQUFVLEtBQUFxc0MsR0FBQSxrQkFBMEIsS0FBQUQsR0FBQSx5QkFBaUMsS0FBQUosR0FBQSxzQkFBOEIsS0FBQUQsR0FBQSxvQkFBNEIsS0FBQUcsR0FBQSxrQkFBQW5zQyxFQUFBNHNDLGFBQUF0cUMsR0FBQSxJQUFnRCxLQUFBOHBDLEdBQUEseUJBQWlDLEtBQUFGLEdBQUEsbUJBQTJCLEtBQUFNLEdBQUEsZ0JBQXdCLG9CQUFBdnNDLEdBQUEsT0FBQUEsRUFBQSxPQUFBQSxFQUFBdzdCLFVBQW9ELEtBQUE4USxHQUFBLFlBQUF2c0MsRUFBQUMsRUFBQWtMLE9BQUFtRCxhQUFBck8sRUFBQWtMLE9BQUE5TSxNQUFBLGtCQUN6YTJCLEVBQUEsaUJBQW1CLFlBQVksU0FBQTZzQyxHQUFBN3NDLEdBQWUsSUFBQUMsRUFBQSxHQUFTLEdBQUdELEVBQUEsT0FBQUEsRUFBQXVpQyxLQUFnQixnQ0FBQXBrQyxFQUFBNkIsRUFBQThzQyxZQUFBMXVDLEVBQUE0QixFQUFBK3NDLGFBQWlFN3NDLEVBQUF5c0MsR0FBQTNzQyxHQUFZRyxFQUFBLEtBQVdoQyxJQUFBZ0MsRUFBQXdzQyxHQUFBeHVDLElBQWFBLEVBQUFDLEVBQUk4QixFQUFBLGFBQUFBLEdBQUEsWUFBQS9CLEVBQUEsUUFBQUEsRUFBQTZ1QyxTQUFBdnNDLFFBQUEsb0JBQUF0QyxFQUFBOHVDLFdBQUEsSUFBQTlzQyxFQUFBLGdCQUFBQSxFQUFBLFFBQTRILE1BQUFILEVBQVEsUUFBQUUsRUFBQSxHQUFhRCxHQUFBQyxFQUFLRixJQUFBaWpDLGFBQVdqakMsR0FBUyxPQUFBQyxFQUM3VixJQUFBaXRDLEdBQUEsOFZBQUFDLEdBQUEzdUMsT0FBQWtCLFVBQUFDLGVBQUF5dEMsTUFBNllDLE1BRXJMLFNBQUFyUyxHQUFBaDdCLEVBQUFDLEVBQUE5QixFQUFBQyxFQUFBOEIsR0FBc0JhLEtBQUF1c0MsZ0JBQUEsSUFBQXJ0QyxHQUFBLElBQUFBLEdBQUEsSUFBQUEsRUFBeUNjLEtBQUF3c0MsY0FBQW52QyxFQUFxQjJDLEtBQUF5c0MsbUJBQUF0dEMsRUFBMEJhLEtBQUEwc0MsZ0JBQUF0dkMsRUFBdUI0QyxLQUFBMnNDLGFBQUExdEMsRUFBb0JlLEtBQUFpRixLQUFBL0YsRUFBWSxJQUFBaTdCLE1BQzdYLHVJQUFBOWMsTUFBQSxLQUFBN1gsUUFBQSxTQUFBdkcsR0FBc0trN0IsR0FBQWw3QixHQUFBLElBQUFnN0IsR0FBQWg3QixFQUFBLEtBQUFBLEVBQUEsVUFBNEIsc0dBQUF1RyxRQUFBLFNBQUF2RyxHQUE0SCxJQUFBQyxFQUFBRCxFQUFBLEdBQVdrN0IsR0FBQWo3QixHQUFBLElBQUErNkIsR0FBQS82QixFQUFBLEtBQUFELEVBQUEsWUFBK0Isb0RBQUF1RyxRQUFBLFNBQUF2RyxHQUF5RWs3QixHQUFBbDdCLEdBQUEsSUFBQWc3QixHQUFBaDdCLEVBQUEsS0FBQUEsRUFBQW1rQyxjQUFBLFNBQ2piLDJEQUFBNTlCLFFBQUEsU0FBQXZHLEdBQWdGazdCLEdBQUFsN0IsR0FBQSxJQUFBZzdCLEdBQUFoN0IsRUFBQSxLQUFBQSxFQUFBLFFBQTRCLGdNQUFBb2UsTUFBQSxLQUFBN1gsUUFBQSxTQUFBdkcsR0FBK05rN0IsR0FBQWw3QixHQUFBLElBQUFnN0IsR0FBQWg3QixFQUFBLEtBQUFBLEVBQUFta0MsY0FBQSxTQUEwQyx5Q0FBQTU5QixRQUFBLFNBQUF2RyxHQUE4RGs3QixHQUFBbDdCLEdBQUEsSUFBQWc3QixHQUFBaDdCLEVBQUEsS0FBQUEsRUFBQW1rQyxjQUFBLFNBQ25iLHNCQUFBNTlCLFFBQUEsU0FBQXZHLEdBQTJDazdCLEdBQUFsN0IsR0FBQSxJQUFBZzdCLEdBQUFoN0IsRUFBQSxLQUFBQSxFQUFBbWtDLGNBQUEsU0FBMEMsNkJBQUE1OUIsUUFBQSxTQUFBdkcsR0FBa0RrN0IsR0FBQWw3QixHQUFBLElBQUFnN0IsR0FBQWg3QixFQUFBLEtBQUFBLEVBQUFta0MsY0FBQSxTQUEwQyxtQkFBQTU5QixRQUFBLFNBQUF2RyxHQUF3Q2s3QixHQUFBbDdCLEdBQUEsSUFBQWc3QixHQUFBaDdCLEVBQUEsS0FBQUEsRUFBQW1rQyxjQUFBLFFBQTBDLElBQUF3SixHQUFBLGdCQUF1QixTQUFBQyxHQUFBNXRDLEdBQWUsT0FBQUEsRUFBQSxHQUFBZ1osY0FHelMsU0FBQTYwQixHQUFBN3RDLEVBQUFDLEVBQUE5QixFQUFBQyxHQUFxQixJQUFBOEIsRUFBQWc3QixHQUFBdjdCLGVBQUFNLEdBQUFpN0IsR0FBQWo3QixHQUFBLE1BQW9DLE9BQUFDLEVBQUEsSUFBQUEsRUFBQThGLE1BQUE1SCxJQUFBLEVBQUE2QixFQUFBb0MsU0FBQSxNQUFBcEMsRUFBQSxVQUFBQSxFQUFBLFlBQUFBLEVBQUEsVUFBQUEsRUFBQSxRQU56RCxTQUFBRCxFQUFBQyxFQUFBOUIsRUFBQUMsR0FBcUIsVUFBQTZCLFFBQUEsSUFBQUEsR0FEOEYsU0FBQUQsRUFBQUMsRUFBQTlCLEVBQUFDLEdBQXFCLFVBQUFELEdBQUEsSUFBQUEsRUFBQTZILEtBQUEsU0FBaUMsY0FBQS9GLEdBQWlCLHFDQUF1QyxxQkFBQTdCLElBQTZCLE9BQUFELEtBQUFtdkMsZ0JBQWtFLFdBQTdCdHRDLElBQUFta0MsY0FBQTEzQixNQUFBLE9BQTZCLFVBQUF6TSxHQUErQixrQkFDMVU4dEMsQ0FBQTl0QyxFQUFBQyxFQUFBOUIsRUFBQUMsR0FBQSxTQUEwRCxHQUFBQSxFQUFBLFNBQWMsVUFBQUQsRUFBQSxPQUFBQSxFQUFBNkgsTUFBMkIsY0FBQS9GLEVBQWdCLGtCQUFBQSxFQUFvQixjQUFBOHRDLE1BQUE5dEMsR0FBdUIsY0FBQTh0QyxNQUFBOXRDLElBQUEsRUFBQUEsRUFBNEIsU0FNbkQrdEMsQ0FBQS90QyxFQUFBOUIsRUFBQStCLEVBQUE5QixLQUFBRCxFQUFBLE1BQUFDLEdBQUEsT0FBQThCLEVBUDVKLFNBQUFGLEdBQWUsUUFBQW10QyxHQUFBbHZDLEtBQUFvdkMsR0FBQXJ0QyxLQUEwQm10QyxHQUFBbHZDLEtBQUFtdkMsR0FBQXB0QyxLQUEwQmt0QyxHQUFBeHpCLEtBQUExWixHQUFBcXRDLEdBQUFydEMsSUFBQSxHQUE4Qm90QyxHQUFBcHRDLElBQUEsR0FBUyxJQU9rRGl1QyxDQUFBaHVDLEtBQUEsT0FBQTlCLEVBQUE2QixFQUFBa3VDLGdCQUFBanVDLEdBQUFELEVBQUF3RyxhQUFBdkcsRUFBQSxHQUFBOUIsSUFBQStCLEVBQUF1dEMsZ0JBQUF6dEMsRUFBQUUsRUFBQXd0QyxjQUFBLE9BQUF2dkMsRUFBQSxJQUFBK0IsRUFBQThGLE1BQUEsR0FBQTdILEdBQUE4QixFQUFBQyxFQUFBcXRDLGNBQUFudkMsRUFBQThCLEVBQUFzdEMsbUJBQUEsT0FBQXJ2QyxFQUFBNkIsRUFBQWt1QyxnQkFBQWp1QyxJQUFBOUIsRUFBQSxLQUFBK0IsSUFBQThGLE9BQUEsSUFBQTlGLElBQUEsSUFBQS9CLEVBQUEsTUFBQUEsRUFBQUMsRUFBQTRCLEVBQUFtdUMsZUFBQS92QyxFQUFBNkIsRUFBQTlCLEdBQUE2QixFQUFBd0csYUFBQXZHLEVBQUE5QixNQUM1SixTQUFBaXdDLEdBQUFwdUMsRUFBQUMsR0FBaUIsSUFBQTlCLEVBQUE4QixFQUFBMnJDLFFBQWdCLE9BQUFoc0MsS0FBV0ssR0FBSW91QyxvQkFBQSxFQUFBQyxrQkFBQSxFQUFBdnZDLFdBQUEsRUFBQTZzQyxRQUFBLE1BQUF6dEMsSUFBQTZCLEVBQUF1dUMsY0FBQUMsaUJBQTBHLFNBQUFDLEdBQUF6dUMsRUFBQUMsR0FBaUIsSUFBQTlCLEVBQUEsTUFBQThCLEVBQUFxdUMsYUFBQSxHQUFBcnVDLEVBQUFxdUMsYUFBQWx3QyxFQUFBLE1BQUE2QixFQUFBMnJDLFFBQUEzckMsRUFBQTJyQyxRQUFBM3JDLEVBQUFvdUMsZUFBMEZsd0MsRUFBQXV3QyxHQUFBLE1BQUF6dUMsRUFBQWxCLE1BQUFrQixFQUFBbEIsTUFBQVosR0FBOEI2QixFQUFBdXVDLGVBQWlCQyxlQUFBcHdDLEVBQUF1d0MsYUFBQXh3QyxFQUFBeXdDLFdBQUEsYUFBQTN1QyxFQUFBK0YsTUFBQSxVQUFBL0YsRUFBQStGLEtBQUEsTUFBQS9GLEVBQUEyckMsUUFBQSxNQUFBM3JDLEVBQUFsQixPQUFnSCxTQUFBOHZDLEdBQUE3dUMsRUFBQUMsR0FBNkIsT0FBWkEsSUFBQTJyQyxVQUFZaUMsR0FBQTd0QyxFQUFBLFVBQUFDLEdBQUEsR0FDamMsU0FBQTZ1QyxHQUFBOXVDLEVBQUFDLEdBQWlCNHVDLEdBQUE3dUMsRUFBQUMsR0FBUSxJQUFBOUIsRUFBQXV3QyxHQUFBenVDLEVBQUFsQixPQUFrQixNQUFBWixJQUFBLFdBQUE4QixFQUFBK0YsTUFBaUMsSUFBQTdILEdBQUEsS0FBQTZCLEVBQUFqQixPQUFBaUIsRUFBQWpCLE9BQUFaLEtBQUE2QixFQUFBakIsTUFBQSxHQUFBWixHQUFnRDZCLEVBQUFqQixRQUFBLEdBQUFaLElBQUE2QixFQUFBakIsTUFBQSxHQUFBWixJQUFvQzhCLEVBQUFOLGVBQUEsU0FBQW92QyxHQUFBL3VDLEVBQUFDLEVBQUErRixLQUFBN0gsR0FBQThCLEVBQUFOLGVBQUEsaUJBQUFvdkMsR0FBQS91QyxFQUFBQyxFQUFBK0YsS0FBQTBvQyxHQUFBenVDLEVBQUFxdUMsZUFBMkcsTUFBQXJ1QyxFQUFBMnJDLFNBQUEsTUFBQTNyQyxFQUFBb3VDLGlCQUFBcnVDLEVBQUFxdUMsaUJBQUFwdUMsRUFBQW91QyxnQkFDM1EsU0FBQVcsR0FBQWh2QyxFQUFBQyxFQUFBOUIsR0FBbUIsR0FBQThCLEVBQUFOLGVBQUEsVUFBQU0sRUFBQU4sZUFBQSxpQkFBZ0VNLEVBQUEsR0FBQUQsRUFBQXV1QyxjQUFBSSxhQUFrQyxJQUFBdndDLEVBQUE0QixFQUFBakIsTUFBY1osR0FBQThCLElBQUE3QixJQUFBNEIsRUFBQWpCLE1BQUFrQixHQUFzQkQsRUFBQXN1QyxhQUFBcnVDLEVBQTBCLE1BQVQ5QixFQUFBNkIsRUFBQTNCLFFBQVMyQixFQUFBM0IsS0FBQSxJQUFvQjJCLEVBQUFxdUMsZ0JBQUFydUMsRUFBQXF1QyxlQUFtQ3J1QyxFQUFBcXVDLGdCQUFBcnVDLEVBQUFxdUMsZUFBbUMsS0FBQWx3QyxJQUFBNkIsRUFBQTNCLEtBQUFGLEdBQW1CLFNBQUE0d0MsR0FBQS91QyxFQUFBQyxFQUFBOUIsR0FBbUIsV0FBQThCLEdBQUFELEVBQUFpdkMsY0FBQUMsZ0JBQUFsdkMsSUFBQSxNQUFBN0IsRUFBQTZCLEVBQUFzdUMsYUFBQSxHQUFBdHVDLEVBQUF1dUMsY0FBQUksYUFBQTN1QyxFQUFBc3VDLGVBQUEsR0FBQW53QyxJQUFBNkIsRUFBQXN1QyxhQUFBLEdBQUFud0MsSUFDblQsU0FBQXV3QyxHQUFBMXVDLEdBQWUsY0FBQUEsR0FBaUIsNEVBQUFBLEVBQW1GLGtCQU5uSCwwakNBQUFvZSxNQUFBLEtBQUE3WCxRQUFBLFNBQUF2RyxHQUF5bEMsSUFBQUMsRUFBQUQsRUFBQVMsUUFBQWt0QyxHQUN6bENDLElBQUkxUyxHQUFBajdCLEdBQUEsSUFBQSs2QixHQUFBLzZCLEVBQUEsS0FBQUQsRUFBQSxRQUE0QixzRkFBQW9lLE1BQUEsS0FBQTdYLFFBQUEsU0FBQXZHLEdBQXFILElBQUFDLEVBQUFELEVBQUFTLFFBQUFrdEMsR0FBQUMsSUFBdUIxUyxHQUFBajdCLEdBQUEsSUFBQSs2QixHQUFBLzZCLEVBQUEsS0FBQUQsRUFBQSxtQ0FBc0QsbUNBQUF1RyxRQUFBLFNBQUF2RyxHQUF3RCxJQUFBQyxFQUFBRCxFQUFBUyxRQUFBa3RDLEdBQUFDLElBQXVCMVMsR0FBQWo3QixHQUFBLElBQUErNkIsR0FBQS82QixFQUFBLEtBQUFELEVBQUEsMENBQThEazdCLEdBQUFpVSxTQUFBLElBQUFuVSxHQUFBLGlDQUsxTyxJQUFBb1UsSUFBUUMsUUFBUTNQLHlCQUF5QmtJLFFBQUEsV0FBQUMsU0FBQSxtQkFBOEM5SCxhQUFBLDhEQUFBM2hCLE1BQUEsT0FBeUYsU0FBQWt4QixHQUFBdHZDLEVBQUFDLEVBQUE5QixHQUE4RSxPQUEzRDZCLEVBQUE4NkIsR0FBQThMLFVBQUF3SSxHQUFBQyxPQUFBcnZDLEVBQUFDLEVBQUE5QixJQUErQjZILEtBQUEsU0FBZ0JtakMsR0FBQWhyQyxHQUFNdWxDLEdBQUExakMsR0FBTUEsRUFBUyxJQUFBdXZDLEdBQUEsS0FBQUMsR0FBQSxLQUFvQixTQUFBQyxHQUFBenZDLEdBQWU2aEMsRUFBQTdoQyxHQUFBLEdBQVMsU0FBQTB2QyxHQUFBMXZDLEdBQTJCLEdBQUEyckMsR0FBWm5KLEVBQUF4aUMsSUFBWSxPQUFBQSxFQUNuZCxTQUFBMnZDLEdBQUEzdkMsRUFBQUMsR0FBaUIsY0FBQUQsRUFBQSxPQUFBQyxFQUF5QixJQUFBMnZDLElBQUEsRUFBMkYsU0FBQUMsS0FBY04sUUFBQTF0QixZQUFBLG1CQUFBaXVCLElBQUFOLEdBQUFELEdBQUEsTUFBdUQsU0FBQU8sR0FBQTl2QyxHQUFlLFVBQUFBLEVBQUEwdEMsY0FBQWdDLEdBQUFGLEtBQUExRixHQUFBMkYsR0FBQXp2QyxFQUFBc3ZDLEdBQUFFLEdBQUF4dkMsRUFBQThxQyxHQUFBOXFDLEtBQThELFNBQUErdkMsR0FBQS92QyxFQUFBQyxFQUFBOUIsR0FBbUIsVUFBQTZCLEdBQUE2dkMsS0FBQUwsR0FBQXJ4QyxHQUFBb3hDLEdBQUF0dkMsR0FBQTBoQixZQUFBLG1CQUFBbXVCLEtBQUEsU0FBQTl2QyxHQUFBNnZDLEtBQW9GLFNBQUFHLEdBQUFod0MsR0FBZSx1QkFBQUEsR0FBQSxVQUFBQSxHQUFBLFlBQUFBLEVBQUEsT0FBQTB2QyxHQUFBRixJQUM3WSxTQUFBUyxHQUFBandDLEVBQUFDLEdBQWlCLGFBQUFELEVBQUEsT0FBQTB2QyxHQUFBenZDLEdBQTRCLFNBQUFpd0MsR0FBQWx3QyxFQUFBQyxHQUFpQixhQUFBRCxHQUFBLFdBQUFBLEVBQUEsT0FBQTB2QyxHQUFBenZDLEdBRFYvQixFQUFBcWpCLFlBQUFxdUIsR0FBQTFFLEdBQUEsWUFBQWxvQyxTQUFBc2tDLGNBQUEsRUFBQXRrQyxTQUFBc2tDLGVBRXBELElBQUE2SSxJQUFRM1EsV0FBQTRQLEdBQUFnQix1QkFBQVIsR0FBQXJRLGNBQUEsU0FBQXYvQixFQUFBQyxFQUFBOUIsRUFBQUMsR0FBd0UsSUFBQThCLEVBQUFELEVBQUF1aUMsRUFBQXZpQyxHQUFBOEMsT0FBQTVDLE9BQUEsRUFBQW0zQixPQUFBLEVBQUFrRSxFQUFBdDdCLEVBQUEycUMsVUFBQTNxQyxFQUFBMnFDLFNBQUExRyxjQUFtUCxHQUFySyxXQUFBM0ksR0FBQSxVQUFBQSxHQUFBLFNBQUF0N0IsRUFBQThGLEtBQUE3RixFQUFBd3ZDLEdBQUEvRSxHQUFBMXFDLEdBQUEwdkMsR0FBQXp2QyxFQUFBK3ZDLElBQUEvdkMsRUFBQTZ2QyxHQUFBMVksRUFBQXlZLEtBQUF2VSxFQUFBdDdCLEVBQUEycUMsV0FBQSxVQUFBclAsRUFBQTJJLGdCQUFBLGFBQUFqa0MsRUFBQThGLE1BQUEsVUFBQTlGLEVBQUE4RixRQUFBN0YsRUFBQTh2QyxJQUFxSzl2QyxRQUFBSCxFQUFBQyxJQUFBLE9BQUFxdkMsR0FBQW52QyxFQUFBaEMsRUFBQUMsR0FBa0NrNUIsS0FBQXQzQixFQUFBRSxFQUFBRCxHQUFZLFNBQUFELE1BQUFFLEVBQUFxdUMsZ0JBQUF2dUMsRUFBQTR1QyxZQUFBLFdBQUExdUMsRUFBQThGLE1BQUErb0MsR0FBQTd1QyxFQUFBLFNBQUFBLEVBQUFuQixTQUEwRnN4QyxHQUFBdlYsR0FBQWtNLFFBQWNzSixLQUFBLEtBQUFqSSxPQUFBLE9BQXNCa0ksSUFBTUMsSUFBQSxTQUNyZkMsUUFBQSxVQUFBQyxLQUFBLFVBQUFDLE1BQUEsWUFBbUQsU0FBQUMsR0FBQTV3QyxHQUFlLElBQUFDLEVBQUFjLEtBQUFvbEMsWUFBdUIsT0FBQWxtQyxFQUFBNHdDLGlCQUFBNXdDLEVBQUE0d0MsaUJBQUE3d0MsUUFBQXV3QyxHQUFBdndDLE9BQUFDLEVBQUFELEdBQW9FLFNBQUE4d0MsS0FBYyxPQUFBRixHQUMzSyxJQUFBRyxHQUFBVixHQUFBckosUUFBa0JnSyxRQUFBLEtBQUFDLFFBQUEsS0FBQUMsUUFBQSxLQUFBQyxRQUFBLEtBQUFDLE1BQUEsS0FBQUMsTUFBQSxLQUFBN21CLFFBQUEsS0FBQUMsU0FBQSxLQUFBRixPQUFBLEtBQUFELFFBQUEsS0FBQXVtQixpQkFBQUMsR0FBQTlsQixPQUFBLEtBQUFzbUIsUUFBQSxLQUFBQyxjQUFBLFNBQUF2eEMsR0FBcU0sT0FBQUEsRUFBQXV4QyxnQkFBQXZ4QyxFQUFBd3hDLGNBQUF4eEMsRUFBQStxQyxXQUFBL3FDLEVBQUF5eEMsVUFBQXp4QyxFQUFBd3hDLGdCQUFrRkUsR0FBQVgsR0FBQS9KLFFBQWdCMkssVUFBQSxLQUFBQyxNQUFBLEtBQUFDLE9BQUEsS0FBQUMsU0FBQSxLQUFBQyxNQUFBLEtBQUFDLE1BQUEsS0FBQUMsWUFBQSxLQUFBQyxVQUFBLE9BQTBHNXZDLElBQU02dkMsWUFBWXZTLGlCQUFBLGVBQUFHLGNBQUEseUJBQ3JicVMsWUFBWXhTLGlCQUFBLGVBQUFHLGNBQUEseUJBQXNFc1MsY0FBZXpTLGlCQUFBLGlCQUFBRyxjQUFBLDZCQUE0RXVTLGNBQWUxUyxpQkFBQSxpQkFBQUcsY0FBQSw4QkFBNkV3UyxJQUFLL1MsV0FBQWw5QixHQUFBaTlCLGNBQUEsU0FBQXYvQixFQUFBQyxFQUFBOUIsRUFBQUMsR0FBOEMsSUFBQThCLEVBQUEsY0FBQUYsR0FBQSxnQkFBQUEsRUFBQUcsRUFBQSxhQUFBSCxHQUFBLGVBQUFBLEVBQTRFLEdBQUFFLElBQUEvQixFQUFBb3pDLGVBQUFwekMsRUFBQXF6QyxlQUFBcnhDLElBQUFELEVBQUEsWUFDclQsR0FEZ1hBLEVBQUE5QixFQUFBMkUsU0FBQTNFLEtBQUE4QixFQUFBOUIsRUFBQTZ3QyxlQUFBL3VDLEVBQUFzeUMsYUFDbmN0eUMsRUFBQXV5QyxhQUFBMXZDLE9BQXNCNUMsS0FBQUYsT0FBQTlCLEVBQUFvekMsZUFBQXB6QyxFQUFBc3pDLFdBQUFuUCxFQUFBcmlDLEdBQUEsTUFBQUUsRUFBQSxLQUE2REEsSUFBQUYsRUFBQSxZQUFxQixJQUFBcTNCLE9BQUEsRUFBQWtFLE9BQUEsRUFBQTFkLE9BQUEsRUFBQXZlLE9BQUEsRUFDakcsTUFEeUksYUFBQVMsR0FBQSxjQUFBQSxHQUFBczNCLEVBQUF5WixHQUFBdlYsRUFBQWw1QixHQUFBOHZDLFdBQUF0MEIsRUFBQXhiLEdBQUE2dkMsV0FBQTV5QyxFQUFBLFNBQWtGLGVBQUFTLEdBQUEsZ0JBQUFBLElBQUFzM0IsRUFBQW9hLEdBQUFsVyxFQUFBbDVCLEdBQUFnd0MsYUFBQXgwQixFQUFBeGIsR0FBQSt2QyxhQUFBOXlDLEVBQUEsV0FBaUdTLEVBQUEsTUFBQUcsRUFBQUQsRUFBQXNpQyxFQUFBcmlDLEdBQWtCRCxFQUFBLE1BQUFELEVBQUFDLEVBQUFzaUMsRUFBQXZpQyxJQUFrQnU3QixFQUFBbEUsRUFBQXNQLFVBQUFwTCxFQUFBcjdCLEVBQUFoQyxFQUFBQyxJQUF1QjRILEtBQUF6RyxFQUFBLFFBQWlCaThCLEVBQUFwNEIsT0FBQXBELEVBQVd3N0IsRUFBQStWLGNBQUFyeEMsR0FBa0IvQixFQUFBbTVCLEVBQUFzUCxVQUFBOW9CLEVBQUE3ZCxFQUFBOUIsRUFBQUMsSUFBdUI0SCxLQUFBekcsRUFBQSxRQUFpQnBCLEVBQUFpRixPQUFBbEQsRUFBVy9CLEVBQUFvekMsY0FBQXZ4QyxFQUFrQjJqQyxHQUFBbkksRUFDamZyOUIsRUFBQWdDLEVBQUFGLElBQU91N0IsRUFBQXI5QixLQUFjLFNBQUF1MEMsR0FBQTF5QyxHQUFlLElBQUFDLEVBQUFELEVBQVEsR0FBQUEsRUFBQTRqQyxVQUFBLEtBQW9CM2pDLEVBQUFnakMsUUFBU2hqQyxJQUFBZ2pDLFdBQVksQ0FBSyxTQUFBaGpDLEVBQUEweUMsV0FBQSxTQUFnQyxLQUFLMXlDLEVBQUFnakMsUUFBUyxVQUFBaGpDLElBQUFnakMsUUFBQTBQLFdBQUEsU0FBNEMsV0FBQTF5QyxFQUFBc2lDLElBQUEsSUFBcUIsU0FBQXFRLEdBQUE1eUMsR0FBZSxJQUFBMHlDLEdBQUExeUMsSUFBQW02QixFQUFBLE9BQ3hOLFNBQUEwWSxHQUFBN3lDLEdBQWUsSUFBQUMsRUFBQUQsRUFBQTRqQyxVQUFrQixJQUFBM2pDLEVBQUEsWUFBQUEsRUFBQXl5QyxHQUFBMXlDLEtBQUFtNkIsRUFBQSxXQUFBbDZCLEVBQUEsS0FBQUQsRUFBd0QsUUFBQTdCLEVBQUE2QixFQUFBNUIsRUFBQTZCLElBQWlCLENBQUUsSUFBQUMsRUFBQS9CLEVBQUE4a0MsT0FBQTlpQyxFQUFBRCxJQUFBMGpDLFVBQUEsS0FBb0MsSUFBQTFqQyxJQUFBQyxFQUFBLE1BQWdCLEdBQUFELEVBQUF5eEIsUUFBQXh4QixFQUFBd3hCLE1BQUEsQ0FBc0IsUUFBQTJGLEVBQUFwM0IsRUFBQXl4QixNQUFrQjJGLEdBQUUsQ0FBRSxHQUFBQSxJQUFBbjVCLEVBQUEsT0FBQXkwQyxHQUFBMXlDLEdBQUFGLEVBQXdCLEdBQUFzM0IsSUFBQWw1QixFQUFBLE9BQUF3MEMsR0FBQTF5QyxHQUFBRCxFQUF3QnEzQixJQUFBd2IsUUFBWTNZLEVBQUEsT0FBUyxHQUFBaDhCLEVBQUE4a0MsU0FBQTdrQyxFQUFBNmtDLE9BQUE5a0MsRUFBQStCLEVBQUE5QixFQUFBK0IsTUFBK0IsQ0FBS20zQixHQUFBLEVBQUssUUFBQWtFLEVBQUF0N0IsRUFBQXl4QixNQUFrQjZKLEdBQUUsQ0FBRSxHQUFBQSxJQUFBcjlCLEVBQUEsQ0FBVW01QixHQUFBLEVBQUtuNUIsRUFBQStCLEVBQUk5QixFQUFBK0IsRUFBSSxNQUFNLEdBQUFxN0IsSUFBQXA5QixFQUFBLENBQVVrNUIsR0FBQSxFQUFLbDVCLEVBQUE4QixFQUFJL0IsRUFBQWdDLEVBQUksTUFBTXE3QixJQUFBc1gsUUFBWSxJQUFBeGIsRUFBQSxDQUFPLElBQUFrRSxFQUFBcjdCLEVBQUF3eEIsTUFBYzZKLEdBQUUsQ0FBRSxHQUFBQSxJQUFBcjlCLEVBQUEsQ0FBVW01QixHQUFBLEVBQUtuNUIsRUFBQWdDLEVBQUkvQixFQUFBOEIsRUFBSSxNQUFNLEdBQUFzN0IsSUFBQXA5QixFQUFBLENBQVVrNUIsR0FBQSxFQUFLbDVCLEVBQUErQixFQUFJaEMsRUFBQStCLEVBQUksTUFBTXM3QixJQUFBc1gsUUFBWXhiLEdBQ3JmNkMsRUFBQSxRQUFpQmg4QixFQUFBeWxDLFlBQUF4bEMsR0FBQSs3QixFQUFBLE9BQTBELE9BQTFCLElBQUFoOEIsRUFBQW9rQyxLQUFBcEksRUFBQSxPQUEwQmg4QixFQUFBd2pDLFVBQUFyMUIsVUFBQW5PLEVBQUE2QixFQUFBQyxFQUFtQyxTQUFBOHlDLEdBQUEveUMsR0FBdUIsS0FBUkEsRUFBQTZ5QyxHQUFBN3lDLElBQVEsWUFBa0IsUUFBQUMsRUFBQUQsSUFBYSxDQUFFLE9BQUFDLEVBQUFzaUMsS0FBQSxJQUFBdGlDLEVBQUFzaUMsSUFBQSxPQUFBdGlDLEVBQWlDLEdBQUFBLEVBQUEweEIsTUFBQTF4QixFQUFBMHhCLE1BQUFzUixPQUFBaGpDLE1BQUEweEIsVUFBc0MsQ0FBSyxHQUFBMXhCLElBQUFELEVBQUEsTUFBZSxNQUFLQyxFQUFBNnlDLFNBQVcsQ0FBRSxJQUFBN3lDLEVBQUFnakMsUUFBQWhqQyxFQUFBZ2pDLFNBQUFqakMsRUFBQSxZQUF1Q0MsSUFBQWdqQyxPQUFXaGpDLEVBQUE2eUMsUUFBQTdQLE9BQUFoakMsRUFBQWdqQyxPQUEwQmhqQyxJQUFBNnlDLFNBQWEsWUFDdkYsSUFBQUUsR0FBQWxZLEdBQUFrTSxRQUFpQmlNLGNBQUEsS0FBQUMsWUFBQSxLQUFBQyxjQUFBLE9BQXVEQyxHQUFBdFksR0FBQWtNLFFBQWVxTSxjQUFBLFNBQUFyekMsR0FBMEIsd0JBQUFBLElBQUFxekMsY0FBQXR3QyxPQUFBc3dDLGlCQUFnRUMsR0FBQWpELEdBQUFySixRQUFnQnVLLGNBQUEsT0FDdGQsU0FBQWdDLEdBQUF2ekMsR0FBZSxJQUFBQyxFQUFBRCxFQUFBbW9DLFFBQXVGLE1BQXZFLGFBQUFub0MsRUFBQSxLQUFBQSxJQUFBd3pDLFdBQUEsS0FBQXZ6QyxJQUFBRCxFQUFBLElBQUFBLEVBQUFDLEVBQXdELEtBQUFELE1BQUEsSUFBZSxJQUFBQSxHQUFBLEtBQUFBLElBQUEsRUFDdEcsSUFBQXl6QyxJQUFRQyxJQUFBLFNBQUFDLFNBQUEsSUFBQUMsS0FBQSxZQUFBQyxHQUFBLFVBQUFDLE1BQUEsYUFBQUMsS0FBQSxZQUFBQyxJQUFBLFNBQUFDLElBQUEsS0FBQUMsS0FBQSxjQUFBQyxLQUFBLGNBQUFDLE9BQUEsYUFBQUMsZ0JBQUEsZ0JBQTJNQyxJQUFLQyxFQUFBLFlBQUFDLEVBQUEsTUFBQUMsR0FBQSxRQUFBQyxHQUFBLFFBQUFDLEdBQUEsUUFBQUMsR0FBQSxVQUFBQyxHQUFBLE1BQUFDLEdBQUEsUUFBQUMsR0FBQSxXQUFBQyxHQUFBLFNBQUFDLEdBQUEsSUFBQUMsR0FBQSxTQUFBQyxHQUFBLFdBQUFDLEdBQUEsTUFBQUMsR0FBQSxPQUFBQyxHQUFBLFlBQUFDLEdBQUEsVUFBQUMsR0FBQSxhQUFBQyxHQUFBLFlBQUFDLEdBQUEsU0FBQUMsR0FBQSxTQUFBQyxJQUFBLEtBQUFDLElBQUEsS0FBQUMsSUFBQSxLQUFBQyxJQUFBLEtBQ3hOQyxJQUFBLEtBQUFDLElBQUEsS0FBQUMsSUFBQSxLQUFBQyxJQUFBLEtBQUFDLElBQUEsS0FBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxVQUFBQyxJQUFBLGFBQUFDLElBQUEsUUFBcUhDLEdBQUF0RyxHQUFBckosUUFBZTNuQyxJQUFBLFNBQUFXLEdBQWdCLEdBQUFBLEVBQUFYLElBQUEsQ0FBVSxJQUFBWSxFQUFBd3pDLEdBQUF6ekMsRUFBQVgsTUFBQVcsRUFBQVgsSUFBdUIsb0JBQUFZLEVBQUEsT0FBQUEsRUFBK0IsbUJBQUFELEVBQUFnRyxLQUFBLE1BQUFoRyxFQUFBdXpDLEdBQUF2ekMsSUFBQSxRQUFBaTBCLE9BQUFvQyxhQUFBcjJCLEdBQUEsWUFBQUEsRUFBQWdHLE1BQUEsVUFBQWhHLEVBQUFnRyxLQUFBc3VDLEdBQUF0MEMsRUFBQW1vQyxVQUFBLG1CQUFnSnBvQixTQUFBLEtBQUF5SyxRQUFBLEtBQUFDLFNBQUEsS0FBQUYsT0FBQSxLQUFBRCxRQUFBLEtBQUEvUixPQUFBLEtBQUFxK0IsT0FBQSxLQUFBL0YsaUJBQUFDLEdBQUEwQyxTQUFBLFNBQUF4ekMsR0FBb0ksbUJBQ3hlQSxFQUFBZ0csS0FBQXV0QyxHQUFBdnpDLEdBQUEsR0FBZW1vQyxRQUFBLFNBQUFub0MsR0FBcUIsa0JBQUFBLEVBQUFnRyxNQUFBLFVBQUFoRyxFQUFBZ0csS0FBQWhHLEVBQUFtb0MsUUFBQSxHQUF1REssTUFBQSxTQUFBeG9DLEdBQW1CLG1CQUFBQSxFQUFBZ0csS0FBQXV0QyxHQUFBdnpDLEdBQUEsWUFBQUEsRUFBQWdHLE1BQUEsVUFBQWhHLEVBQUFnRyxLQUFBaEcsRUFBQW1vQyxRQUFBLEtBQWtGME8sR0FBQTlGLEdBQUEvSixRQUFnQjhQLGFBQUEsT0FBa0JDLEdBQUExRyxHQUFBckosUUFBZ0JnUSxRQUFBLEtBQUFDLGNBQUEsS0FBQUMsZUFBQSxLQUFBM3NCLE9BQUEsS0FBQUQsUUFBQSxLQUFBRSxRQUFBLEtBQUFDLFNBQUEsS0FBQW9tQixpQkFBQUMsS0FBNEhxRyxHQUFBcmMsR0FBQWtNLFFBQWUwRyxhQUFBLEtBQUF3RixZQUFBLEtBQUFDLGNBQUEsT0FBc0RpRSxHQUFBckcsR0FBQS9KLFFBQWdCcVEsT0FBQSxTQUFBcjNDLEdBQW1CLGlCQUFBQSxJQUFBcTNDLE9BQUEsZ0JBQ3RkcjNDLEtBQUFzM0MsWUFBQSxHQUFtQkMsT0FBQSxTQUFBdjNDLEdBQW9CLGlCQUFBQSxJQUFBdTNDLE9BQUEsZ0JBQUF2M0MsS0FBQXczQyxZQUFBLGVBQUF4M0MsS0FBQXkzQyxXQUFBLEdBQThGQyxPQUFBLEtBQUFDLFVBQUEsT0FBNEJDLEtBQUEsa0JBQUE5UyxHQUFBLGlCQUFBQyxHQUFBLHVCQUFBQyxHQUFBLHFSQUNqSyxzZkFDQSxnR0FBQUMsR0FBQSwwREFBQTRTLE1BQW1LQyxNQUFPLFNBQUFDLEdBQUEvM0MsRUFBQUMsR0FBaUIsSUFBQTlCLEVBQUE2QixFQUFBLEdBQWtCNUIsRUFBQSxPQUFQNEIsSUFBQSxJQUFPLEdBQUFnWixjQUFBaFosRUFBQXlNLE1BQUEsSUFBMkN4TSxHQUFHeS9CLHlCQUF5QmtJLFFBQUF4cEMsRUFBQXlwQyxTQUFBenBDLEVBQUEsV0FBK0IyaEMsY0FBQTVoQyxHQUFBNjVDLGNBQUEvM0MsR0FBbUM0M0MsR0FBQTczQyxHQUFBQyxFQUFRNjNDLEdBQUEzNUMsR0FBQThCLElBQzlWLDZmQUNBLGtPQUFBc0csUUFBQSxTQUFBdkcsR0FBdVArM0MsR0FBQS8zQyxHQUFBLEtBQVc0M0MsR0FBQXJ4QyxRQUFBLFNBQUF2RyxHQUF1QiszQyxHQUFBLzNDLEdBQUEsS0FDelIsSUFBQWk0QyxJQUFRelksV0FBQXFZLEdBQUFLLCtCQUFBLFNBQUFsNEMsR0FBaUUsaUJBQVJBLEVBQUE4M0MsR0FBQTkzQyxNQUFRLElBQUFBLEVBQUFnNEMsZUFBd0N6WSxjQUFBLFNBQUF2L0IsRUFBQUMsRUFBQTlCLEVBQUFDLEdBQWlDLElBQUE4QixFQUFBNDNDLEdBQUE5M0MsR0FBWSxJQUFBRSxFQUFBLFlBQWtCLE9BQUFGLEdBQVUsc0JBQUF1ekMsR0FBQXAxQyxHQUFBLFlBQXlDLDBCQUFBNkIsRUFBQTIyQyxHQUFpQyxNQUFNLHVCQUFBMzJDLEVBQUFzekMsR0FBOEIsTUFBTSxtQkFBQW4xQyxFQUFBNnNCLE9BQUEsWUFBeUMsOEdBQUFockIsRUFBQSt3QyxHQUEwSCxNQUFNLGtIQUFBL3dDLEVBQ3ZkNjJDLEdBQUcsTUFBTSxrRUFBQTcyQyxFQUFBKzJDLEdBQTJFLE1BQU0sS0FBQWpTLEdBQUEsS0FBQUMsR0FBQSxLQUFBQyxHQUFBaGxDLEVBQUFnekMsR0FBNkIsTUFBTSxLQUFBL04sR0FBQWpsQyxFQUFBbTNDLEdBQWEsTUFBTSxhQUFBbjNDLEVBQUFxd0MsR0FBbUIsTUFBTSxZQUFBcndDLEVBQUFvM0MsR0FBa0IsTUFBTSxpQ0FBQXAzQyxFQUFBb3pDLEdBQXlDLE1BQU0sNEpBQUFwekMsRUFBQTB4QyxHQUF5SyxNQUFNLFFBQUExeEMsRUFBQTg2QixHQUF5QyxPQUFONEksR0FBdkJ6akMsRUFBQUQsRUFBQTRtQyxVQUFBMW1DLEVBQUFELEVBQUE5QixFQUFBQyxJQUE2QjZCLElBQVVrNEMsR0FBQUYsR0FBQUMsK0JBQ2xkRSxNQUFNLFNBQUFDLEdBQUFyNEMsR0FBZSxJQUFBQyxFQUFBRCxFQUFBczRDLFdBQW1CLEdBQUcsSUFBQXI0QyxFQUFBLENBQU9ELEVBQUF1NEMsVUFBQWgyQyxLQUFBdEMsR0FBb0IsTUFBTSxJQUFBOUIsRUFBTSxJQUFBQSxFQUFBOEIsRUFBUTlCLEVBQUE4a0MsUUFBUzlrQyxJQUFBOGtDLE9BQXVELEtBQTNDOWtDLEVBQUEsSUFBQUEsRUFBQW9rQyxJQUFBLEtBQUFwa0MsRUFBQXdqQyxVQUFBNlcsZUFBMkMsTUFBWXg0QyxFQUFBdTRDLFVBQUFoMkMsS0FBQXRDLEdBQW9CQSxFQUFBcWlDLEVBQUFua0MsU0FBUThCLEdBQVMsSUFBQTlCLEVBQUEsRUFBUUEsRUFBQTZCLEVBQUF1NEMsVUFBQWwyQyxPQUFxQmxFLElBQUE4QixFQUFBRCxFQUFBdTRDLFVBQUFwNkMsR0FBQTJqQyxFQUFBOWhDLEVBQUF5NEMsYUFBQXg0QyxFQUFBRCxFQUFBbW1DLFlBQUEyRSxHQUFBOXFDLEVBQUFtbUMsY0FBMEUsSUFBQXVTLElBQUEsRUFBVSxTQUFBQyxHQUFBMzRDLEdBQWUwNEMsS0FBQTE0QyxFQUFPLFNBQUFtN0IsR0FBQW43QixFQUFBQyxHQUFnQixJQUFBQSxFQUFBLFlBQWtCLElBQUE5QixHQUFBZzZDLEdBQUFuNEMsR0FBQTQ0QyxHQUFBQyxJQUFBdjVDLEtBQUEsS0FBQVUsR0FBaUNDLEVBQUF1aEIsaUJBQUF4aEIsRUFBQTdCLEdBQUEsR0FDclosU0FBQTI2QyxHQUFBOTRDLEVBQUFDLEdBQWlCLElBQUFBLEVBQUEsWUFBa0IsSUFBQTlCLEdBQUFnNkMsR0FBQW40QyxHQUFBNDRDLEdBQUFDLElBQUF2NUMsS0FBQSxLQUFBVSxHQUFpQ0MsRUFBQXVoQixpQkFBQXhoQixFQUFBN0IsR0FBQSxHQUEyQixTQUFBeTZDLEdBQUE1NEMsRUFBQUMsR0FBaUIwcEMsR0FBQWtQLEdBQUE3NEMsRUFBQUMsR0FBVyxTQUFBNDRDLEdBQUE3NEMsRUFBQUMsR0FBaUIsR0FBQXk0QyxHQUFBLENBQU8sSUFBQXY2QyxFQUFBMnNDLEdBQUE3cUMsR0FBMkUsR0FBdkQsUUFBUjlCLEVBQUFta0MsRUFBQW5rQyxLQUFRLGlCQUFBQSxFQUFBb2tDLEtBQUEsSUFBQW1RLEdBQUF2MEMsT0FBQSxNQUF1RGk2QyxHQUFBLzFDLE9BQUEsQ0FBYyxJQUFBakUsRUFBQWc2QyxHQUFBcjZCLE1BQWUzZixFQUFBcTZDLGFBQUF6NEMsRUFBaUI1QixFQUFBK25DLFlBQUFsbUMsRUFBZ0I3QixFQUFBazZDLFdBQUFuNkMsRUFBZTZCLEVBQUE1QixPQUFJNEIsR0FBUXk0QyxhQUFBejRDLEVBQUFtbUMsWUFBQWxtQyxFQUFBcTRDLFdBQUFuNkMsRUFBQW82QyxjQUF3RCxJQUFJek8sR0FBQXVPLEdBQUFyNEMsR0FBUyxRQUFRQSxFQUFBeTRDLGFBQUEsS0FBQXo0QyxFQUFBbW1DLFlBQUEsS0FBQW5tQyxFQUFBczRDLFdBQUEsS0FBQXQ0QyxFQUFBdTRDLFVBQUFsMkMsT0FBQSxLQUFBKzFDLEdBQUEvMUMsUUFBQSsxQyxHQUFBNzFDLEtBQUF2QyxLQUNwWSxJQUFBKzRDLElBQVFDLGVBQWUsT0FBQU4sSUFBVU8sV0FBQU4sR0FBQU8sVUFBQSxXQUFvQyxPQUFBUixJQUFVUyxpQkFBQWhlLEdBQUFpZSxrQkFBQU4sR0FBQU8sY0FBQVIsSUFBMERTLE1BQU1DLEdBQUEsRUFBQUMsR0FBQSx3QkFBQWgyQixLQUFBQyxVQUFBaFgsTUFBQSxHQUF5RCxTQUFBZ3RDLEdBQUF6NUMsR0FBcUYsT0FBdEV4QixPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUErQixFQUFBdzVDLE1BQUF4NUMsRUFBQXc1QyxJQUFBRCxLQUFBRCxHQUFBdDVDLEVBQUF3NUMsU0FBc0VGLEdBQUF0NUMsRUFBQXc1QyxLQUFpQixTQUFBRSxHQUFBMTVDLEdBQWUsS0FBS0EsS0FBQXFGLFlBQWdCckYsSUFBQXFGLFdBQWdCLE9BQUFyRixFQUNsVyxTQUFBMjVDLEdBQUEzNUMsRUFBQUMsR0FBaUIsSUFBZ0I3QixFQUFoQkQsRUFBQXU3QyxHQUFBMTVDLEdBQWdCLElBQUpBLEVBQUEsRUFBYzdCLEdBQUUsQ0FBRSxPQUFBQSxFQUFBOHNDLFNBQUEsQ0FBNEMsR0FBekI3c0MsRUFBQTRCLEVBQUE3QixFQUFBeTdDLFlBQUF2M0MsT0FBeUJyQyxHQUFBQyxHQUFBN0IsR0FBQTZCLEVBQUEsT0FBcUJ3aEIsS0FBQXRqQixFQUFBNlosT0FBQS9YLEVBQUFELEdBQW1CQSxFQUFBNUIsRUFBSTRCLEVBQUEsQ0FBRyxLQUFLN0IsR0FBRSxDQUFFLEdBQUFBLEVBQUErRyxZQUFBLENBQWtCL0csSUFBQStHLFlBQWdCLE1BQUFsRixFQUFRN0IsSUFBQXFILFdBQWVySCxPQUFBLEVBQVNBLEVBQUF1N0MsR0FBQXY3QyxJQUFTLFNBQUEwN0MsR0FBQTc1QyxHQUFlLElBQUFDLEVBQUFELEtBQUE2cUMsVUFBQTdxQyxFQUFBNnFDLFNBQUExRyxjQUE4QyxPQUFBbGtDLElBQUEsVUFBQUEsSUFBQSxTQUFBRCxFQUFBZ0csTUFBQSxXQUFBaEcsRUFBQWdHLE1BQUEsUUFBQWhHLEVBQUFnRyxNQUFBLFFBQUFoRyxFQUFBZ0csTUFBQSxhQUFBaEcsRUFBQWdHLE9BQUEsYUFBQS9GLEdBQUEsU0FBQUQsRUFBQTg1QyxpQkFDM1IsSUFBQUMsR0FBQTc3QyxFQUFBcWpCLFdBQUEsaUJBQUF2ZSxVQUFBLElBQUFBLFNBQUFza0MsYUFBQTBTLElBQTZFQyxRQUFRdmEseUJBQXlCa0ksUUFBQSxXQUFBQyxTQUFBLG1CQUE4QzlILGFBQUEseUVBQUEzaEIsTUFBQSxPQUFtRzg3QixHQUFBLEtBQUFDLEdBQUEsS0FBQUMsR0FBQSxLQUFBQyxJQUFBLEVBQy9QLFNBQUFDLEdBQUF0NkMsRUFBQUMsR0FBaUIsR0FBQW82QyxJQUFBLE1BQUFILFNBQUE1YixJQUFBLFlBQXVDLElBQUFuZ0MsRUFBQSs3QyxHQUFrUCxNQUF6TyxtQkFBQS83QyxHQUFBMDdDLEdBQUExN0MsTUFBK0JvOEMsTUFBQXA4QyxFQUFBcThDLGVBQUF4Z0MsSUFBQTdiLEVBQUFzOEMsY0FBMEMxM0MsT0FBQTIzQyxhQUFBdjhDLEdBQWlEdzhDLFlBQWpEeDhDLEVBQUE0RSxPQUFBMjNDLGdCQUFpREMsV0FBQUMsYUFBQXo4QyxFQUFBeThDLGFBQUFDLFVBQUExOEMsRUFBQTA4QyxVQUFBQyxZQUFBMzhDLEVBQUEyOEMsYUFBb0czOEMsT0FBQSxFQUFXaThDLElBQUE3YixFQUFBNmIsR0FBQWo4QyxHQUFBLE1BQUFpOEMsR0FBQWo4QyxHQUFBNkIsRUFBQTg2QixHQUFBOEwsVUFBQW9ULEdBQUFDLE9BQUFFLEdBQUFuNkMsRUFBQUMsSUFBQStGLEtBQUEsU0FBQWhHLEVBQUFvRCxPQUFBODJDLEdBQUF4VyxHQUFBMWpDLE1BQzFTLElBQUErNkMsSUFBUXZiLFdBQUF3YSxHQUFBemEsY0FBQSxTQUFBdi9CLEVBQUFDLEVBQUE5QixFQUFBQyxHQUE4QyxJQUFBK0IsRUFBQUQsRUFBQTlCLEVBQUEyRSxTQUFBM0UsSUFBQTRFLFNBQUEsSUFBQTVFLEVBQUE2c0MsU0FBQTdzQyxJQUFBNndDLGNBQWlFLEtBQUE5dUMsR0FBQUQsR0FBQSxDQUFZRixFQUFBLENBQUdFLEVBQUF1NUMsR0FBQXY1QyxHQUFRQyxFQUFBMi9CLEVBQUFrYixTQUFjLFFBQUExakIsRUFBQSxFQUFZQSxFQUFBbjNCLEVBQUFrQyxPQUFXaTFCLElBQUEsQ0FBSyxJQUFBa0UsRUFBQXI3QixFQUFBbTNCLEdBQVcsSUFBQXAzQixFQUFBUCxlQUFBNjdCLEtBQUF0N0IsRUFBQXM3QixHQUFBLENBQWdDdDdCLEdBQUEsRUFBSyxNQUFBRixHQUFTRSxHQUFBLEVBQUtDLEdBQUFELEVBQUssR0FBQUMsRUFBQSxZQUFrQyxPQUFqQkQsRUFBQUQsRUFBQXVpQyxFQUFBdmlDLEdBQUE4QyxPQUFpQi9DLEdBQVUsYUFBQTRxQyxHQUFBMXFDLElBQUEsU0FBQUEsRUFBQTQ1QyxtQkFBQUksR0FBQWg2QyxFQUFBaTZDLEdBQUFsNkMsRUFBQW02QyxHQUFBLE1BQW9FLE1BQU0sV0FBQUEsR0FBQUQsR0FBQUQsR0FBQSxLQUEwQixNQUFNLGdCQUFBRyxJQUFBLEVBQXVCLE1BQU0sdUNBQUFBLElBQUEsRUFBQUMsR0FBQW44QyxFQUFBQyxHQUF1RCx5QkFBQTI3QyxHQUFBLE1BQ3JlLGlDQUFBTyxHQUFBbjhDLEVBQUFDLEdBQTJDLGNBQWNxakMsRUFBQWxCLHVCQUFBLHlJQUFBbmlCLE1BQUEsTUFBK0txaUIsRUFBQWlDLEVBQUFLLDZCQUFtQ3JDLEVBQUFnQyxFQUFBRyxvQkFBMEJsQyxFQUFBK0IsRUFBQUksb0JBQTBCckIsRUFBQWpCLDBCQUE2QnlhLGtCQUFBaEQsR0FBQWlELHNCQUFBM0ksR0FBQTRJLGtCQUFBaEwsR0FBQWlMLGtCQUFBTCxHQUFBTSx1QkFBQTlTLEtBQzVWLElBQUErUyxHQUFBLG1CQUFBQyxpREFBQSxFQUFBQyxHQUFBeC9CLEtBQUF5L0IsR0FBQUMsV0FBQUMsR0FBQUMsYUFBQUMsUUFBQSxFQUE4SCxvQkFBQUMsYUFBQSxtQkFBQUEsWUFBQTdWLElBQUEsQ0FBdUUsSUFBQThWLEdBQUFELFlBQW1CRCxHQUFBLFdBQWMsT0FBQUUsR0FBQTlWLFlBQWlCNFYsR0FBQSxXQUFtQixPQUFBTCxHQUFBdlYsT0FBaUIsSUFBQStWLFFBQUEsRUFBQUMsUUFBQSxFQUMzUixHQUFBLzlDLEVBQUFxakIsVUFBQSxDQUFnQixJQUFBMjZCLEdBQUEsbUJBQUFaLE1BQUEsV0FBNENuaEIsRUFBQSxRQUFTaUIsR0FBQSxLQUFBK2dCLEdBQUEsS0FBQUMsSUFBQSxFQUFBQyxJQUFBLEVBQUFDLElBQUEsRUFBQUMsR0FBQSxFQUFBM2lDLEdBQUEsR0FBQTRpQyxHQUFBLEdBQUFDLElBQXVEQyxZQUFBLEVBQUFDLGNBQUEsV0FBdUMsSUFBQTM4QyxFQUFBdThDLEdBQUFWLEtBQWMsU0FBQTc3QyxJQUFBLElBQWdCNDhDLEdBQUEsU0FBQTU4QyxFQUFBQyxHQUFrQixJQUFBOUIsRUFBQTZCLEVBQUE2OEMsa0JBQUF6K0MsR0FBQSxFQUErQixJQUFJRCxFQUFBOEIsR0FBQTdCLEdBQUEsRUFBVSxRQUFRNjlDLEdBQUFqOEMsR0FBQTVCLElBQUFpK0MsSUFBQSxFQUFBdDVDLE9BQUErNUMsWUFBQUMsR0FBQSxRQUE2Q0EsR0FBQSx1QkFBQXY1QixLQUFBQyxTQUFBM2lCLFNBQUEsSUFBQTJMLE1BQUEsR0FBK0QxSixPQUFBeWUsaUJBQUEsbUJBQUF4aEIsR0FBOEMsR0FBQUEsRUFBQThCLFNBQUFpQixRQUFBL0MsRUFBQXFaLE9BQUEwakMsS0FBQVYsSUFBQSxTQUFBamhCLElBQUEsQ0FBcUQsVUFBQUEsR0FBQSxDQUFhLElBQUFuN0IsRUFBQTQ3QyxLQUFXLFVBQy9lTyxPQUFBbjhDLEdBQUEsQ0FBV0QsR0FBQSxFQUFLLFFBQUE3QixLQUFBQyxFQUFBZzlCLEdBQWlCLE9BQUFoOUIsR0FBUyxDQUFFLElBQUE4QixFQUFBOUIsRUFBQTQrQyxhQUFvQixJQUFBOThDLE1BQUFELEVBQUE5QixFQUFBb0UsS0FBQW5FLElBQUEsSUFBQThCLEtBQUEsSUFBQUYsR0FBQUUsRUFBQUYsT0FBQUUsR0FBb0Q5QixJQUFBbU8sS0FBUyxLQUFBcE8sRUFBQWtFLE9BQUEsSUFBQW82QyxHQUFBQyxZQUFBLEVBQUF6OEMsRUFBQSxFQUFBN0IsRUFBQUQsRUFBQWtFLE9BQWtEcEMsRUFBQTdCLEVBQUk2QixJQUFBMjhDLEdBQUF6K0MsRUFBQThCLEdBQUF3OEMsSUFBZ0JMLEdBQUFwOEMsR0FBTSxJQUFBQSxFQUFBNjdDLEtBQVcsRUFBQVUsR0FBQXY4QyxHQUFBLE9BQUFvN0IsSUFBaUJwN0IsRUFBQW83QixHQUFBcWhCLEdBQUFDLFlBQUEsRUFBQUUsR0FBQTU4QyxFQUFBeThDLElBQUF6OEMsRUFBQTY3QyxLQUFzQyxPQUFBemdCLElBQUFraEIsU0FBQSxFQUFBSixHQUFBZSxRQUE4QixHQUFLLElBQUFBLEdBQUEsU0FBQWo5QyxHQUFtQnM4QyxJQUFBLEVBQU0sSUFBQXI4QyxFQUFBRCxFQUFBdThDLEdBQUFDLEdBQWN2OEMsRUFBQXU4QyxJQUFBNWlDLEdBQUE0aUMsSUFBQSxFQUFBdjhDLE1BQUEsR0FBQXU4QyxHQUFBdjhDLEVBQUEyWixNQUFBM1osR0FBQTJaLEdBQUEzWixFQUEyQ3M4QyxHQUFBdjhDLEVBQUF3OEMsR0FBUUgsU0FBQSxFQUFBdDVDLE9BQUErNUMsWUFBQUMsR0FBQSxPQUF3Q2YsR0FBQSxTQUFBaDhDLEVBQUFDLEdBQWlCLElBQUE5QixHQUFBLEVBQ3RSLE9BRCtSLE1BQUE4QixHQUFBLGlCQUFBQSxFQUFBaTlDLFVBQUEvK0MsRUFBQTA5QyxLQUMxYzU3QyxFQUFBaTlDLFdBQVcsSUFBQWQsS0FBQSxJQUFBaitDLEtBQUFpK0MsU0FBQWorQyxHQUE4QjZCLEdBQUc2OEMsa0JBQUE3OEMsRUFBQWc5QyxZQUFBNytDLEVBQUFnL0MsS0FBQSxLQUFBNXdDLEtBQUEsTUFBdUQsT0FBQTZ1QixNQUFBcDdCLEVBQUEsUUFBQUMsRUFBQUQsRUFBQW05QyxLQUFBaEIsTUFBQWw4QyxFQUFBc00sS0FBQXZNLEdBQWdEbThDLEdBQUFuOEMsRUFBS3M4QyxTQUFBLEVBQUFKLEdBQUFlLEtBQW1CajlDLEdBQVVpOEMsR0FBQSxTQUFBajhDLEdBQWUsVUFBQUEsRUFBQW05QyxNQUFBL2hCLEtBQUFwN0IsRUFBQSxDQUF5QixJQUFBQyxFQUFBRCxFQUFBdU0sS0FBQXBPLEVBQUE2QixFQUFBbTlDLEtBQXNCbjlDLEVBQUF1TSxLQUFBLEtBQVl2TSxFQUFBbTlDLEtBQUEsS0FBWSxPQUFBbDlDLEVBQUEsT0FBQTlCLEtBQUFvTyxLQUFBdE0sSUFBQWs5QyxLQUFBaC9DLElBQUE4QixFQUFBazlDLEtBQUEsS0FBQS9oQixHQUFBbjdCLEdBQUEsT0FBQTlCLEtBQUFvTyxLQUFBLEtBQUE0dkMsR0FBQWgrQyxHQUFBZytDLEdBQUEvZ0IsR0FBQSxXQUFnRyxDQUFLLElBQUFnaUIsR0FBQSxJQUFBQyxJQUFlckIsR0FBQSxTQUFBaDhDLEdBQWUsSUFBQUMsR0FBTzQ4QyxrQkFBQTc4QyxFQUFBZzlDLFlBQUEsRUFBQXp3QyxLQUFBLEtBQUE0d0MsS0FBQSxNQUFzRGgvQyxFQUFBczlDLEdBQUEsV0FBaUJ6N0MsR0FBRzI4QyxjQUFBLFdBQXlCLE9BQUFXLEtBQ3hmWixZQUFBLE1BQThCLE9BQVpVLEdBQUE5UixJQUFBdHJDLEVBQUE3QixHQUFZOEIsR0FBVWc4QyxHQUFBLFNBQUFqOEMsR0FBZSxJQUFBQyxFQUFBbTlDLEdBQUF6K0MsSUFBQXFCLEVBQUE2OEMsbUJBQWtDTyxHQUFBRyxPQUFBdjlDLEdBQWEyN0MsR0FBQTE3QyxJQUFzSSxTQUFBdTlDLEdBQUF4OUMsRUFBQUMsR0FBMkUsT0FBMURELEVBQUFKLEdBQUswTCxjQUFBLEdBQWdCckwsSUFBSUEsRUFBekssU0FBQUQsR0FBZSxJQUFBQyxFQUFBLEdBQXVHLE9BQTlGbytCLEVBQUF4VixTQUFBdGlCLFFBQUF2RyxFQUFBLFNBQUFBLEdBQWtDLE1BQUFBLEdBQUEsaUJBQUFBLEdBQUEsaUJBQUFBLElBQUFDLEdBQUFELEtBQTREQyxFQUFtRHc5QyxDQUFBeDlDLEVBQUFxTCxhQUFBdEwsRUFBQXNMLFNBQUFyTCxHQUFpQ0QsRUFDdlQsU0FBQTA5QyxHQUFBMTlDLEVBQUFDLEVBQUE5QixFQUFBQyxHQUFpQyxHQUFaNEIsSUFBQWlFLFFBQVloRSxFQUFBLENBQU1BLEtBQUssUUFBQUMsRUFBQSxFQUFZQSxFQUFBL0IsRUFBQWtFLE9BQVduQyxJQUFBRCxFQUFBLElBQUE5QixFQUFBK0IsS0FBQSxFQUFtQixJQUFBL0IsRUFBQSxFQUFRQSxFQUFBNkIsRUFBQXFDLE9BQVdsRSxJQUFBK0IsRUFBQUQsRUFBQU4sZUFBQSxJQUFBSyxFQUFBN0IsR0FBQVksT0FBQWlCLEVBQUE3QixHQUFBdy9DLFdBQUF6OUMsSUFBQUYsRUFBQTdCLEdBQUF3L0MsU0FBQXo5QyxNQUFBOUIsSUFBQTRCLEVBQUE3QixHQUFBeS9DLGlCQUFBLE9BQTRHLENBQW1CLElBQWR6L0MsRUFBQSxHQUFBQSxFQUFPOEIsRUFBQSxLQUFPQyxFQUFBLEVBQVFBLEVBQUFGLEVBQUFxQyxPQUFXbkMsSUFBQSxDQUFLLEdBQUFGLEVBQUFFLEdBQUFuQixRQUFBWixFQUFpRSxPQUE5QzZCLEVBQUFFLEdBQUF5OUMsVUFBQSxPQUFpQnYvQyxJQUFBNEIsRUFBQUUsR0FBQTA5QyxpQkFBQSxJQUFvQyxPQUFBMzlDLEdBQUFELEVBQUFFLEdBQUEwaEMsV0FBQTNoQyxFQUFBRCxFQUFBRSxJQUFrQyxPQUFBRCxNQUFBMDlDLFVBQUEsSUFDMVcsU0FBQUUsR0FBQTc5QyxFQUFBQyxHQUFpQixJQUFBOUIsRUFBQThCLEVBQUFsQixNQUFjaUIsRUFBQXV1QyxlQUFpQkksYUFBQSxNQUFBeHdDLElBQUE4QixFQUFBcXVDLGFBQUF3UCxjQUFBNzlDLEVBQUE4OUMsVUFBZ0UsU0FBQUMsR0FBQWgrQyxFQUFBQyxHQUFnRSxPQUEvQyxNQUFBQSxFQUFBZytDLHlCQUFBOWpCLEVBQUEsTUFBK0N2NkIsS0FBV0ssR0FBSWxCLFdBQUEsRUFBQXV2QyxrQkFBQSxFQUFBaGpDLFNBQUEsR0FBQXRMLEVBQUF1dUMsY0FBQUksZUFBNEUsU0FBQXVQLEdBQUFsK0MsRUFBQUMsR0FBaUIsSUFBQTlCLEVBQUE4QixFQUFBbEIsTUFBYyxNQUFBWixNQUFBOEIsRUFBQXF1QyxhQUFBLE9BQUFydUMsSUFBQXFMLFlBQUEsTUFBQW5OLEdBQUFnOEIsRUFBQSxNQUFBaGhCLE1BQUE4RixRQUFBaGYsS0FBQSxHQUFBQSxFQUFBb0MsUUFBQTgzQixFQUFBLE1BQUFsNkIsSUFBQSxJQUFBOUIsRUFBQSxHQUFBOEIsR0FBQSxNQUFBOUIsTUFBQSxLQUF3SjZCLEVBQUF1dUMsZUFBaUJJLGFBQUEsR0FBQXh3QyxHQUNuZCxTQUFBZ2dELEdBQUFuK0MsRUFBQUMsR0FBaUIsSUFBQTlCLEVBQUE4QixFQUFBbEIsTUFBYyxNQUFBWixPQUFBLEdBQUFBLEtBQUE2QixFQUFBakIsUUFBQWlCLEVBQUFqQixNQUFBWixHQUFBLE1BQUE4QixFQUFBcXVDLGVBQUF0dUMsRUFBQXN1QyxhQUFBbndDLElBQW9GLE1BQUE4QixFQUFBcXVDLGVBQUF0dUMsRUFBQXN1QyxhQUFBcnVDLEVBQUFxdUMsY0FBc0QsU0FBQThQLEdBQUFwK0MsR0FBZSxJQUFBQyxFQUFBRCxFQUFBNDVDLFlBQW9CMzVDLElBQUFELEVBQUF1dUMsY0FBQUksZUFBQTN1QyxFQUFBakIsTUFBQWtCLEdBQThDLElBQUFvK0MsSUFBUUMsS0FBQSwrQkFBQUMsT0FBQSxxQ0FBQUMsSUFBQSw4QkFDbFEsU0FBQUMsR0FBQXorQyxHQUFlLE9BQUFBLEdBQVUsNkNBQThDLHNEQUF1RCw4Q0FBOEMsU0FBQTArQyxHQUFBMStDLEVBQUFDLEdBQWlCLGFBQUFELEdBQUEsaUNBQUFBLEVBQUF5K0MsR0FBQXgrQyxHQUFBLCtCQUFBRCxHQUFBLGtCQUFBQyxFQUFBLCtCQUFBRCxFQUM3TCxJQUFBMitDLFFBQUEsRUFBQUMsR0FBQSxTQUFBNStDLEdBQTZCLDBCQUFBNitDLGFBQUFDLHdCQUFBLFNBQUE3K0MsRUFBQTlCLEVBQUFDLEVBQUE4QixHQUFrRjIrQyxNQUFBQyx3QkFBQSxXQUF5QyxPQUFBOStDLEVBQUFDLEVBQUE5QixNQUFvQjZCLEVBQTVLLENBQStLLFNBQUFBLEVBQUFDLEdBQWUsR0FBQUQsRUFBQSsrQyxlQUFBVixHQUFBRyxLQUFBLGNBQUF4K0MsSUFBQWcvQyxVQUFBLytDLE1BQTBELENBQTBFLEtBQXJFMCtDLE9BQUEzN0MsU0FBQThDLGNBQUEsUUFBcUNrNUMsVUFBQSxRQUFBLytDLEVBQUEsU0FBZ0NBLEVBQUEwK0MsR0FBQXQ1QyxXQUFvQnJGLEVBQUFxRixZQUFhckYsRUFBQXlGLFlBQUF6RixFQUFBcUYsWUFBNkIsS0FBS3BGLEVBQUFvRixZQUFhckYsRUFBQW9GLFlBQUFuRixFQUFBb0YsZUFDbFosU0FBQTQ1QyxHQUFBai9DLEVBQUFDLEdBQWlCLEdBQUFBLEVBQUEsQ0FBTSxJQUFBOUIsRUFBQTZCLEVBQUFxRixXQUFtQixHQUFBbEgsT0FBQTZCLEVBQUFrL0MsV0FBQSxJQUFBL2dELEVBQUE4c0MsU0FBcUQsWUFBZDlzQyxFQUFBZ2hELFVBQUFsL0MsR0FBc0JELEVBQUE0NUMsWUFBQTM1QyxFQUN2RyxJQUFBbS9DLElBQVFDLHlCQUFBLEVBQUFDLG1CQUFBLEVBQUFDLGtCQUFBLEVBQUFDLGtCQUFBLEVBQUFDLFNBQUEsRUFBQUMsY0FBQSxFQUFBQyxpQkFBQSxFQUFBQyxhQUFBLEVBQUFDLFNBQUEsRUFBQUMsTUFBQSxFQUFBQyxVQUFBLEVBQUFDLGNBQUEsRUFBQUMsWUFBQSxFQUFBQyxjQUFBLEVBQUFDLFdBQUEsRUFBQUMsU0FBQSxFQUFBQyxZQUFBLEVBQUFDLGFBQUEsRUFBQUMsY0FBQSxFQUFBQyxZQUFBLEVBQUFDLGVBQUEsRUFBQUMsZ0JBQUEsRUFBQUMsaUJBQUEsRUFBQUMsWUFBQSxFQUFBQyxXQUFBLEVBQUFDLFlBQUEsRUFBQUMsU0FBQSxFQUFBQyxPQUFBLEVBQUFDLFNBQUEsRUFBQUMsU0FBQSxFQUFBQyxRQUFBLEVBQUFDLFFBQUEsRUFBQUMsTUFBQSxFQUFBQyxhQUFBLEVBQUFDLGNBQUEsRUFDUkMsYUFBQSxFQUFBQyxpQkFBQSxFQUFBQyxrQkFBQSxFQUFBQyxrQkFBQSxFQUFBQyxlQUFBLEVBQUFDLGFBQUEsR0FBMEdDLElBQUEseUJBQzFHLFNBQUFDLEdBQUEvaEQsRUFBQUMsR0FBMkIsUUFBQTlCLEtBQVY2QixJQUFBOEUsTUFBVTdFLEVBQUEsR0FBQUEsRUFBQU4sZUFBQXhCLEdBQUEsQ0FBdUMsSUFBQUMsRUFBQSxJQUFBRCxFQUFBd0gsUUFBQSxNQUEwQnpGLEVBQUEvQixFQUFRZ0MsRUFBQUYsRUFBQTlCLEdBQVcrQixFQUFBLE1BQUFDLEdBQUEsa0JBQUFBLEdBQUEsS0FBQUEsRUFBQSxHQUFBL0IsR0FBQSxpQkFBQStCLEdBQUEsSUFBQUEsR0FBQWkvQyxHQUFBei9DLGVBQUFPLElBQUFrL0MsR0FBQWwvQyxJQUFBLEdBQUFDLEdBQUE2aEQsT0FBQTdoRCxFQUFBLEtBQTJILFVBQUFoQyxNQUFBLFlBQTRCQyxFQUFBNEIsRUFBQWlpRCxZQUFBOWpELEVBQUErQixHQUFBRixFQUFBN0IsR0FBQStCLEdBRDlIMUIsT0FBQThILEtBQUE4NEMsSUFBQTc0QyxRQUFBLFNBQUF2RyxHQUFvQzhoRCxHQUFBdjdDLFFBQUEsU0FBQXRHLEdBQXVCQSxJQUFBRCxFQUFBNGQsT0FBQSxHQUFBNUUsY0FBQWhaLEVBQUFnbUIsVUFBQSxHQUE2Q281QixHQUFBbi9DLEdBQUFtL0MsR0FBQXAvQyxPQUNtRCxJQUFBa2lELEdBQUF0aUQsR0FBVXVpRCxVQUFBLElBQWNDLE1BQUEsRUFBQTM5QyxNQUFBLEVBQUE0OUMsSUFBQSxFQUFBQyxLQUFBLEVBQUFDLE9BQUEsRUFBQUMsSUFBQSxFQUFBQyxLQUFBLEVBQUFDLE9BQUEsRUFBQUMsUUFBQSxFQUFBdjdDLE1BQUEsRUFBQXc3QyxNQUFBLEVBQUFDLE9BQUEsRUFBQS9nRCxRQUFBLEVBQUFnaEQsT0FBQSxFQUFBQyxLQUFBLElBQzNULFNBQUFDLEdBQUFoakQsRUFBQUMsRUFBQTlCLEdBQW1COEIsSUFBQWlpRCxHQUFBbGlELEtBQUEsTUFBQUMsRUFBQXFMLFVBQUEsTUFBQXJMLEVBQUFnK0MsMEJBQUE5akIsRUFBQSxNQUFBbjZCLEVBQUE3QixLQUFBLE1BQUE4QixFQUFBZytDLDBCQUFBLE1BQUFoK0MsRUFBQXFMLFVBQUE2dUIsRUFBQSx1QkFBQWw2QixFQUFBZytDLHlCQUFBLFdBQUFoK0MsRUFBQWcrQyx5QkFBQTlqQixFQUFBLGFBQUFsNkIsRUFBQTZFLE9BQUEsaUJBQUE3RSxFQUFBNkUsT0FBQXExQixFQUFBLEtBQUFoOEIsTUFDbkIsU0FBQThrRCxHQUFBampELEVBQUFDLEdBQWlCLFFBQUFELEVBQUEyRixRQUFBLDRCQUFBMUYsRUFBQXVRLEdBQW9ELE9BQUF4USxHQUFVLDBLQUFrTCxrQkFBa0IsSUFBQWtqRCxHQUFBbHBCLEVBQUFoRCxZQUFBLElBQ25SLFNBQUFtc0IsR0FBQW5qRCxFQUFBQyxHQUFxRSxJQUFBOUIsRUFBQXM3QyxHQUFwRHo1QyxFQUFBLElBQUFBLEVBQUFpckMsVUFBQSxLQUFBanJDLEVBQUFpckMsU0FBQWpyQyxJQUFBaXZDLGVBQWdFaHZDLEVBQUE2L0IsRUFBQTcvQixHQUFRLFFBQUE3QixFQUFBLEVBQVlBLEVBQUE2QixFQUFBb0MsT0FBV2pFLElBQUEsQ0FBSyxJQUFBOEIsRUFBQUQsRUFBQTdCLEdBQVcsSUFBQUQsRUFBQXdCLGVBQUFPLEtBQUEvQixFQUFBK0IsR0FBQSxDQUFnQyxPQUFBQSxHQUFVLGFBQUE0NEMsR0FBQSxTQUFBOTRDLEdBQTZCLE1BQU0sdUJBQUE4NEMsR0FBQSxRQUFBOTRDLEdBQXVDODRDLEdBQUEsT0FBQTk0QyxHQUFhN0IsRUFBQWlsRCxNQUFBLEVBQVVqbEQsRUFBQWtsRCxPQUFBLEVBQVcsTUFBTSx5QkFBQW5ZLEdBQUFockMsR0FBQSxJQUFBNDRDLEdBQUE1NEMsRUFBQUYsR0FBNkMsTUFBTSw2Q0FBZ0QsYUFBQWtsQyxHQUFBdi9CLFFBQUF6RixJQUFBaTdCLEdBQUFqN0IsRUFBQUYsR0FBbUM3QixFQUFBK0IsSUFBQSxJQUNsYSxTQUFBb2pELEdBQUF0akQsRUFBQUMsRUFBQTlCLEVBQUFDLEdBQXNTLE9BQWpSRCxFQUFBLElBQUFBLEVBQUE4c0MsU0FBQTlzQyxJQUFBOHdDLGNBQW1DN3dDLElBQUFpZ0QsR0FBQUMsT0FBQWxnRCxFQUFBcWdELEdBQUF6K0MsSUFBdUI1QixJQUFBaWdELEdBQUFDLEtBQUEsV0FBQXQrQyxNQUFBN0IsRUFBQTJILGNBQUEsUUFBQWs1QyxVQUFBLHFCQUFBaC9DLElBQUF5RixZQUFBekYsRUFBQXFGLGFBQUFyRixFQUFBLGlCQUFBQyxFQUFBdVEsR0FBQXJTLEVBQUEySCxjQUFBOUYsR0FBaUt3USxHQUFBdlEsRUFBQXVRLEtBQVFyUyxFQUFBMkgsY0FBQTlGLEtBQUE3QixFQUFBb2xELGdCQUFBbmxELEVBQUE0QixHQUE4Q0EsRUFBUyxTQUFBd2pELEdBQUF4akQsRUFBQUMsR0FBaUIsV0FBQUEsRUFBQWdyQyxTQUFBaHJDLElBQUFndkMsZUFBQW5uQyxlQUFBOUgsR0FDaFUsU0FBQXlqRCxHQUFBempELEVBQUFDLEVBQUE5QixFQUFBQyxHQUFxQixJQUFBOEIsRUFBQStpRCxHQUFBaGpELEVBQUE5QixHQUFjLE9BQUE4QixHQUFVLDBCQUFBazdCLEdBQUEsT0FBQW43QixHQUF3QyxJQUFBRyxFQUFBaEMsRUFBUSxNQUFNLDRCQUFBZ0MsRUFBQSxFQUFrQ0EsRUFBQStrQyxHQUFBN2lDLE9BQVlsQyxJQUFBZzdCLEdBQUErSixHQUFBL2tDLEdBQUFILEdBQWVHLEVBQUFoQyxFQUFJLE1BQU0sYUFBQWc5QixHQUFBLFFBQUFuN0IsR0FBMkJHLEVBQUFoQyxFQUFJLE1BQU0saUNBQUFnOUIsR0FBQSxRQUFBbjdCLEdBQWlEbTdCLEdBQUEsT0FBQW43QixHQUFZRyxFQUFBaEMsRUFBSSxNQUFNLFdBQUFnOUIsR0FBQSxRQUFBbjdCLEdBQXlCbTdCLEdBQUEsU0FBQW43QixHQUFjRyxFQUFBaEMsRUFBSSxNQUFNLGNBQUFnOUIsR0FBQSxTQUFBbjdCLEdBQTZCRyxFQUFBaEMsRUFBSSxNQUFNLFlBQUFzd0MsR0FBQXp1QyxFQUFBN0IsR0FBcUJnQyxFQUFBaXVDLEdBQUFwdUMsRUFBQTdCLEdBQVVnOUIsR0FBQSxVQUFBbjdCLEdBQWVtakQsR0FBQS9rRCxFQUFBLFlBQWlCLE1BQU0sYUFBQStCLEVBQUFxOUMsR0FBQXg5QyxFQUFBN0IsR0FBd0IsTUFBTSxhQUFBMC9DLEdBQUE3OUMsRUFBQTdCLEdBQXNCZ0MsRUFBQVAsS0FBTXpCLEdBQUlZLFdBQUEsSUFDamZvOEIsR0FBQSxVQUFBbjdCLEdBQWVtakQsR0FBQS9rRCxFQUFBLFlBQWlCLE1BQU0sZUFBQTgvQyxHQUFBbCtDLEVBQUE3QixHQUF3QmdDLEVBQUE2OUMsR0FBQWgrQyxFQUFBN0IsR0FBVWc5QixHQUFBLFVBQUFuN0IsR0FBZW1qRCxHQUFBL2tELEVBQUEsWUFBaUIsTUFBTSxRQUFBK0IsRUFBQWhDLEVBQVk2a0QsR0FBQS9pRCxFQUFBRSxFQUFBK2lELElBQVcsSUFBQTFuQixFQUFBbEUsRUFBQW4zQixFQUFVLElBQUFxN0IsS0FBQWxFLEVBQUEsR0FBQUEsRUFBQTMzQixlQUFBNjdCLEdBQUEsQ0FBbUMsSUFBQTFkLEVBQUF3WixFQUFBa0UsR0FBVyxVQUFBQSxFQUFBdW1CLEdBQUEvaEQsRUFBQThkLEdBQUEsNEJBQUEwZCxFQUFBLE9BQUExZCxNQUFBNGxDLFlBQUEsSUFBQTlFLEdBQUE1K0MsRUFBQThkLEdBQUEsYUFBQTBkLEVBQUEsaUJBQUExZCxHQUFBLGFBQUE3ZCxHQUFBLEtBQUE2ZCxJQUFBbWhDLEdBQUFqL0MsRUFBQThkLEdBQUEsaUJBQUFBLEdBQUFtaEMsR0FBQWovQyxFQUFBLEdBQUE4ZCxHQUFBLG1DQUFBMGQsR0FBQSw2QkFBQUEsR0FBQSxjQUFBQSxJQUFBcUUsRUFBQWxnQyxlQUFBNjdCLEdBQUEsTUFBQTFkLEdBQUFxbEMsR0FBQS9rRCxFQUM3TG85QixHQUFBLE1BQUExZCxHQUFBK3ZCLEdBQUE3dEMsRUFBQXc3QixFQUFBMWQsRUFBQTVkLElBQXlCLE9BQUFELEdBQVUsWUFBQW1yQyxHQUFBcHJDLEdBQW1CZ3ZDLEdBQUFodkMsRUFBQTdCLEdBQUEsR0FBVyxNQUFNLGVBQUFpdEMsR0FBQXByQyxHQUFzQm8rQyxHQUFBcCtDLEdBQVEsTUFBTSxtQkFBQTdCLEVBQUFZLE9BQUFpQixFQUFBd0csYUFBQSxRQUFBckksRUFBQVksT0FBNkQsTUFBTSxhQUFBaUIsRUFBQSs5QyxXQUFBNS9DLEVBQUE0L0MsU0FBZ0QsT0FBVjk5QyxFQUFBOUIsRUFBQVksT0FBVTIrQyxHQUFBMTlDLElBQUE3QixFQUFBNC9DLFNBQUE5OUMsR0FBQSxTQUFBOUIsRUFBQW13QyxjQUFBb1AsR0FBQTE5QyxJQUFBN0IsRUFBQTQvQyxTQUFBNS9DLEVBQUFtd0MsY0FBQSxHQUEyRixNQUFNLDJCQUFBbnVDLEVBQUEycUIsVUFBQTlxQixFQUFBMmpELFFBQUEzcEIsSUFDL1QsU0FBQTRwQixHQUFBNWpELEVBQUFDLEVBQUE5QixFQUFBQyxFQUFBOEIsR0FBdUIsSUFBQUMsRUFBQSxLQUFXLE9BQUFGLEdBQVUsWUFBQTlCLEVBQUFpd0MsR0FBQXB1QyxFQUFBN0IsR0FBdUJDLEVBQUFnd0MsR0FBQXB1QyxFQUFBNUIsR0FBVStCLEtBQUssTUFBTSxhQUFBaEMsRUFBQXEvQyxHQUFBeDlDLEVBQUE3QixHQUF3QkMsRUFBQW8vQyxHQUFBeDlDLEVBQUE1QixHQUFVK0IsS0FBSyxNQUFNLGFBQUFoQyxFQUFBeUIsS0FBb0J6QixHQUFJWSxXQUFBLElBQWVYLEVBQUF3QixLQUFNeEIsR0FBSVcsV0FBQSxJQUFlb0IsS0FBSyxNQUFNLGVBQUFoQyxFQUFBNi9DLEdBQUFoK0MsRUFBQTdCLEdBQTBCQyxFQUFBNC9DLEdBQUFoK0MsRUFBQTVCLEdBQVUrQixLQUFLLE1BQU0sMkJBQUFoQyxFQUFBMnNCLFNBQUEsbUJBQUExc0IsRUFBQTBzQixVQUFBOXFCLEVBQUEyakQsUUFBQTNwQixHQUFvRmdwQixHQUFBL2lELEVBQUE3QixFQUFBOGtELElBQVdqakQsRUFBQUQsT0FBQSxFQUFXLElBQUFzM0IsRUFBQSxLQUFXLElBQUF0M0IsS0FBQTdCLEVBQUEsSUFBQUMsRUFBQXVCLGVBQUFLLElBQUE3QixFQUFBd0IsZUFBQUssSUFBQSxNQUFBN0IsRUFBQTZCLEdBQUEsYUFBQUEsRUFBQSxDQUFvRixJQUFBdzdCLEVBQUFyOUIsRUFBQTZCLEdBQVcsSUFBQUMsS0FBQXU3QixJQUFBNzdCLGVBQUFNLEtBQUFxM0IsSUFDbmRBLE1BQUtBLEVBQUFyM0IsR0FBQSxRQUFXLDRCQUFBRCxHQUFBLGFBQUFBLEdBQUEsbUNBQUFBLEdBQUEsNkJBQUFBLEdBQUEsY0FBQUEsSUFBQTYvQixFQUFBbGdDLGVBQUFLLEdBQUFHLG9CQUFBb0MsS0FBQXZDLEVBQUEsT0FBa00sSUFBQUEsS0FBQTVCLEVBQUEsQ0FBWSxJQUFBMGYsRUFBQTFmLEVBQUE0QixHQUFpQyxHQUF0Qnc3QixFQUFBLE1BQUFyOUIsSUFBQTZCLFFBQUEsRUFBc0I1QixFQUFBdUIsZUFBQUssSUFBQThkLElBQUEwZCxJQUFBLE1BQUExZCxHQUFBLE1BQUEwZCxHQUFBLGFBQUF4N0IsRUFBQSxHQUFBdzdCLEVBQUEsQ0FBdUUsSUFBQXY3QixLQUFBdTdCLEtBQUE3N0IsZUFBQU0sSUFBQTZkLEtBQUFuZSxlQUFBTSxLQUFBcTNCLFVBQWtFQSxFQUFBcjNCLEdBQUEsSUFBVyxJQUFBQSxLQUFBNmQsSUFBQW5lLGVBQUFNLElBQUF1N0IsRUFBQXY3QixLQUFBNmQsRUFBQTdkLEtBQUFxM0IsVUFBc0RBLEVBQUFyM0IsR0FBQTZkLEVBQUE3ZCxTQUFhcTNCLElBQUFuM0IsWUFBQW9DLEtBQUF2QyxFQUFBczNCLElBQ3RkQSxFQUFBeFosTUFBSSw0QkFBQTlkLEdBQUE4ZCxNQUFBNGxDLFlBQUEsRUFBQWxvQixNQUFBa29CLFlBQUEsUUFBQTVsQyxHQUFBMGQsSUFBQTFkLElBQUEzZCxTQUFBb0MsS0FBQXZDLEVBQUEsR0FBQThkLElBQUEsYUFBQTlkLEVBQUF3N0IsSUFBQTFkLEdBQUEsaUJBQUFBLEdBQUEsaUJBQUFBLElBQUEzZCxTQUFBb0MsS0FBQXZDLEVBQUEsR0FBQThkLEdBQUEsbUNBQUE5ZCxHQUFBLDZCQUFBQSxJQUFBNi9CLEVBQUFsZ0MsZUFBQUssSUFBQSxNQUFBOGQsR0FBQXFsQyxHQUFBampELEVBQUFGLEdBQUFHLEdBQUFxN0IsSUFBQTFkLElBQUEzZCxpQkFBQW9DLEtBQUF2QyxFQUFBOGQsSUFBNFgsT0FBN0J3WixJQUFBbjNCLFNBQUFvQyxLQUFBLFFBQUErMEIsR0FBNkJuM0IsRUFDaFksU0FBQTBqRCxHQUFBN2pELEVBQUFDLEVBQUE5QixFQUFBQyxFQUFBOEIsR0FBdUIsVUFBQS9CLEdBQUEsVUFBQStCLEVBQUE4RixNQUFBLE1BQUE5RixFQUFBN0IsTUFBQXd3QyxHQUFBN3VDLEVBQUFFLEdBQXFEK2lELEdBQUE5a0QsRUFBQUMsR0FBUUEsRUFBQTZrRCxHQUFBOWtELEVBQUErQixHQUFVLFFBQUFDLEVBQUEsRUFBWUEsRUFBQUYsRUFBQW9DLE9BQVdsQyxHQUFBLEdBQU0sSUFBQW0zQixFQUFBcjNCLEVBQUFFLEdBQUFxN0IsRUFBQXY3QixFQUFBRSxFQUFBLEdBQW9CLFVBQUFtM0IsRUFBQXlxQixHQUFBL2hELEVBQUF3N0IsR0FBQSw0QkFBQWxFLEVBQUFzbkIsR0FBQTUrQyxFQUFBdzdCLEdBQUEsYUFBQWxFLEVBQUEybkIsR0FBQWovQyxFQUFBdzdCLEdBQUFxUyxHQUFBN3RDLEVBQUFzM0IsRUFBQWtFLEVBQUFwOUIsR0FBZ0csT0FBQUQsR0FBVSxZQUFBMndDLEdBQUE5dUMsRUFBQUUsR0FBcUIsTUFBTSxlQUFBaStDLEdBQUFuK0MsRUFBQUUsR0FBd0IsTUFBTSxhQUFBRixFQUFBdXVDLGNBQUFJLGtCQUFBLEVBQUExdUMsRUFBQUQsRUFBQXV1QyxjQUFBdVAsWUFBQTk5QyxFQUFBdXVDLGNBQUF1UCxjQUFBNTlDLEVBQUE2OUMsU0FBQSxPQUFBNS9DLEVBQUErQixFQUFBbkIsT0FBQTIrQyxHQUFBMTlDLElBQUFFLEVBQUE2OUMsU0FBQTUvQyxHQUFBLEdBQUE4QixNQUFBQyxFQUFBNjlDLFdBQUEsTUFBQTc5QyxFQUFBb3VDLGFBQ2xUb1AsR0FBQTE5QyxJQUFBRSxFQUFBNjlDLFNBQUE3OUMsRUFBQW91QyxjQUFBLEdBQUFvUCxHQUFBMTlDLElBQUFFLEVBQUE2OUMsU0FBQTc5QyxFQUFBNjlDLFlBQUEsU0FDQSxTQUFBK0YsR0FBQTlqRCxFQUFBQyxFQUFBOUIsRUFBQUMsRUFBQThCLEdBQXVCLE9BQUFELEdBQVUsMEJBQUFrN0IsR0FBQSxPQUFBbjdCLEdBQXdDLE1BQU0sNEJBQUE1QixFQUFBLEVBQWtDQSxFQUFBOG1DLEdBQUE3aUMsT0FBWWpFLElBQUErOEIsR0FBQStKLEdBQUE5bUMsR0FBQTRCLEdBQWUsTUFBTSxhQUFBbTdCLEdBQUEsUUFBQW43QixHQUEyQixNQUFNLGlDQUFBbTdCLEdBQUEsUUFBQW43QixHQUFpRG03QixHQUFBLE9BQUFuN0IsR0FBWSxNQUFNLFdBQUFtN0IsR0FBQSxRQUFBbjdCLEdBQXlCbTdCLEdBQUEsU0FBQW43QixHQUFjLE1BQU0sY0FBQW03QixHQUFBLFNBQUFuN0IsR0FBNkIsTUFBTSxZQUFBeXVDLEdBQUF6dUMsRUFBQTdCLEdBQXFCZzlCLEdBQUEsVUFBQW43QixHQUFlbWpELEdBQUFqakQsRUFBQSxZQUFpQixNQUFNLGFBQUEyOUMsR0FBQTc5QyxFQUFBN0IsR0FBc0JnOUIsR0FBQSxVQUFBbjdCLEdBQWVtakQsR0FBQWpqRCxFQUFBLFlBQWlCLE1BQU0sZUFBQWcrQyxHQUFBbCtDLEVBQUE3QixHQUFBZzlCLEdBQUEsVUFBQW43QixHQUFBbWpELEdBQUFqakQsRUFBQSxZQUNoYixRQUFBQyxLQUR3ZTZpRCxHQUFBL2lELEVBQ3JmOUIsRUFBQStrRCxJQUFNOWtELEVBQUEsS0FBT0QsRUFBQSxHQUFBQSxFQUFBd0IsZUFBQVEsR0FBQSxDQUF1QyxJQUFBbTNCLEVBQUFuNUIsRUFBQWdDLEdBQVcsYUFBQUEsRUFBQSxpQkFBQW0zQixFQUFBdDNCLEVBQUE0NUMsY0FBQXRpQixJQUFBbDVCLEdBQUEsV0FBQWs1QixJQUFBLGlCQUFBQSxHQUFBdDNCLEVBQUE0NUMsY0FBQSxHQUFBdGlCLElBQUFsNUIsR0FBQSxjQUFBazVCLElBQUF1SSxFQUFBbGdDLGVBQUFRLElBQUEsTUFBQW0zQixHQUFBNnJCLEdBQUFqakQsRUFBQUMsR0FBaUwsT0FBQUYsR0FBVSxZQUFBbXJDLEdBQUFwckMsR0FBbUJndkMsR0FBQWh2QyxFQUFBN0IsR0FBQSxHQUFXLE1BQU0sZUFBQWl0QyxHQUFBcHJDLEdBQXNCbytDLEdBQUFwK0MsR0FBUSxNQUFNLGdDQUFrQywyQkFBQTdCLEVBQUEyc0IsVUFBQTlxQixFQUFBMmpELFFBQUEzcEIsR0FBcUQsT0FBQTU3QixFQUFTLFNBQUEybEQsR0FBQS9qRCxFQUFBQyxHQUFpQixPQUFBRCxFQUFBbS9DLFlBQUFsL0MsRUFDbmIsSUFBQStqRCxJQUFRbCtDLGNBQUF3OUMsR0FBQXg3QyxlQUFBMDdDLEdBQUFTLHFCQUFBUixHQUFBUyxlQUFBTixHQUFBTyxpQkFBQU4sR0FBQU8sdUJBQUFOLEdBQUFPLGlCQUFBTixHQUFBTyxxQkFBQSxhQUFnTEMsZ0NBQUEsYUFBNkNDLDZCQUFBLGFBQTBDQywrQkFBQSxhQUE0Q0MsNEJBQUEsYUFBeUN4Yix1QkFBQSxTQUFBbHBDLEVBQUFDLEVBQUE5QixHQUF3QyxPQUFBOEIsR0FBVSxZQUE4QixHQUE5QjZ1QyxHQUFBOXVDLEVBQUE3QixHQUFxQjhCLEVBQUE5QixFQUFBRSxLQUFTLFVBQUFGLEVBQUE2SCxNQUFBLE1BQUEvRixFQUFBLENBQThCLElBQUE5QixFQUFBNkIsRUFBUTdCLEVBQUFxSCxZQUFhckgsSUFBQXFILFdBQzVaLElBQTNFckgsSUFBQXdtRCxpQkFBQSxjQUFBbGpELEtBQUFDLFVBQUEsR0FBQXpCLEdBQUEsbUJBQTJFQSxFQUFBLEVBQVFBLEVBQUE5QixFQUFBa0UsT0FBV3BDLElBQUEsQ0FBSyxJQUFBN0IsRUFBQUQsRUFBQThCLEdBQVcsR0FBQTdCLElBQUE0QixHQUFBNUIsRUFBQXdtRCxPQUFBNWtELEVBQUE0a0QsS0FBQSxDQUEyQixJQUFBMWtELEVBQUF1aUMsRUFBQXJrQyxHQUFZOEIsR0FBQWk2QixFQUFBLE1BQWlCd1IsR0FBQXZ0QyxHQUFNMHdDLEdBQUExd0MsRUFBQThCLEtBQVUsTUFBTSxlQUFBaStDLEdBQUFuK0MsRUFBQTdCLEdBQXdCLE1BQU0sb0JBQUE4QixFQUFBOUIsRUFBQVksUUFBQTIrQyxHQUFBMTlDLElBQUE3QixFQUFBNC9DLFNBQUE5OUMsR0FBQSxNQUEyRDRrRCxHQUFBLEtBQUFDLEdBQUEsS0FBaUIsU0FBQUMsR0FBQS9rRCxFQUFBQyxHQUFpQixPQUFBRCxHQUFVLDZEQUFBQyxFQUFBK2tELFVBQTZFLFNBQzlZLFNBQUFDLEdBQUFqbEQsRUFBQUMsR0FBaUIsbUJBQUFELEdBQUEsaUJBQUFDLEVBQUFxTCxVQUFBLGlCQUFBckwsRUFBQXFMLFVBQUEsaUJBQUFyTCxFQUFBZytDLHlCQUFBLE9BQUFoK0MsRUFBQWcrQyx5QkFBQSxpQkFBQWgrQyxFQUFBZytDLHdCQUFBeUYsT0FBb04sSUFBQXdCLEdBQUFySixHQUFBc0osR0FBQW5KLEdBQUFvSixHQUFBbkosR0FBc0IsU0FBQW9KLEdBQUFybEQsR0FBZSxJQUFBQSxJQUFBa0YsWUFBb0JsRixHQUFBLElBQUFBLEVBQUFpckMsVUFBQSxJQUFBanJDLEVBQUFpckMsVUFBa0NqckMsSUFBQWtGLFlBQWlCLE9BQUFsRixFQUFTLFNBQUFzbEQsR0FBQXRsRCxHQUFlLElBQUFBLElBQUFxRixXQUFtQnJGLEdBQUEsSUFBQUEsRUFBQWlyQyxVQUFBLElBQUFqckMsRUFBQWlyQyxVQUFrQ2pyQyxJQUFBa0YsWUFBaUIsT0FBQWxGLEVBQVMsSUFBQXVsRCxJQUFRLElBQUFDLE1BQUFDLElBQUEsRUFBZ0IsU0FBQUMsR0FBQTFsRCxHQUFlLE9BQU9zTSxRQUFBdE0sR0FDdGUsU0FBQXU3QixHQUFBdjdCLEdBQWMsRUFBQXlsRCxLQUFBemxELEVBQUFzTSxRQUFBazVDLEdBQUFDLElBQUFELEdBQUFDLElBQUEsS0FBQUEsTUFBMEMsU0FBQTlwQixHQUFBMzdCLEVBQUFDLEdBQXFCdWxELEtBQUxDLElBQUt6bEQsRUFBQXNNLFFBQWlCdE0sRUFBQXNNLFFBQUFyTSxFQUFZLElBQUEwbEQsR0FBQUQsR0FBQWpuQixHQUFBN0MsR0FBQThwQixJQUFBLEdBQUFFLEdBQUFubkIsRUFBNkIsU0FBQW9uQixHQUFBN2xELEdBQWUsT0FBQThsRCxHQUFBOWxELEdBQUE0bEQsR0FBQUQsR0FBQXI1QyxRQUN0SixTQUFBeTVDLEdBQUEvbEQsRUFBQUMsR0FBaUIsSUFBQTlCLEVBQUE2QixFQUFBZ0csS0FBQWtJLGFBQTBCLElBQUEvUCxFQUFBLE9BQUFzZ0MsRUFBZ0IsSUFBQXJnQyxFQUFBNEIsRUFBQTJoQyxVQUFrQixHQUFBdmpDLEtBQUE0bkQsOENBQUEvbEQsRUFBQSxPQUFBN0IsRUFBQTZuRCwwQ0FBMkcsSUFBUTlsRCxFQUFSRCxLQUFXLElBQUFDLEtBQUFoQyxFQUFBK0IsRUFBQUMsR0FBQUYsRUFBQUUsR0FBc0ksT0FBakgvQixLQUFBNEIsSUFBQTJoQyxXQUFBcWtCLDRDQUFBL2xELEVBQUFELEVBQUFpbUQsMENBQUEvbEQsR0FBaUhBLEVBQVMsU0FBQTRsRCxHQUFBOWxELEdBQWUsV0FBQUEsRUFBQXVpQyxLQUFBLE1BQUF2aUMsRUFBQWdHLEtBQUF5RixrQkFBaUQsU0FBQXk2QyxHQUFBbG1ELEdBQWU4bEQsR0FBQTlsRCxLQUFBdTdCLEdBQUFLLElBQUFMLEdBQUFvcUIsS0FBd0IsU0FBQVEsR0FBQW5tRCxHQUFldTdCLEdBQUFLLElBQU9MLEdBQUFvcUIsSUFDL2MsU0FBQVMsR0FBQXBtRCxFQUFBQyxFQUFBOUIsR0FBbUJ3bkQsR0FBQXI1QyxVQUFBbXlCLEdBQUF0RSxFQUFBLE9BQWdDd0IsR0FBQWdxQixHQUFBMWxELEdBQVUwN0IsR0FBQUMsR0FBQXo5QixHQUFTLFNBQUFrb0QsR0FBQXJtRCxFQUFBQyxHQUFpQixJQUFBOUIsRUFBQTZCLEVBQUEyaEMsVUFBQXZqQyxFQUFBNEIsRUFBQWdHLEtBQUF5RixrQkFBNkMsc0JBQUF0TixFQUFBOE0sZ0JBQUEsT0FBQWhMLEVBQXdFLFFBQUFDLEtBQXRCL0IsSUFBQThNLGtCQUFzQi9LLEtBQUE5QixHQUFBKzdCLEVBQUEsTUFBQXdTLEdBQUEzc0MsSUFBQSxVQUFBRSxHQUF5RCxPQUFBTixLQUFXSyxFQUFBOUIsR0FBTSxTQUFBbW9ELEdBQUF0bUQsR0FBZSxJQUFBOGxELEdBQUE5bEQsR0FBQSxTQUFtQixJQUFBQyxFQUFBRCxFQUFBMmhDLFVBQWdILE9BQTlGMWhDLE9BQUFzbUQsMkNBQUE5bkIsRUFBcURtbkIsR0FBQUQsR0FBQXI1QyxRQUFjcXZCLEdBQUFncUIsR0FBQTFsRCxHQUFVMDdCLEdBQUFDLE1BQUF0dkIsVUFBaUIsRUFDeGEsU0FBQWs2QyxHQUFBeG1ELEVBQUFDLEdBQWlCLElBQUE5QixFQUFBNkIsRUFBQTJoQyxVQUFvQyxHQUFsQnhqQyxHQUFBZzhCLEVBQUEsT0FBa0JsNkIsRUFBQSxDQUFNLElBQUE3QixFQUFBaW9ELEdBQUFybUQsRUFBQTRsRCxJQUFlem5ELEVBQUFvb0QsMENBQUFub0QsRUFBOENtOUIsR0FBQUssSUFBT0wsR0FBQW9xQixJQUFRaHFCLEdBQUFncUIsR0FBQXZuRCxRQUFVbTlCLEdBQUFLLElBQVlELEdBQUFDLEdBQUEzN0IsR0FDN0osU0FBQXdtRCxHQUFBem1ELEVBQUFDLEVBQUE5QixFQUFBQyxHQUFxQjJDLEtBQUF3aEMsSUFBQXZpQyxFQUFXZSxLQUFBMUIsSUFBQWxCLEVBQVc0QyxLQUFBK3hDLFFBQUEveEMsS0FBQTR3QixNQUFBNXdCLEtBQUFraUMsT0FBQWxpQyxLQUFBNGdDLFVBQUE1Z0MsS0FBQWlGLEtBQUEsS0FBa0VqRixLQUFBc0gsTUFBQSxFQUFhdEgsS0FBQStPLElBQUEsS0FBYy9PLEtBQUE2ckMsYUFBQTNzQyxFQUFvQmMsS0FBQTJsRCxjQUFBM2xELEtBQUE0bEQsWUFBQTVsRCxLQUFBNmxELGNBQUEsS0FBNEQ3bEQsS0FBQTlCLEtBQUFiLEVBQVkyQyxLQUFBNHhDLFVBQUEsRUFBaUI1eEMsS0FBQThsRCxXQUFBOWxELEtBQUErbEQsWUFBQS9sRCxLQUFBZ21ELFdBQUEsS0FBc0RobUQsS0FBQWltRCxlQUFBLEVBQXNCam1ELEtBQUE2aUMsVUFBQSxLQUNqVSxTQUFBcWpCLEdBQUFqbkQsRUFBQUMsRUFBQTlCLEdBQW1CLElBQUFDLEVBQUE0QixFQUFBNGpDLFVBQXFZLE9BQW5YLE9BQUF4bEMsTUFBQSxJQUFBcW9ELEdBQUF6bUQsRUFBQXVpQyxJQUFBdGlDLEVBQUFELEVBQUFYLElBQUFXLEVBQUFmLE9BQUErRyxLQUFBaEcsRUFBQWdHLEtBQUE1SCxFQUFBdWpDLFVBQUEzaEMsRUFBQTJoQyxVQUFBdmpDLEVBQUF3bEMsVUFBQTVqQyxJQUFBNGpDLFVBQUF4bEMsTUFBQXd1QyxhQUFBM3NDLEVBQUE3QixFQUFBdTBDLFVBQUEsRUFBQXYwQyxFQUFBMm9ELFdBQUEsS0FBQTNvRCxFQUFBMG9ELFlBQUEsS0FBQTFvRCxFQUFBeW9ELFdBQUEsTUFBb016b0QsRUFBQTRvRCxlQUFBN29ELEVBQW1CQyxFQUFBdXpCLE1BQUEzeEIsRUFBQTJ4QixNQUFnQnZ6QixFQUFBd29ELGNBQUE1bUQsRUFBQTRtRCxjQUFnQ3hvRCxFQUFBc29ELGNBQUExbUQsRUFBQTBtRCxjQUFnQ3RvRCxFQUFBdW9ELFlBQUEzbUQsRUFBQTJtRCxZQUE0QnZvRCxFQUFBMDBDLFFBQUE5eUMsRUFBQTh5QyxRQUFvQjEwQyxFQUFBaUssTUFBQXJJLEVBQUFxSSxNQUFnQmpLLEVBQUEwUixJQUFBOVAsRUFBQThQLElBQVkxUixFQUN4WixTQUFBOG9ELEdBQUFsbkQsRUFBQUMsRUFBQTlCLEdBQW1CLElBQUFDLEVBQUE0QixFQUFBZ0csS0FBQTlGLEVBQUFGLEVBQUFYLElBQStCLEdBQVZXLElBQUE4SixNQUFVLG1CQUFBMUwsRUFBQSxJQUFBK0IsRUFBQS9CLEVBQUFzQixXQUFBdEIsRUFBQXNCLFVBQUFxN0IsaUJBQUEsU0FBNkUsb0JBQUEzOEIsRUFBQStCLEVBQUEsT0FBZ0MsT0FBQS9CLEdBQWUsS0FBQTZ0QyxHQUFBLE9BQUFrYixHQUFBbm5ELEVBQUFzTCxTQUFBckwsRUFBQTlCLEVBQUErQixHQUFvQyxLQUFBb3NDLEdBQUFuc0MsRUFBQSxHQUFhRixHQUFBLEVBQUssTUFBTSxLQUFBaXNDLEdBQUEvckMsRUFBQSxHQUFhRixHQUFBLEVBQUssTUFBTSxLQUFBa3NDLEdBQUEsT0FBQS90QyxFQUFBLElBQUFxb0QsR0FBQSxHQUFBem1ELEVBQUFFLEVBQUEsRUFBQUQsSUFBQStGLEtBQUFtbUMsR0FBQS90QyxFQUFBNG9ELGVBQUE3b0QsRUFBQUMsRUFBbUUsS0FBQW91QyxHQUFBcnNDLEVBQUEsR0FBYUYsR0FBQSxFQUFLLE1BQU0sUUFBQUQsRUFBQSxDQUFXLHdCQUFBNUIsR0FBQSxPQUFBQSxJQUFBcTlCLFNBQUEsTUFBc0QsS0FBQTJRLEdBQUFqc0MsRUFBQSxHQUFhLE1BQUFILEVBQVEsS0FBQXFzQyxHQUFBbHNDLEVBQUEsR0FBYSxNQUFBSCxFQUFRLEtBQUF1c0MsR0FBQXBzQyxFQUFBLEdBQWEsTUFBQUgsRUFBUSxRQUFBbTZCLEVBQUEsWUFBQS83QixFQUM3ZEEsV0FBQSxJQUFlK0IsT0FBQSxHQUF3RCxPQUE5Q0YsRUFBQSxJQUFBd21ELEdBQUF0bUQsRUFBQUgsRUFBQUUsRUFBQUQsSUFBa0IrRixLQUFBNUgsRUFBUzZCLEVBQUErbUQsZUFBQTdvRCxFQUFtQjhCLEVBQVMsU0FBQWtuRCxHQUFBbm5ELEVBQUFDLEVBQUE5QixFQUFBQyxHQUEyRCxPQUF0QzRCLEVBQUEsSUFBQXltRCxHQUFBLEdBQUF6bUQsRUFBQTVCLEVBQUE2QixJQUFtQittRCxlQUFBN29ELEVBQW1CNkIsRUFBUyxTQUFBb25ELEdBQUFwbkQsRUFBQUMsRUFBQTlCLEdBQTJELE9BQXhDNkIsRUFBQSxJQUFBeW1ELEdBQUEsRUFBQXptRCxFQUFBLEtBQUFDLElBQXFCK21ELGVBQUE3b0QsRUFBbUI2QixFQUFTLFNBQUFxbkQsR0FBQXJuRCxFQUFBQyxFQUFBOUIsR0FBMkwsT0FBeEs4QixFQUFBLElBQUF3bUQsR0FBQSxTQUFBem1ELEVBQUFzTCxTQUFBdEwsRUFBQXNMLFlBQUF0TCxFQUFBWCxJQUFBWSxJQUFvRCttRCxlQUFBN29ELEVBQW1COEIsRUFBQTBoQyxXQUFhNlcsY0FBQXg0QyxFQUFBdzRDLGNBQUE4TyxnQkFBQSxLQUFBQyxlQUFBdm5ELEVBQUF1bkQsZ0JBQW9GdG5ELEVBQ25aLFNBQUF1bkQsR0FBQXhuRCxFQUFBQyxFQUFBOUIsR0FBeVcsT0FBMVQ2QixHQUFHc00sUUFBL0JyTSxFQUFBLElBQUF3bUQsR0FBQSxZQUFBeG1ELEVBQUEsS0FBK0J1NEMsY0FBQXg0QyxFQUFBc25ELGdCQUFBLEtBQUFHLG9CQUFBLEVBQUFDLGtCQUFBLEVBQUFDLHNCQUFBLEVBQUFDLG9CQUFBLEVBQUFDLGlCQUFBLEVBQUFDLDRCQUFBLEVBQUFDLGFBQUEsS0FBQWgrQyxRQUFBLEtBQUFpK0MsZUFBQSxLQUFBQyxRQUFBOXBELEVBQUErcEQsd0JBQUEsRUFBQUMsV0FBQSxLQUFBQyxrQkFBQSxNQUF1VG5vRCxFQUFBMGhDLFVBQUEzaEMsRUFBcUIsSUFBQXFvRCxHQUFBLEtBQUFDLEdBQUEsS0FBb0IsU0FBQUMsR0FBQXZvRCxHQUFlLGdCQUFBQyxHQUFtQixJQUFJLE9BQUFELEVBQUFDLEdBQVksTUFBQTlCLE1BQ2pKLFNBQUFxcUQsR0FBQXhvRCxHQUFlLG1CQUFBcW9ELE9BQUFyb0QsR0FBOEIsU0FBQXlvRCxHQUFBem9ELEdBQWUsbUJBQUFzb0QsT0FBQXRvRCxHQUE4QixJQUFBMG9ELElBQUEsRUFDN1ksU0FBQUMsR0FBQTNvRCxHQUFlLE9BQU9nbkQsZUFBQSxFQUFBNEIsVUFBQTVvRCxFQUFBNm9ELFlBQUEsS0FBQUMsV0FBQSxLQUFBQyxvQkFBQSxLQUFBQyxtQkFBQSxLQUFBbEMsWUFBQSxLQUFBRCxXQUFBLEtBQUFvQyxvQkFBQSxLQUFBQyxtQkFBQSxNQUFrTSxTQUFBQyxHQUFBbnBELEdBQWUsT0FBT2duRCxlQUFBaG5ELEVBQUFnbkQsZUFBQTRCLFVBQUE1b0QsRUFBQTRvRCxVQUFBQyxZQUFBN29ELEVBQUE2b0QsWUFBQUMsV0FBQTlvRCxFQUFBOG9ELFdBQUFDLG9CQUFBLEtBQUFDLG1CQUFBLEtBQUFsQyxZQUFBLEtBQUFELFdBQUEsS0FBQW9DLG9CQUFBLEtBQUFDLG1CQUFBLE1BQzlPLFNBQUFFLEdBQUFwcEQsR0FBZSxPQUFPZ25ELGVBQUFobkQsRUFBQXVpQyxJQUFBLEVBQUF0c0IsUUFBQSxLQUFBZ0wsU0FBQSxLQUFBMVUsS0FBQSxLQUFBdzZDLFdBQUEsTUFBNkUsU0FBQXNDLEdBQUFycEQsRUFBQUMsRUFBQTlCLEdBQW1CLE9BQUE2QixFQUFBOG9ELFdBQUE5b0QsRUFBQTZvRCxZQUFBN29ELEVBQUE4b0QsV0FBQTdvRCxHQUFBRCxFQUFBOG9ELFdBQUF2OEMsS0FBQXRNLEVBQUFELEVBQUE4b0QsV0FBQTdvRCxJQUFzRixJQUFBRCxFQUFBZ25ELGdCQUFBaG5ELEVBQUFnbkQsZUFBQTdvRCxLQUFBNkIsRUFBQWduRCxlQUFBN29ELEdBQzVNLFNBQUFtckQsR0FBQXRwRCxFQUFBQyxFQUFBOUIsR0FBbUIsSUFBQUMsRUFBQTRCLEVBQUE0akMsVUFBa0IsVUFBQXhsQyxFQUFBLENBQWEsSUFBQThCLEVBQUFGLEVBQUEybUQsWUFBb0J4bUQsRUFBQSxLQUFXLE9BQUFELE1BQUFGLEVBQUEybUQsWUFBQWdDLEdBQUEzb0QsRUFBQTBtRCxxQkFBZ0R4bUQsRUFBQUYsRUFBQTJtRCxZQUFBeG1ELEVBQUEvQixFQUFBdW9ELFlBQUEsT0FBQXptRCxFQUFBLE9BQUFDLEdBQUFELEVBQUFGLEVBQUEybUQsWUFBQWdDLEdBQUEzb0QsRUFBQTBtRCxlQUFBdm1ELEVBQUEvQixFQUFBdW9ELFlBQUFnQyxHQUFBdnFELEVBQUFzb0QsZ0JBQUF4bUQsRUFBQUYsRUFBQTJtRCxZQUFBd0MsR0FBQWhwRCxHQUFBLE9BQUFBLE1BQUEvQixFQUFBdW9ELFlBQUF3QyxHQUFBanBELElBQXlMLE9BQUFDLEdBQUFELElBQUFDLEVBQUFrcEQsR0FBQW5wRCxFQUFBRCxFQUFBOUIsR0FBQSxPQUFBK0IsRUFBQTRvRCxZQUFBLE9BQUEzb0QsRUFBQTJvRCxZQUFBTyxHQUFBbnBELEVBQUFELEVBQUE5QixHQUFBa3JELEdBQUFscEQsRUFBQUYsRUFBQTlCLEtBQUFrckQsR0FBQW5wRCxFQUFBRCxFQUFBOUIsR0FBQWdDLEVBQUEyb0QsV0FBQTdvRCxHQUMxVCxTQUFBc3BELEdBQUF2cEQsRUFBQUMsRUFBQTlCLEdBQW1CLElBQUFDLEVBQUE0QixFQUFBMm1ELFlBQXlFLFFBQXJEdm9ELEVBQUEsT0FBQUEsRUFBQTRCLEVBQUEybUQsWUFBQWdDLEdBQUEzb0QsRUFBQTBtRCxlQUFBOEMsR0FBQXhwRCxFQUFBNUIsSUFBcUQ0cUQsbUJBQUE1cUQsRUFBQTJxRCxvQkFBQTNxRCxFQUFBNHFELG1CQUFBL29ELEdBQUE3QixFQUFBNHFELG1CQUFBejhDLEtBQUF0TSxFQUFBN0IsRUFBQTRxRCxtQkFBQS9vRCxJQUE4SCxJQUFBN0IsRUFBQTRvRCxnQkFBQTVvRCxFQUFBNG9ELGVBQUE3b0QsS0FBQUMsRUFBQTRvRCxlQUFBN29ELEdBQStELFNBQUFxckQsR0FBQXhwRCxFQUFBQyxHQUFpQixJQUFBOUIsRUFBQTZCLEVBQUE0akMsVUFBdUUsT0FBckQsT0FBQXpsQyxHQUFBOEIsSUFBQTlCLEVBQUF3b0QsY0FBQTFtRCxFQUFBRCxFQUFBMm1ELFlBQUF3QyxHQUFBbHBELElBQXFEQSxFQUNqWCxTQUFBd3BELEdBQUF6cEQsRUFBQUMsRUFBQTlCLEVBQUFDLEVBQUE4QixFQUFBQyxHQUF5QixPQUFBaEMsRUFBQW9rQyxLQUFjLGdDQUFBdmlDLEVBQUE3QixFQUFBOFgsU0FBQWpXLEVBQUEvQixLQUFBa0MsRUFBQS9CLEVBQUE4QixHQUFBRixFQUFnRSxPQUFBQSxFQUFBMnlDLFdBQUEsS0FBQTN5QyxFQUFBMnlDLFVBQUEsR0FBd0MsT0FBMkQsV0FBeEN6eUMsRUFBQSxtQkFBbkJGLEVBQUE3QixFQUFBOFgsU0FBbUJqVyxFQUFBL0IsS0FBQWtDLEVBQUEvQixFQUFBOEIsR0FBQUYsU0FBd0MsSUFBQUUsRUFBQSxNQUE4QixPQUFBTixLQUFXeEIsRUFBQThCLEdBQU0sT0FBQXdvRCxJQUFBLEVBQWEsT0FBQXRxRCxFQUN0USxTQUFBc3JELEdBQUExcEQsRUFBQUMsRUFBQTlCLEVBQUFDLEVBQUE4QixHQUE2QixHQUFOd29ELElBQUEsSUFBTSxJQUFBem9ELEVBQUErbUQsZ0JBQUEvbUQsRUFBQSttRCxlQUFBOW1ELEdBQUEsQ0FBMEQsUUFBQUMsR0FBVkYsRUFBQXVwRCxHQUFBeHBELEVBQUFDLElBQVUyb0QsVUFBQXR4QixFQUFBLEtBQUFrRSxFQUFBLEVBQUExZCxFQUFBN2QsRUFBQTRvRCxZQUFBdHBELEVBQUFZLEVBQXFELE9BQUEyZCxHQUFTLENBQUUsSUFBQWxmLEVBQUFrZixFQUFBa3BDLGVBQXVCcG9ELEVBQUFzQixHQUFRLE9BQUFvM0IsTUFBQXhaLEVBQUEzZCxFQUFBWixJQUFBLElBQUFpOEIsS0FBQTU4QixLQUFBNDhCLEVBQUE1OEIsS0FBc0NXLEVBQUFrcUQsR0FBQXpwRCxFQUFBQyxFQUFBNmQsRUFBQXZlLEVBQUFwQixFQUFBQyxHQUFBLE9BQUEwZixFQUFBbUQsV0FBQWpoQixFQUFBMnlDLFdBQUEsR0FBQTcwQixFQUFBaXBDLFdBQUEsWUFBQTltRCxFQUFBNG1ELFdBQUE1bUQsRUFBQTZtRCxZQUFBN21ELEVBQUE0bUQsV0FBQS9vQyxHQUFBN2QsRUFBQTRtRCxXQUFBRSxXQUFBanBDLEVBQUE3ZCxFQUFBNG1ELFdBQUEvb0MsS0FBMEtBLElBQUF2UixLQUFnQixJQUFQM04sRUFBQSxLQUFPa2YsRUFBQTdkLEVBQUE4b0Qsb0JBQTRCLE9BQUFqckMsR0FBUyxDQUFFLElBQUFtYyxFQUFBbmMsRUFBQWtwQyxlQUF1Qi9zQixFQUFBLzVCLEdBQVEsT0FBQXRCLE1BQUFrZixFQUFBLE9BQzVkd1osSUFBQW4zQixFQUFBWixLQUFBLElBQUFpOEIsS0FBQXZCLEtBQUF1QixFQUFBdkIsS0FBeUIxNkIsRUFBQWtxRCxHQUFBenBELEVBQUFDLEVBQUE2ZCxFQUFBdmUsRUFBQXBCLEVBQUFDLEdBQUEsT0FBQTBmLEVBQUFtRCxXQUFBamhCLEVBQUEyeUMsV0FBQSxHQUFBNzBCLEVBQUFpcEMsV0FBQSxZQUFBOW1ELEVBQUFpcEQsbUJBQUFqcEQsRUFBQWdwRCxvQkFBQWhwRCxFQUFBaXBELG1CQUFBcHJDLEdBQUE3ZCxFQUFBaXBELG1CQUFBbkMsV0FBQWpwQyxFQUFBN2QsRUFBQWlwRCxtQkFBQXByQyxLQUFrTkEsSUFBQXZSLEtBQVMsT0FBQStxQixJQUFBcjNCLEVBQUE2b0QsV0FBQSxNQUE4QixPQUFBbHFELEVBQUFxQixFQUFBK29ELG1CQUFBLEtBQUFocEQsRUFBQTJ5QyxXQUFBLEdBQW1ELE9BQUFyYixHQUFBLE9BQUExNEIsSUFBQXVCLEVBQUFaLEdBQTBCVSxFQUFBMm9ELFVBQUF6b0QsRUFBY0YsRUFBQTRvRCxZQUFBdnhCLEVBQWdCcjNCLEVBQUE4b0Qsb0JBQUFucUQsRUFBd0JxQixFQUFBK21ELGVBQUF4ckIsRUFBbUJ4N0IsRUFBQTBtRCxjQUFBbm5ELEdBQ3hhLFNBQUFvcUQsR0FBQTNwRCxFQUFBQyxHQUFpQixtQkFBQUQsR0FBQW02QixFQUFBLE1BQUFuNkIsR0FBd0NBLEVBQUEvQixLQUFBZ0MsR0FDekQsU0FBQTJwRCxHQUFBNXBELEVBQUFDLEVBQUE5QixHQUFvTixJQUFqTSxPQUFBOEIsRUFBQThvRCxzQkFBQSxPQUFBOW9ELEVBQUE2b0QsYUFBQTdvRCxFQUFBNm9ELFdBQUF2OEMsS0FBQXRNLEVBQUE4b0Qsb0JBQUE5b0QsRUFBQTZvRCxXQUFBN29ELEVBQUErb0Qsb0JBQUEvb0QsRUFBQThvRCxvQkFBQTlvRCxFQUFBK29ELG1CQUFBLE1BQWlMaHBELEVBQUFDLEVBQUE2bUQsWUFBZ0I3bUQsRUFBQTZtRCxZQUFBN21ELEVBQUE0bUQsV0FBQSxLQUFvQyxPQUFBN21ELEdBQVMsQ0FBRSxJQUFBNUIsRUFBQTRCLEVBQUFpaEIsU0FBaUIsT0FBQTdpQixJQUFBNEIsRUFBQWloQixTQUFBLEtBQUEwb0MsR0FBQXZyRCxFQUFBRCxJQUFvQzZCLElBQUErbUQsV0FBdUMsSUFBeEIvbUQsRUFBQUMsRUFBQWdwRCxvQkFBd0JocEQsRUFBQWdwRCxvQkFBQWhwRCxFQUFBaXBELG1CQUFBLEtBQW9ELE9BQUFscEQsR0FBUyxRQUFBQyxFQUFBRCxFQUFBaWhCLFlBQUFqaEIsRUFBQWloQixTQUFBLEtBQUEwb0MsR0FBQTFwRCxFQUFBOUIsSUFBQTZCLElBQUErbUQsV0FDNVosU0FBQThDLEdBQUE3cEQsRUFBQUMsR0FBaUIsT0FBT2xCLE1BQUFpQixFQUFBOEIsT0FBQTdCLEVBQUE2cEQsTUFBQWpkLEdBQUE1c0MsSUFBOEIsSUFBQThwRCxHQUFBckUsR0FBQSxNQUFBc0UsR0FBQXRFLEdBQUEsTUFBQXVFLEdBQUF2RSxHQUFBLEdBQXFDLFNBQUF3RSxHQUFBbHFELEdBQWUsSUFBQUMsRUFBQUQsRUFBQWdHLEtBQUFzM0IsU0FBc0IzQixHQUFBc3VCLEdBQUFocUQsRUFBQWs5QixjQUF1QnhCLEdBQUFxdUIsR0FBQS9wRCxFQUFBZzlCLGVBQXdCdEIsR0FBQW91QixHQUFBL3BELEdBQVVDLEVBQUFnOUIsY0FBQWo5QixFQUFBNHNDLGFBQUE3dEMsTUFBcUNrQixFQUFBazlCLGFBQUFuOUIsRUFBQTJoQyxVQUEyQixTQUFBd29CLEdBQUFucUQsR0FBZSxJQUFBQyxFQUFBZ3FELEdBQUEzOUMsUUFBQW5PLEVBQUE2ckQsR0FBQTE5QyxRQUE4Qml2QixHQUFBd3VCLElBQVF4dUIsR0FBQXl1QixJQUFRenVCLEdBQUEwdUIsS0FBUWpxRCxJQUFBZ0csS0FBQXMzQixVQUFrQkwsY0FBQTkrQixFQUFrQjZCLEVBQUFtOUIsYUFBQWw5QixFQUFpQixJQUFBbXFELE1BQVNDLEdBQUEzRSxHQUFBMEUsSUFBQUUsR0FBQTVFLEdBQUEwRSxJQUFBRyxHQUFBN0UsR0FBQTBFLElBQStCLFNBQUFJLEdBQUF4cUQsR0FBc0MsT0FBdkJBLElBQUFvcUQsSUFBQWp3QixFQUFBLE9BQXVCbjZCLEVBQ2pjLFNBQUF5cUQsR0FBQXpxRCxFQUFBQyxHQUFpQjA3QixHQUFBNHVCLEdBQUF0cUQsR0FBVTA3QixHQUFBMnVCLEdBQUF0cUQsR0FBVTI3QixHQUFBMHVCLEdBQUFELElBQVcsSUFBQWpzRCxFQUFBOEIsRUFBQWdyQyxTQUFpQixPQUFBOXNDLEdBQVUsZUFBQThCLE9BQUFvbEMsaUJBQUFwbEMsRUFBQTgrQyxhQUFBTCxHQUFBLFNBQWtFLE1BQU0sUUFBQXorQyxFQUFBeStDLEdBQUF6K0MsR0FBQTlCLEVBQUEsSUFBQUEsRUFBQThCLEVBQUF1RixXQUFBdkYsR0FBQTgrQyxjQUFBLEtBQUE1Z0QsSUFBQXVzRCxTQUE0RW52QixHQUFBOHVCLElBQVExdUIsR0FBQTB1QixHQUFBcHFELEdBQVUsU0FBQTBxRCxHQUFBM3FELEdBQWV1N0IsR0FBQTh1QixJQUFROXVCLEdBQUErdUIsSUFBUS91QixHQUFBZ3ZCLElBQVEsU0FBQUssR0FBQTVxRCxHQUFlc3FELEdBQUFoK0MsVUFBQXRNLElBQUF1N0IsR0FBQTh1QixJQUFBOXVCLEdBQUErdUIsS0FBa0MsU0FBQU8sR0FBQTdxRCxFQUFBQyxFQUFBOUIsR0FBbUIsSUFBQUMsRUFBQTRCLEVBQUEwbUQsY0FBK0J0b0QsRUFBQSxRQUFUNkIsSUFBQTlCLEVBQUFDLFVBQVMsSUFBQTZCLEVBQUE3QixFQUFBd0IsS0FBNkJ4QixFQUFBNkIsR0FBTUQsRUFBQTBtRCxjQUFBdG9ELEVBQWtDLFFBQWhCNEIsSUFBQTJtRCxjQUFnQixJQUFBM21ELEVBQUFnbkQsaUJBQUFobkQsRUFBQTRvRCxVQUFBeHFELEdBQ2hjLElBQUEwc0QsSUFBUXZ3QixVQUFBLFNBQUF2NkIsR0FBc0IsU0FBQUEsSUFBQStxRCxzQkFBQSxJQUFBclksR0FBQTF5QyxJQUE2QzA2QixnQkFBQSxTQUFBMTZCLEVBQUFDLEVBQUE5QixHQUFpQzZCLElBQUErcUQsb0JBQXdCLElBQUEzc0QsRUFBQTRzRCxLQUFxQjlxRCxFQUFBa3BELEdBQVZockQsRUFBQTZzRCxHQUFBN3NELEVBQUE0QixJQUFzQkUsRUFBQStWLFFBQUFoVyxPQUFZLElBQUE5QixHQUFBLE9BQUFBLElBQUErQixFQUFBK2dCLFNBQUE5aUIsR0FBcUNtckQsR0FBQXRwRCxFQUFBRSxFQUFBOUIsR0FBVThzRCxHQUFBbHJELEVBQUE1QixJQUFRcThCLG9CQUFBLFNBQUF6NkIsRUFBQUMsRUFBQTlCLEdBQXFDNkIsSUFBQStxRCxvQkFBd0IsSUFBQTNzRCxFQUFBNHNELEtBQXFCOXFELEVBQUFrcEQsR0FBVmhyRCxFQUFBNnNELEdBQUE3c0QsRUFBQTRCLElBQXNCRSxFQUFBcWlDLElBQUEsRUFBUXJpQyxFQUFBK1YsUUFBQWhXLE9BQVksSUFBQTlCLEdBQUEsT0FBQUEsSUFBQStCLEVBQUErZ0IsU0FBQTlpQixHQUFxQ21yRCxHQUFBdHBELEVBQUFFLEVBQUE5QixHQUFVOHNELEdBQUFsckQsRUFBQTVCLElBQVFvOEIsbUJBQUEsU0FBQXg2QixFQUFBQyxHQUFrQ0QsSUFBQStxRCxvQkFBd0IsSUFBQTVzRCxFQUFBNnNELEtBQXFCNXNELEVBQUFnckQsR0FBVmpyRCxFQUFBOHNELEdBQUE5c0QsRUFBQTZCLElBQXNCNUIsRUFBQW1rQyxJQUFBLE9BQVEsSUFDcGZ0aUMsR0FBQSxPQUFBQSxJQUFBN0IsRUFBQTZpQixTQUFBaGhCLEdBQTRCcXBELEdBQUF0cEQsRUFBQTVCLEVBQUFELEdBQVUrc0QsR0FBQWxyRCxFQUFBN0IsS0FBVSxTQUFBZ3RELEdBQUFuckQsRUFBQUMsRUFBQTlCLEVBQUFDLEVBQUE4QixFQUFBQyxHQUF5QixJQUFBbTNCLEVBQUF0M0IsRUFBQTJoQyxVQUEyQixPQUFUM2hDLElBQUFnRyxLQUFTLG1CQUFBc3hCLEVBQUEvbkIsc0JBQUErbkIsRUFBQS9uQixzQkFBQXBSLEVBQUErQixFQUFBQyxJQUFBSCxFQUFBTixZQUFBTSxFQUFBTixVQUFBdTdCLHdCQUFBc0QsRUFBQXQrQixFQUFBOUIsS0FBQW9nQyxFQUFBbmdDLEVBQUE4QixJQUNwRyxTQUFBa3JELEdBQUFwckQsRUFBQUMsRUFBQTlCLEVBQUFDLEdBQXFCNEIsRUFBQUMsRUFBQTBPLE1BQVUsbUJBQUExTyxFQUFBd1AsMkJBQUF4UCxFQUFBd1AsMEJBQUF0UixFQUFBQyxHQUFrRixtQkFBQTZCLEVBQUFvckQsa0NBQUFwckQsRUFBQW9yRCxpQ0FBQWx0RCxFQUFBQyxHQUFnRzZCLEVBQUEwTyxRQUFBM08sR0FBQThxRCxHQUFBcndCLG9CQUFBeDZCLElBQUEwTyxNQUFBLE1BQ2pOLFNBQUEyOEMsR0FBQXRyRCxFQUFBQyxHQUFpQixJQUFBOUIsRUFBQTZCLEVBQUFnRyxLQUFBNUgsRUFBQTRCLEVBQUEyaEMsVUFBQXpoQyxFQUFBRixFQUFBNHNDLGFBQUF6c0MsRUFBQTBsRCxHQUFBN2xELEdBQW9ENUIsRUFBQTBMLE1BQUE1SixFQUFVOUIsRUFBQXVRLE1BQUEzTyxFQUFBMG1ELGNBQXdCdG9ELEVBQUErRixLQUFBczZCLEVBQVVyZ0MsRUFBQTJMLFFBQUFnOEMsR0FBQS9sRCxFQUFBRyxHQUFrQyxRQUFoQkEsRUFBQUgsRUFBQTJtRCxlQUFnQitDLEdBQUExcEQsRUFBQUcsRUFBQUQsRUFBQTlCLEVBQUE2QixHQUFBN0IsRUFBQXVRLE1BQUEzTyxFQUFBMG1ELGVBQW9GLG1CQUFsQ3ZtRCxFQUFBSCxFQUFBZ0csS0FBQTBVLDRCQUFrQ213QyxHQUFBN3FELEVBQUFHLEVBQUFELEdBQUE5QixFQUFBdVEsTUFBQTNPLEVBQUEwbUQsZUFBMkQsbUJBQUF2b0QsRUFBQXVjLDBCQUFBLG1CQUFBdGMsRUFBQW10RCx5QkFBQSxtQkFBQW50RCxFQUFBb3RELDJCQUFBLG1CQUFBcHRELEVBQUFxcUIscUJBQUF0cUIsRUFBQUMsRUFBQXVRLE1BQUEsbUJBQUF2USxFQUFBcXFCLG9CQUNsU3JxQixFQUFBcXFCLHFCQUFBLG1CQUFBcnFCLEVBQUFvdEQsMkJBQUFwdEQsRUFBQW90RCw0QkFBQXJ0RCxJQUFBQyxFQUFBdVEsT0FBQW04QyxHQUFBcndCLG9CQUFBcjhCLElBQUF1USxNQUFBLGNBQUF4TyxFQUFBSCxFQUFBMm1ELGVBQUErQyxHQUFBMXBELEVBQUFHLEVBQUFELEVBQUE5QixFQUFBNkIsR0FBQTdCLEVBQUF1USxNQUFBM08sRUFBQTBtRCxnQkFBNk4sbUJBQUF0b0QsRUFBQWdSLG9CQUFBcFAsRUFBQTJ5QyxXQUFBLEdBQTBELElBQUE4WSxHQUFBdHlDLE1BQUE4RixRQUN2UixTQUFBeXNDLEdBQUExckQsRUFBQUMsRUFBQTlCLEdBQTJCLFdBQVI2QixFQUFBN0IsRUFBQTJSLE1BQVEsbUJBQUE5UCxHQUFBLGlCQUFBQSxFQUFBLENBQXlELEdBQUE3QixFQUFBdTlCLE9BQUEsQ0FBd0IsSUFBQXQ5QixPQUFBLEdBQVhELElBQUF1OUIsVUFBd0IsSUFBQXY5QixFQUFBb2tDLEtBQUFwSSxFQUFBLE9BQUEvN0IsRUFBQUQsRUFBQXdqQyxXQUE2Q3ZqQyxHQUFBKzdCLEVBQUEsTUFBQW42QixHQUFvQixJQUFBRSxFQUFBLEdBQUFGLEVBQVcsY0FBQUMsR0FBQSxPQUFBQSxFQUFBNlAsS0FBQSxtQkFBQTdQLEVBQUE2UCxLQUFBN1AsRUFBQTZQLElBQUE2N0MsYUFBQXpyRCxFQUFBRCxFQUFBNlAsTUFBd0Y3UCxFQUFBLFNBQUFELEdBQWMsSUFBQUMsRUFBQTdCLEVBQUErRixPQUFBczZCLEVBQUFyZ0MsRUFBQStGLFFBQTJCL0YsRUFBQStGLEtBQVEsT0FBQW5FLFNBQUFDLEVBQUFDLEdBQUFELEVBQUFDLEdBQUFGLElBQTZCMnJELFdBQUF6ckQsRUFBZUQsR0FBUyxpQkFBQUQsR0FBQW02QixFQUFBLE9BQW9DaDhCLEVBQUF1OUIsUUFBQXZCLEVBQUEsTUFBQW42QixHQUEyQixPQUFBQSxFQUNsYyxTQUFBNHJELEdBQUE1ckQsRUFBQUMsR0FBaUIsYUFBQUQsRUFBQWdHLE1BQUFtMEIsRUFBQSx5QkFBQTM3QixPQUFBa0IsVUFBQW9CLFNBQUE3QyxLQUFBZ0MsR0FBQSxxQkFBcUd6QixPQUFBOEgsS0FBQXJHLEdBQUFnQyxLQUFBLFVBQThCaEMsRUFBQSxJQUNwSixTQUFBNHJELEdBQUE3ckQsR0FBZSxTQUFBQyxJQUFBOUIsR0FBZ0IsR0FBQTZCLEVBQUEsQ0FBTSxJQUFBNUIsRUFBQTZCLEVBQUE0bUQsV0FBbUIsT0FBQXpvRCxLQUFBMm9ELFdBQUE1b0QsRUFBQThCLEVBQUE0bUQsV0FBQTFvRCxHQUFBOEIsRUFBQTZtRCxZQUFBN21ELEVBQUE0bUQsV0FBQTFvRCxFQUFzRUEsRUFBQTRvRCxXQUFBLEtBQWtCNW9ELEVBQUF3MEMsVUFBQSxHQUFlLFNBQUF4MEMsSUFBQUMsR0FBZ0IsSUFBQTRCLEVBQUEsWUFBa0IsS0FBSyxPQUFBNUIsR0FBUzZCLEVBQUE5QixFQUFBQyxPQUFBMDBDLFFBQW9CLFlBQVksU0FBQTEwQyxFQUFBNEIsRUFBQUMsR0FBZ0IsSUFBQUQsRUFBQSxJQUFBcTlDLElBQWMsT0FBQXA5QyxHQUFTLE9BQUFBLEVBQUFaLElBQUFXLEVBQUFzckMsSUFBQXJyQyxFQUFBWixJQUFBWSxHQUFBRCxFQUFBc3JDLElBQUFyckMsRUFBQW9JLE1BQUFwSSxPQUFBNnlDLFFBQTBELE9BQUE5eUMsRUFBUyxTQUFBRSxFQUFBRixFQUFBQyxFQUFBOUIsR0FBdUQsT0FBckM2QixFQUFBaW5ELEdBQUFqbkQsRUFBQUMsRUFBQTlCLElBQVlrSyxNQUFBLEVBQVVySSxFQUFBOHlDLFFBQUEsS0FBZTl5QyxFQUFTLFNBQUFHLEVBQUFGLEVBQUE5QixFQUFBQyxHQUE0QixPQUFWNkIsRUFBQW9JLE1BQUFqSyxFQUFVNEIsRUFBNkIsUUFBZDVCLEVBQUE2QixFQUFBMmpDLFlBQWN4bEMsSUFBQWlLLE9BQUFsSyxHQUFBOEIsRUFBQTB5QyxVQUNsZCxFQUFBeDBDLEdBQUFDLEdBQU82QixFQUFBMHlDLFVBQUEsRUFBY3gwQyxHQURnYUEsRUFDdlosU0FBQW01QixFQUFBcjNCLEdBQXFELE9BQXZDRCxHQUFBLE9BQUFDLEVBQUEyakMsWUFBQTNqQyxFQUFBMHlDLFVBQUEsR0FBdUMxeUMsRUFBUyxTQUFBdTdCLEVBQUF4N0IsRUFBQUMsRUFBQTlCLEVBQUFDLEdBQW9CLGNBQUE2QixHQUFBLElBQUFBLEVBQUFzaUMsTUFBQXRpQyxFQUFBbW5ELEdBQUFqcEQsRUFBQTZCLEVBQUFmLEtBQUFiLElBQUE2a0MsT0FBQWpqQyxFQUFBQyxLQUE0REEsRUFBQUMsRUFBQUQsRUFBQTlCLEVBQUFDLElBQVc2a0MsT0FBQWpqQyxFQUFXQyxHQUFTLFNBQUE2ZCxFQUFBOWQsRUFBQUMsRUFBQTlCLEVBQUFDLEdBQW9CLGNBQUE2QixLQUFBK0YsT0FBQTdILEVBQUE2SCxPQUFBNUgsRUFBQThCLEVBQUFELEVBQUE5QixFQUFBMkwsTUFBQTFMLElBQUEwUixJQUFBNDdDLEdBQUExckQsRUFBQUMsRUFBQTlCLEdBQUFDLEVBQUE2a0MsT0FBQWpqQyxFQUFBNUIsS0FBa0ZBLEVBQUE4b0QsR0FBQS9vRCxFQUFBNkIsRUFBQWYsS0FBQWIsSUFBaUIwUixJQUFBNDdDLEdBQUExckQsRUFBQUMsRUFBQTlCLEdBQWdCQyxFQUFBNmtDLE9BQUFqakMsRUFBVzVCLEdBQVMsU0FBQW1CLEVBQUFTLEVBQUFDLEVBQUE5QixFQUFBQyxHQUFvQixjQUFBNkIsR0FBQSxJQUFBQSxFQUFBc2lDLEtBQUF0aUMsRUFBQTBoQyxVQUFBNlcsZ0JBQUFyNkMsRUFBQXE2QyxlQUFBdjRDLEVBQUEwaEMsVUFBQTRsQixpQkFBQXBwRCxFQUFBb3BELGlCQUFBdG5ELEVBQzFYb25ELEdBQUFscEQsRUFBQTZCLEVBQUFmLEtBQUFiLElBQUE2a0MsT0FBQWpqQyxFQUFBQyxLQUE0QkEsRUFBQUMsRUFBQUQsRUFBQTlCLEVBQUFtTixhQUFBbE4sSUFBd0I2a0MsT0FBQWpqQyxFQUFXQyxHQUFTLFNBQUFyQixFQUFBb0IsRUFBQUMsRUFBQTlCLEVBQUFDLEVBQUErQixHQUFzQixjQUFBRixHQUFBLEtBQUFBLEVBQUFzaUMsTUFBQXRpQyxFQUFBa25ELEdBQUFocEQsRUFBQTZCLEVBQUFmLEtBQUFiLEVBQUErQixJQUFBOGlDLE9BQUFqakMsRUFBQUMsS0FBK0RBLEVBQUFDLEVBQUFELEVBQUE5QixFQUFBQyxJQUFXNmtDLE9BQUFqakMsRUFBV0MsR0FBUyxTQUFBZzZCLEVBQUFqNkIsRUFBQUMsRUFBQTlCLEdBQWtCLG9CQUFBOEIsR0FBQSxpQkFBQUEsRUFBQSxPQUFBQSxFQUFBbW5ELEdBQUEsR0FBQW5uRCxFQUFBRCxFQUFBZixLQUFBZCxJQUFBOGtDLE9BQUFqakMsRUFBQUMsRUFBb0Ysb0JBQUFBLEdBQUEsT0FBQUEsRUFBQSxDQUFrQyxPQUFBQSxFQUFBdzdCLFVBQW1CLEtBQUFzUSxHQUFBLE9BQUE1dEMsRUFBQStvRCxHQUFBam5ELEVBQUFELEVBQUFmLEtBQUFkLElBQUEyUixJQUFBNDdDLEdBQUExckQsRUFBQSxLQUFBQyxHQUFBOUIsRUFBQThrQyxPQUFBampDLEVBQUE3QixFQUFnRSxLQUFBNnRDLEdBQUEsT0FBQS9yQyxFQUFBb25ELEdBQUFwbkQsRUFBQUQsRUFBQWYsS0FBQWQsSUFBQThrQyxPQUFBampDLEVBQUFDLEVBQTZDLEdBQUF3ckQsR0FBQXhyRCxJQUFBeXNDLEdBQUF6c0MsR0FBQSxPQUFBQSxFQUFBa25ELEdBQUFsbkQsRUFBQUQsRUFBQWYsS0FBQWQsRUFBQSxPQUFBOGtDLE9BQ3BjampDLEVBQUFDLEVBQUkyckQsR0FBQTVyRCxFQUFBQyxHQUFRLFlBQVksU0FBQTQ3QixFQUFBNzdCLEVBQUFDLEVBQUE5QixFQUFBQyxHQUFvQixJQUFBOEIsRUFBQSxPQUFBRCxJQUFBWixJQUFBLEtBQTBCLG9CQUFBbEIsR0FBQSxpQkFBQUEsRUFBQSxjQUFBK0IsRUFBQSxLQUFBczdCLEVBQUF4N0IsRUFBQUMsRUFBQSxHQUFBOUIsRUFBQUMsR0FBK0Usb0JBQUFELEdBQUEsT0FBQUEsRUFBQSxDQUFrQyxPQUFBQSxFQUFBczlCLFVBQW1CLEtBQUFzUSxHQUFBLE9BQUE1dEMsRUFBQWtCLE1BQUFhLEVBQUEvQixFQUFBNkgsT0FBQWltQyxHQUFBcnRDLEVBQUFvQixFQUFBQyxFQUFBOUIsRUFBQTJMLE1BQUF3QixTQUFBbE4sRUFBQThCLEdBQUE0ZCxFQUFBOWQsRUFBQUMsRUFBQTlCLEVBQUFDLEdBQUEsS0FBaUYsS0FBQTR0QyxHQUFBLE9BQUE3dEMsRUFBQWtCLE1BQUFhLEVBQUFYLEVBQUFTLEVBQUFDLEVBQUE5QixFQUFBQyxHQUFBLEtBQXlDLEdBQUFxdEQsR0FBQXR0RCxJQUFBdXVDLEdBQUF2dUMsR0FBQSxjQUFBK0IsRUFBQSxLQUFBdEIsRUFBQW9CLEVBQUFDLEVBQUE5QixFQUFBQyxFQUFBLE1BQXFEd3RELEdBQUE1ckQsRUFBQTdCLEdBQVEsWUFBWSxTQUFBK0gsRUFBQWxHLEVBQUFDLEVBQUE5QixFQUFBQyxFQUFBOEIsR0FBdUIsb0JBQUE5QixHQUFBLGlCQUFBQSxFQUFBLE9BQUFvOUIsRUFBQXY3QixFQUFBRCxJQUFBckIsSUFBQVIsSUFBQSxRQUFBQyxFQUFBOEIsR0FDcGEsb0JBQUE5QixHQUFBLE9BQUFBLEVBQUEsQ0FBa0MsT0FBQUEsRUFBQXE5QixVQUFtQixLQUFBc1EsR0FBQSxPQUFBL3JDLElBQUFyQixJQUFBLE9BQUFQLEVBQUFpQixJQUFBbEIsRUFBQUMsRUFBQWlCLE1BQUEsS0FBQWpCLEVBQUE0SCxPQUFBaW1DLEdBQUFydEMsRUFBQXFCLEVBQUFELEVBQUE1QixFQUFBMEwsTUFBQXdCLFNBQUFwTCxFQUFBOUIsRUFBQWlCLEtBQUF5ZSxFQUFBN2QsRUFBQUQsRUFBQTVCLEVBQUE4QixHQUEwRyxLQUFBOHJDLEdBQUEsT0FBQXpzQyxFQUFBVSxFQUFBRCxJQUFBckIsSUFBQSxPQUFBUCxFQUFBaUIsSUFBQWxCLEVBQUFDLEVBQUFpQixNQUFBLEtBQUFqQixFQUFBOEIsR0FBOEQsR0FBQXVyRCxHQUFBcnRELElBQUFzdUMsR0FBQXR1QyxHQUFBLE9BQUFRLEVBQUFxQixFQUFBRCxJQUFBckIsSUFBQVIsSUFBQSxLQUFBQyxFQUFBOEIsRUFBQSxNQUF3RDByRCxHQUFBM3JELEVBQUE3QixHQUFRLFlBQVksU0FBQTB0RCxFQUFBNXJELEVBQUFvM0IsRUFBQWtFLEVBQUExZCxHQUFxQixRQUFBaWMsRUFBQSxLQUFBdHBCLEVBQUEsS0FBQXpSLEVBQUFzNEIsRUFBQXVDLEVBQUF2QyxFQUFBLEVBQUEvM0IsRUFBQSxLQUF1QyxPQUFBUCxHQUFBNjZCLEVBQUEyQixFQUFBbjVCLE9BQXFCdzNCLElBQUEsQ0FBSzc2QixFQUFBcUosTUFBQXd4QixHQUFBdDZCLEVBQUFQLElBQUEsTUFBQU8sRUFBQVAsRUFBQTh6QyxRQUFtQyxJQUFBLzBDLEVBQUE4OUIsRUFBQTM3QixFQUFBbEIsRUFBQXc4QixFQUFBM0IsR0FBQS9iLEdBQW9CLFVBQUEvZixFQUFBLENBQWEsT0FBQWlCLE1BQUFPLEdBQWdCLE1BQU1TLEdBQUFoQixHQUFBLE9BQUFqQixFQUFBNmxDLFdBQUEzakMsRUFBQUMsRUFDemRsQixHQUFHczRCLEVBQUFuM0IsRUFBQXBDLEVBQUF1NUIsRUFBQXVDLEdBQVcsT0FBQXBwQixFQUFBc3BCLEVBQUFoOEIsRUFBQTBTLEVBQUFxaUMsUUFBQS8wQyxFQUF5QjBTLEVBQUExUyxFQUFJaUIsRUFBQU8sRUFBSSxHQUFBczZCLElBQUEyQixFQUFBbjVCLE9BQUEsT0FBQWxFLEVBQUErQixFQUFBbEIsR0FBQSs2QixFQUFnQyxVQUFBLzZCLEVBQUEsQ0FBYSxLQUFLNjZCLEVBQUEyQixFQUFBbjVCLE9BQVd3M0IsS0FBQTc2QixFQUFBaTdCLEVBQUEvNUIsRUFBQXM3QixFQUFBM0IsR0FBQS9iLE1BQUF3WixFQUFBbjNCLEVBQUFuQixFQUFBczRCLEVBQUF1QyxHQUFBLE9BQUFwcEIsRUFBQXNwQixFQUFBLzZCLEVBQUF5UixFQUFBcWlDLFFBQUE5ekMsRUFBQXlSLEVBQUF6UixHQUE2RCxPQUFBKzZCLEVBQVMsSUFBQS82QixFQUFBWixFQUFBOEIsRUFBQWxCLEdBQWE2NkIsRUFBQTJCLEVBQUFuNUIsT0FBV3czQixLQUFBdDZCLEVBQUEyRyxFQUFBbEgsRUFBQWtCLEVBQUEyNUIsRUFBQTJCLEVBQUEzQixHQUFBL2IsTUFBQTlkLEdBQUEsT0FBQVQsRUFBQXFrQyxXQUFBNWtDLEVBQUF1K0MsT0FBQSxPQUFBaCtDLEVBQUFGLElBQUF3NkIsRUFBQXQ2QixFQUFBRixLQUFBaTRCLEVBQUFuM0IsRUFBQVosRUFBQSszQixFQUFBdUMsR0FBQSxPQUFBcHBCLEVBQUFzcEIsRUFBQXg2QixFQUFBa1IsRUFBQXFpQyxRQUFBdnpDLEVBQUFrUixFQUFBbFIsR0FBaUssT0FBekNTLEdBQUFoQixFQUFBdUgsUUFBQSxTQUFBdkcsR0FBeUIsT0FBQUMsRUFBQUMsRUFBQUYsS0FBZ0IrNUIsRUFBUyxTQUFBTyxFQUFBcDZCLEVBQUFvM0IsRUFBQWtFLEVBQUExZCxHQUFvQixJQUFBaWMsRUFBQTJTLEdBQUFsUixHQUFZLG1CQUFBekIsR0FBQUksRUFBQSxPQUFrRCxPQUFacUIsRUFBQXpCLEVBQUE5N0IsS0FBQXU5QixLQUFZckIsRUFBQSxPQUF3QixRQUFBbjdCLEVBQUErNkIsRUFBQSxLQUFBeDZCLEVBQUErM0IsRUFBQTdtQixFQUM5ZDZtQixFQUFBLEVBQUE1bUIsRUFBQSxLQUFBM1MsRUFBQXk5QixFQUFBanZCLE9BQXNCLE9BQUFoTixJQUFBeEIsRUFBQW8rQixLQUFrQjFyQixJQUFBMVMsRUFBQXk5QixFQUFBanZCLE9BQUEsQ0FBZ0JoTixFQUFBOEksTUFBQW9JLEdBQUFDLEVBQUFuUixJQUFBLE1BQUFtUixFQUFBblIsRUFBQXV6QyxRQUFtQyxJQUFBbDBDLEVBQUFpOUIsRUFBQTM3QixFQUFBWCxFQUFBeEIsRUFBQWdCLE1BQUErZSxHQUF1QixVQUFBbGYsRUFBQSxDQUFhVyxNQUFBbVIsR0FBUyxNQUFNMVEsR0FBQVQsR0FBQSxPQUFBWCxFQUFBZ2xDLFdBQUEzakMsRUFBQUMsRUFBQVgsR0FBaUMrM0IsRUFBQW4zQixFQUFBdkIsRUFBQTA0QixFQUFBN21CLEdBQVcsT0FBQXpSLEVBQUErNkIsRUFBQW43QixFQUFBSSxFQUFBOHpDLFFBQUFsMEMsRUFBeUJJLEVBQUFKLEVBQUlXLEVBQUFtUixFQUFJLEdBQUEzUyxFQUFBbytCLEtBQUEsT0FBQWgrQixFQUFBK0IsRUFBQVgsR0FBQXc2QixFQUEwQixVQUFBeDZCLEVBQUEsQ0FBYSxNQUFLeEIsRUFBQW8rQixLQUFRMXJCLElBQUExUyxFQUFBeTlCLEVBQUFqdkIsT0FBQSxRQUFBeE8sRUFBQWs4QixFQUFBLzVCLEVBQUFuQyxFQUFBZ0IsTUFBQStlLE1BQUF3WixFQUFBbjNCLEVBQUFwQyxFQUFBdTVCLEVBQUE3bUIsR0FBQSxPQUFBelIsRUFBQSs2QixFQUFBaDhCLEVBQUFpQixFQUFBOHpDLFFBQUEvMEMsRUFBQWlCLEVBQUFqQixHQUFvRixPQUFBZzhCLEVBQVMsSUFBQXg2QixFQUFBbkIsRUFBQThCLEVBQUFYLElBQWF4QixFQUFBbytCLEtBQVExckIsSUFBQTFTLEVBQUF5OUIsRUFBQWp2QixPQUFBLFFBQUF4TyxFQUFBbUksRUFBQTNHLEVBQUFXLEVBQUF1USxFQUFBMVMsRUFBQWdCLE1BQUErZSxNQUFBOWQsR0FBQSxPQUFBakMsRUFBQTZsQyxXQUFBcmtDLEVBQUFnK0MsT0FBQSxPQUFBeC9DLEVBQUFzQixJQUFBb1IsRUFBQTFTLEVBQUFzQixLQUFBaTRCLEVBQUFuM0IsRUFBQXBDLEVBQUF1NUIsRUFBQTdtQixHQUFBLE9BQ2pZelIsRUFBQSs2QixFQUFBaDhCLEVBQUFpQixFQUFBOHpDLFFBQUEvMEMsRUFBQWlCLEVBQUFqQixHQUFnRSxPQUF6Q2lDLEdBQUFULEVBQUFnSCxRQUFBLFNBQUF2RyxHQUF5QixPQUFBQyxFQUFBQyxFQUFBRixLQUFnQis1QixFQUFTLGdCQUFBLzVCLEVBQUE1QixFQUFBK0IsRUFBQXE3QixHQUF5QixJQUFBMWQsRUFBQSxpQkFBQTNkLEdBQUEsT0FBQUEsS0FBQTZGLE9BQUFpbUMsSUFBQSxPQUFBOXJDLEVBQUFkLElBQStEeWUsSUFBQTNkLElBQUEySixNQUFBd0IsVUFBd0IsSUFBQS9MLEVBQUEsaUJBQUFZLEdBQUEsT0FBQUEsRUFBb0MsR0FBQVosRUFBQSxPQUFBWSxFQUFBczdCLFVBQXdCLEtBQUFzUSxHQUFBL3JDLEVBQUEsQ0FBbUIsSUFBUlQsRUFBQVksRUFBQWQsSUFBUXllLEVBQUExZixFQUFRLE9BQUEwZixHQUFTLENBQUUsR0FBQUEsRUFBQXplLE1BQUFFLEVBQUEsU0FBQXVlLEVBQUF5a0IsSUFBQXBpQyxFQUFBNkYsT0FBQWltQyxHQUFBbnVCLEVBQUE5WCxPQUFBN0YsRUFBQTZGLEtBQUEsQ0FBd0Q3SCxFQUFBNkIsRUFBQThkLEVBQUFnMUIsVUFBZTEwQyxFQUFBOEIsRUFBQTRkLEVBQUEzZCxFQUFBNkYsT0FBQWltQyxHQUFBOXJDLEVBQUEySixNQUFBd0IsU0FBQW5MLEVBQUEySixNQUFBMHhCLElBQThDMXJCLElBQUE0N0MsR0FBQTFyRCxFQUFBOGQsRUFBQTNkLEdBQWdCL0IsRUFBQTZrQyxPQUFBampDLEVBQVdBLEVBQUE1QixFQUFJLE1BQUE0QixFQUFhN0IsRUFBQTZCLEVBQUE4ZCxHQUFPLE1BQU03ZCxFQUFBRCxFQUFBOGQsR0FBWUEsSUFBQWcxQixRQUFZM3lDLEVBQUE2RixPQUFBaW1DLEtBQUE3dEMsRUFBQStvRCxHQUFBaG5ELEVBQUEySixNQUFBd0IsU0FDamV0TCxFQUFBZixLQUFBdThCLEVBQUFyN0IsRUFBQWQsTUFBQTRqQyxPQUFBampDLElBQUE1QixLQUFBbzlCLEVBQUEwckIsR0FBQS9tRCxFQUFBSCxFQUFBZixLQUFBdThCLElBQUExckIsSUFBQTQ3QyxHQUFBMXJELEVBQUE1QixFQUFBK0IsR0FBQXE3QixFQUFBeUgsT0FBQWpqQyxJQUFBdzdCLEdBQWtGLE9BQUFsRSxFQUFBdDNCLEdBQVksS0FBQWdzQyxHQUFBaHNDLEVBQUEsQ0FBVyxJQUFBOGQsRUFBQTNkLEVBQUFkLElBQVksT0FBQWpCLEdBQVMsQ0FBRSxHQUFBQSxFQUFBaUIsTUFBQXllLEVBQUEsUUFBQTFmLEVBQUFta0MsS0FBQW5rQyxFQUFBdWpDLFVBQUE2VyxnQkFBQXI0QyxFQUFBcTRDLGVBQUFwNkMsRUFBQXVqQyxVQUFBNGxCLGlCQUFBcG5ELEVBQUFvbkQsZUFBQSxDQUF1SHBwRCxFQUFBNkIsRUFBQTVCLEVBQUEwMEMsVUFBZTEwQyxFQUFBOEIsRUFBQTlCLEVBQUErQixFQUFBbUwsYUFBQWt3QixJQUF3QnlILE9BQUFqakMsRUFBV0EsRUFBQTVCLEVBQUksTUFBQTRCLEVBQWE3QixFQUFBNkIsRUFBQTVCLEdBQU8sTUFBTTZCLEVBQUFELEVBQUE1QixHQUFZQSxJQUFBMDBDLFNBQVkxMEMsRUFBQWlwRCxHQUFBbG5ELEVBQUFILEVBQUFmLEtBQUF1OEIsSUFBaUJ5SCxPQUFBampDLEVBQVdBLEVBQUE1QixFQUFJLE9BQUFrNUIsRUFBQXQzQixHQUFZLG9CQUFBRyxHQUFBLGlCQUFBQSxFQUFBLE9BQUFBLEVBQUEsR0FBQUEsRUFBQSxPQUFBL0IsR0FBQSxJQUFBQSxFQUFBbWtDLEtBQUFwa0MsRUFBQTZCLEVBQUE1QixFQUFBMDBDLFVBQUExMEMsRUFBQThCLEVBQUE5QixFQUFBK0IsRUFBQXE3QixJQUFBeUgsT0FDM1lqakMsSUFBQTVCLElBQUFELEVBQUE2QixFQUFBNUIsTUFBQWdwRCxHQUFBam5ELEVBQUFILEVBQUFmLEtBQUF1OEIsSUFBQXlILE9BQUFqakMsSUFBQTVCLEdBQUFrNUIsRUFBQXQzQixHQUFxRCxHQUFBeXJELEdBQUF0ckQsR0FBQSxPQUFBMnJELEVBQUE5ckQsRUFBQTVCLEVBQUErQixFQUFBcTdCLEdBQTRCLEdBQUFrUixHQUFBdnNDLEdBQUEsT0FBQW02QixFQUFBdDZCLEVBQUE1QixFQUFBK0IsRUFBQXE3QixHQUFzQyxHQUFYajhCLEdBQUFxc0QsR0FBQTVyRCxFQUFBRyxRQUFXLElBQUFBLElBQUEyZCxFQUFBLE9BQUE5ZCxFQUFBdWlDLEtBQTRDLGNBQUFwSSxFQUFBLE9BQUFxQixFQUFBeDdCLEVBQUFnRyxNQUFBc0ksYUFBQWt0QixFQUFBbjlCLE1BQUEsYUFBbUUsT0FBQUYsRUFBQTZCLEVBQUE1QixJQUFlLElBQUEydEQsR0FBQUYsSUFBQSxHQUFBRyxHQUFBSCxJQUFBLEdBQUFJLEdBQUEsS0FBQUMsR0FBQSxLQUFBQyxJQUFBLEVBQThDLFNBQUFDLEdBQUFwc0QsRUFBQUMsR0FBaUIsSUFBQTlCLEVBQUEsSUFBQXNvRCxHQUFBLGVBQTRCdG9ELEVBQUE2SCxLQUFBLFVBQWlCN0gsRUFBQXdqQyxVQUFBMWhDLEVBQWM5QixFQUFBOGtDLE9BQUFqakMsRUFBVzdCLEVBQUF3MEMsVUFBQSxFQUFjLE9BQUEzeUMsRUFBQTZtRCxZQUFBN21ELEVBQUE2bUQsV0FBQUUsV0FBQTVvRCxFQUFBNkIsRUFBQTZtRCxXQUFBMW9ELEdBQUE2QixFQUFBOG1ELFlBQUE5bUQsRUFBQTZtRCxXQUFBMW9ELEVBQ3hZLFNBQUFrdUQsR0FBQXJzRCxFQUFBQyxHQUFpQixPQUFBRCxFQUFBdWlDLEtBQWMsV0FBQXBrQyxFQUFBNkIsRUFBQWdHLEtBQXdGLGVBQXBFL0YsRUFBQSxJQUFBQSxFQUFBZ3JDLFVBQUE5c0MsRUFBQWdtQyxnQkFBQWxrQyxFQUFBNHFDLFNBQUExRyxjQUFBLEtBQUFsa0MsS0FBb0VELEVBQUEyaEMsVUFBQTFoQyxHQUFBLEdBQXNDLHNCQUFBQSxFQUFBLEtBQUFELEVBQUE0c0MsY0FBQSxJQUFBM3NDLEVBQUFnckMsU0FBQSxLQUFBaHJDLEtBQUFELEVBQUEyaEMsVUFBQTFoQyxHQUFBLEdBQTBGLGtCQUFrQixTQUFBcXNELEdBQUF0c0QsR0FBZSxHQUFBbXNELEdBQUEsQ0FBTyxJQUFBbHNELEVBQUFpc0QsR0FBUyxHQUFBanNELEVBQUEsQ0FBTSxJQUFBOUIsRUFBQThCLEVBQVEsSUFBQW9zRCxHQUFBcnNELEVBQUFDLEdBQUEsQ0FBcUIsS0FBUkEsRUFBQW9sRCxHQUFBbG5ELE1BQVFrdUQsR0FBQXJzRCxFQUFBQyxHQUEyQyxPQUExQkQsRUFBQTJ5QyxXQUFBLEVBQWV3WixJQUFBLE9BQU1GLEdBQUFqc0QsR0FBWW9zRCxHQUFBSCxHQUFBOXRELEdBQVM4dEQsR0FBQWpzRCxFQUFLa3NELEdBQUE1RyxHQUFBcmxELFFBQVNELEVBQUEyeUMsV0FBQSxFQUFBd1osSUFBQSxFQUFBRixHQUFBanNELEdBQ3BaLFNBQUF1c0QsR0FBQXZzRCxHQUFlLElBQUFBLElBQUFpakMsT0FBZSxPQUFBampDLEdBQUEsSUFBQUEsRUFBQXVpQyxLQUFBLElBQUF2aUMsRUFBQXVpQyxLQUErQnZpQyxJQUFBaWpDLE9BQVlncEIsR0FBQWpzRCxFQUFLLFNBQUF3c0QsR0FBQXhzRCxHQUFlLEdBQUFBLElBQUFpc0QsR0FBQSxTQUFtQixJQUFBRSxHQUFBLE9BQUFJLEdBQUF2c0QsR0FBQW1zRCxJQUFBLEtBQTZCLElBQUFsc0QsRUFBQUQsRUFBQWdHLEtBQWEsT0FBQWhHLEVBQUF1aUMsS0FBQSxTQUFBdGlDLEdBQUEsU0FBQUEsSUFBQWdsRCxHQUFBaGxELEVBQUFELEVBQUE0bUQsZUFBQSxJQUFBM21ELEVBQUFpc0QsR0FBc0Vqc0QsR0FBRW1zRCxHQUFBcHNELEVBQUFDLEtBQUFvbEQsR0FBQXBsRCxHQUFrRCxPQUFqQ3NzRCxHQUFBdnNELEdBQU1rc0QsR0FBQUQsR0FBQTVHLEdBQUFybEQsRUFBQTJoQyxXQUFBLE1BQTJCLEVBQVMsU0FBQThxQixLQUFjUCxHQUFBRCxHQUFBLEtBQVdFLElBQUEsRUFBTSxTQUFBcndCLEdBQUE5N0IsRUFBQUMsRUFBQTlCLEdBQWtCdXVELEdBQUExc0QsRUFBQUMsRUFBQTlCLEVBQUE4QixFQUFBK21ELGdCQUEyQixTQUFBMEYsR0FBQTFzRCxFQUFBQyxFQUFBOUIsRUFBQUMsR0FBcUI2QixFQUFBMHhCLE1BQUEsT0FBQTN4QixFQUFBZ3NELEdBQUEvckQsRUFBQSxLQUFBOUIsRUFBQUMsR0FBQTJ0RCxHQUFBOXJELEVBQUFELEVBQUEyeEIsTUFBQXh6QixFQUFBQyxHQUM5WCxTQUFBdXVELEdBQUEzc0QsRUFBQUMsR0FBaUIsSUFBQTlCLEVBQUE4QixFQUFBNlAsS0FBWSxPQUFBOVAsR0FBQSxPQUFBN0IsR0FBQSxPQUFBNkIsS0FBQThQLE1BQUEzUixLQUFBOEIsRUFBQTB5QyxXQUFBLEtBQTRELFNBQUFpYSxHQUFBNXNELEVBQUFDLEVBQUE5QixFQUFBQyxFQUFBOEIsR0FBdUJ5c0QsR0FBQTNzRCxFQUFBQyxHQUFRLElBQUFFLEVBQUEsT0FBQUYsRUFBQTB5QyxXQUEyQixJQUFBeDBDLElBQUFnQyxFQUFBLE9BQUEvQixHQUFBb29ELEdBQUF2bUQsR0FBQSxHQUFBKzdCLEdBQUFoOEIsRUFBQUMsR0FBb0M5QixFQUFBOEIsRUFBQTBoQyxVQUFja0ssR0FBQXYvQixRQUFBck0sRUFBYSxJQUFBcTNCLEVBQUFuM0IsRUFBQSxLQUFBaEMsRUFBQWdOLFNBQWdKLE9BQXhIbEwsRUFBQTB5QyxXQUFBLEVBQWV4eUMsSUFBQXVzRCxHQUFBMXNELEVBQUFDLEVBQUEsS0FBQUMsR0FBQUQsRUFBQTB4QixNQUFBLE1BQWlDKzZCLEdBQUExc0QsRUFBQUMsRUFBQXEzQixFQUFBcDNCLEdBQVlELEVBQUF5bUQsY0FBQXZvRCxFQUFBd1EsTUFBd0IxTyxFQUFBMm1ELGNBQUF6b0QsRUFBQTJMLE1BQXdCMUwsR0FBQW9vRCxHQUFBdm1ELEdBQUEsR0FBWUEsRUFBQTB4QixNQUNsVyxTQUFBazdCLEdBQUE3c0QsR0FBZSxJQUFBQyxFQUFBRCxFQUFBMmhDLFVBQWtCMWhDLEVBQUErbkQsZUFBQTVCLEdBQUFwbUQsRUFBQUMsRUFBQStuRCxlQUFBL25ELEVBQUErbkQsaUJBQUEvbkQsRUFBQThKLFNBQUE5SixFQUFBOEosU0FBQXE4QyxHQUFBcG1ELEVBQUFDLEVBQUE4SixTQUFBLEdBQW1HMGdELEdBQUF6cUQsRUFBQUMsRUFBQXU0QyxlQUNwSSxTQUFBc1UsR0FBQTlzRCxFQUFBQyxFQUFBOUIsRUFBQUMsR0FBcUIsSUFBQThCLEVBQUFGLEVBQUEyeEIsTUFBcUMsSUFBdkIsT0FBQXp4QixNQUFBK2lDLE9BQUFqakMsR0FBNEIsT0FBQUUsR0FBUyxDQUFFLE9BQUFBLEVBQUFxaUMsS0FBYyxZQUFBcGlDLEVBQUEsRUFBQUQsRUFBQXloQyxVQUE0QixHQUFBemhDLEVBQUE4RixPQUFBL0YsR0FBQSxJQUFBRSxFQUFBaEMsR0FBQSxDQUEwQixJQUFBZ0MsRUFBQUQsRUFBUSxPQUFBQyxHQUFTLENBQUUsSUFBQW0zQixFQUFBbjNCLEVBQUF5akMsVUFBa0IsT0FBQXpqQyxFQUFBNm1ELGdCQUFBN21ELEVBQUE2bUQsZUFBQTVvRCxFQUFBK0IsRUFBQTZtRCxlQUFBNW9ELEVBQUEsT0FBQWs1QixJQUFBLElBQUFBLEVBQUEwdkIsZ0JBQUExdkIsRUFBQTB2QixlQUFBNW9ELEtBQUFrNUIsRUFBQTB2QixlQUFBNW9ELE9BQTBJLFdBQUFrNUIsS0FBQSxJQUFBQSxFQUFBMHZCLGdCQUFBMXZCLEVBQUEwdkIsZUFBQTVvRCxHQUFnRixNQUFoRms1QixFQUFBMHZCLGVBQUE1b0QsRUFBMkYrQixJQUFBOGlDLE9BQVc5aUMsRUFBQSxVQUFPQSxFQUFBRCxFQUFBeXhCLE1BQWUsTUFBTSxRQUFBeHhCLEVBQUFELEVBQUE4RixPQUFBaEcsRUFBQWdHLEtBQUEsS0FBQTlGLEVBQUF5eEIsTUFBdUMsTUFBTSxRQUFBeHhCLEVBQzVlRCxFQUFBeXhCLE1BQVEsVUFBQXh4QixJQUFBOGlDLE9BQUEvaUMsT0FBdUIsSUFBQUMsRUFBQUQsRUFBYSxPQUFBQyxHQUFTLENBQUUsR0FBQUEsSUFBQUgsRUFBQSxDQUFVRyxFQUFBLEtBQU8sTUFBa0IsV0FBWkQsRUFBQUMsRUFBQTJ5QyxTQUFZLENBQWE1eUMsRUFBQStpQyxPQUFBOWlDLEVBQUE4aUMsT0FBa0I5aUMsRUFBQUQsRUFBSSxNQUFNQyxJQUFBOGlDLE9BQVcvaUMsRUFBQUMsR0FFa0IsU0FBQTY3QixHQUFBaDhCLEVBQUFDLEdBQTRELEdBQTVDLE9BQUFELEdBQUFDLEVBQUEweEIsUUFBQTN4QixFQUFBMnhCLE9BQUF3SSxFQUFBLE9BQTRDLE9BQUFsNkIsRUFBQTB4QixNQUFBLENBQTZCLElBQUF4ekIsRUFBQThvRCxHQUFWam5ELEVBQUFDLEVBQUEweEIsTUFBVTN4QixFQUFBNHNDLGFBQUE1c0MsRUFBQWduRCxnQkFBc0QsSUFBVi9tRCxFQUFBMHhCLE1BQUF4ekIsRUFBVUEsRUFBQThrQyxPQUFBaGpDLEVBQWUsT0FBQUQsRUFBQTh5QyxTQUFpQjl5QyxJQUFBOHlDLFNBQUEzMEMsSUFBQTIwQyxRQUFBbVUsR0FBQWpuRCxJQUFBNHNDLGFBQUE1c0MsRUFBQWduRCxpQkFBQS9qQixPQUFBaGpDLEVBQTBFOUIsRUFBQTIwQyxRQUFBLEtBQWUsT0FBQTd5QyxFQUFBMHhCLE1BQ3hhLFNBQUFvN0IsR0FBQS9zRCxFQUFBQyxFQUFBOUIsR0FBbUIsT0FBQThCLEVBQUErbUQsZ0JBQUEvbUQsRUFBQSttRCxlQUFBN29ELEVBQUEsQ0FBNkMsT0FBQThCLEVBQUFzaUMsS0FBYyxPQUFBc3FCLEdBQUE1c0QsR0FBYSxNQUFNLE9BQUFxbUQsR0FBQXJtRCxHQUFhLE1BQU0sT0FBQXdxRCxHQUFBeHFELElBQUEwaEMsVUFBQTZXLGVBQXVDLE1BQU0sUUFBQTBSLEdBQUFqcUQsR0FBYyxZQUFZLE9BQUFBLEVBQUFzaUMsS0FBYyxjQUFBdmlDLEdBQUFtNkIsRUFBQSxPQUFnQyxJQUFBLzdCLEVBQUE2QixFQUFBK0YsS0FBQTlGLEVBQUFELEVBQUEyc0MsYUFBQXpzQyxFQUFBMGxELEdBQUE1bEQsR0FDakYsT0FEaUk3QixJQUFBOEIsRUFBVkMsRUFBQTRsRCxHQUFBOWxELEVBQUFFLElBQW1CRixFQUFBMHlDLFdBQUEsRUFBZSxpQkFBQXYwQyxHQUFBLE9BQUFBLEdBQUEsbUJBQUFBLEVBQUErTSxhQUFBLElBQUEvTSxFQUFBcTlCLFVBQUF0N0IsRUFBQUYsRUFBQStGLEtBQUEvRixFQUFBc2lDLElBQUEsRUFBQXRpQyxFQUFBeW1ELGNBQUEsT0FBQXRvRCxFQUFBdVEsWUFBQSxJQUFBdlEsRUFBQXVRLE1BQUF2USxFQUFBdVEsTUFBQSx3QkFBQXhPLElBQUF1YSwyQkFDalRtd0MsR0FBQTVxRCxFQUFBRSxFQUFBRCxLQUFBb21ELEdBQUFybUQsR0FBQTdCLEVBQUF3OEIsUUFBQWt3QixHQUFBN3FELEVBQUEwaEMsVUFBQXZqQyxJQUFBMnNELG9CQUFBOXFELEVBQUFxckQsR0FBQXJyRCxFQUFBOUIsR0FBQTZCLEVBQUE0c0QsR0FBQTVzRCxFQUFBQyxHQUFBLEVBQUFDLEVBQUEvQixLQUFBOEIsRUFBQXNpQyxJQUFBLEVBQUF6RyxHQUFBOTdCLEVBQUFDLEVBQUE3QixHQUFBNkIsRUFBQTJtRCxjQUFBMW1ELEVBQUFGLEVBQUFDLEVBQUEweEIsT0FBd0ozeEIsRUFBUyxjQUFBRSxFQUFBRCxFQUFBK0YsS0FBQTdILEVBQUE4QixFQUFBMnNDLGFBQUFoUixHQUFBdHZCLFNBQUFyTSxFQUFBMm1ELGdCQUFBem9ELEdBQUErQixJQUFBL0IsRUFBQUMsRUFBQTJuRCxHQUFBOWxELEVBQUE3QixFQUFBeW5ELEdBQUE1bEQsT0FBQTB5QyxXQUFBLEVBQUE3VyxHQUFBOTdCLEVBQUFDLEVBQUFDLEdBQUFELEVBQUEybUQsY0FBQXpvRCxFQUFBNkIsRUFBQUMsRUFBQTB4QixPQUFBM3hCLEVBQUFnOEIsR0FBQWg4QixFQUFBQyxHQUFBRCxFQUFtSyxPQUFlLEdBQWZFLEVBQUFvbUQsR0FBQXJtRCxHQUFlLE9BQUFELEVBQUEsVUFBQUMsRUFBQTBoQyxVQUFBLENBQW1DLElBQUFySyxFQUFBcjNCLEVBQUEyc0MsYUFBQXBSLEVBQUF2N0IsRUFBQStGLEtBQThCNUgsRUFBQXluRCxHQUFBNWxELEdBQVEsSUFBQTZkLEVBQUEsSUFBQTdkLEVBQUFzaUMsS0FBQSxNQUFBdGlDLEVBQUErRixLQUFBa0ksYUFBMERvcEIsRUFBQSxJQUFBa0UsRUFBQWxFLEVBQWZuM0IsRUFBQTJkLEVBQUFpb0MsR0FBQTlsRCxFQUFBN0IsR0FBQXFnQyxHQUE0QngrQixFQUFBeW1ELGNBQUEsT0FDbmVwdkIsRUFBQTNvQixZQUFBLElBQUEyb0IsRUFBQTNvQixNQUFBMm9CLEVBQUEzb0IsTUFBQSxLQUF1QzJvQixFQUFBc0QsUUFBQWt3QixHQUFhN3FELEVBQUEwaEMsVUFBQXJLLEVBQWNBLEVBQUF5ekIsb0JBQUE5cUQsRUFBd0I2ZCxPQUFBN2QsRUFBQTBoQyxXQUFBcWtCLDRDQUFBNW5ELEVBQUEwZixFQUFBbW9DLDBDQUFBOWxELEdBQWlIbXJELEdBQUFyckQsRUFBQTlCLEdBQVFDLEdBQUEsTUFBSyxDQUFLbzlCLEVBQUF2N0IsRUFBQStGLEtBQVM1SCxFQUFBNkIsRUFBQTBoQyxVQUFjN2pCLEVBQUE3ZCxFQUFBMm1ELGNBQWtCem1ELEVBQUFGLEVBQUEyc0MsYUFBaUJ4dUMsRUFBQTBMLE1BQUFnVSxFQUFVLElBQUF2ZSxFQUFBbkIsRUFBQTJMLFFBQXdCdXRCLEVBQUF5dUIsR0FBQTlsRCxFQUFScTNCLEVBQUF1dUIsR0FBQTVsRCxJQUFrQixJQUFBckIsRUFBQTQ4QixFQUFBOWdCLDBCQUFpQzhnQixFQUFBLG1CQUFBNThCLEdBQUEsbUJBQUFSLEVBQUFtdEQsMEJBQUEsbUJBQUFudEQsRUFBQWl0RCxrQ0FBQSxtQkFBQWp0RCxFQUFBcVIsNEJBQ3BXcU8sSUFBQTNkLEdBQUFaLElBQUErM0IsSUFBQTh6QixHQUFBbnJELEVBQUE3QixFQUFBK0IsRUFBQW0zQixHQUE0Qm94QixJQUFBLEVBQU0sSUFBQXp1QixFQUFBaDZCLEVBQUF5bUQsY0FBc0JubkQsRUFBQW5CLEVBQUF1USxNQUFBc3JCLEVBQVksSUFBQTRCLEVBQUE1N0IsRUFBQTBtRCxZQUFvQixPQUFBOXFCLElBQUE2dEIsR0FBQXpwRCxFQUFBNDdCLEVBQUExN0IsRUFBQS9CLEVBQUFELEdBQUFvQixFQUFBVSxFQUFBeW1ELGVBQTRDNW9DLElBQUEzZCxHQUFBODVCLElBQUExNkIsR0FBQXE4QixHQUFBdHZCLFNBQUFvOEMsSUFBQSxtQkFBQTlwRCxJQUFBaXNELEdBQUE1cUQsRUFBQXJCLEVBQUF1QixHQUFBWixFQUFBVSxFQUFBeW1ELGdCQUFBNW9DLEVBQUE0cUMsSUFBQXlDLEdBQUFsckQsRUFBQTZkLEVBQUEzZCxFQUFBODVCLEVBQUExNkIsRUFBQSszQixLQUFBa0UsR0FBQSxtQkFBQXA5QixFQUFBb3RELDJCQUFBLG1CQUFBcHRELEVBQUFxcUIscUJBQUEsbUJBQUFycUIsRUFBQXFxQixvQkFBQXJxQixFQUFBcXFCLHFCQUFBLG1CQUFBcnFCLEVBQUFvdEQsMkJBQUFwdEQsRUFBQW90RCw2QkFBQSxtQkFBQXB0RCxFQUFBZ1Isb0JBQ3BJblAsRUFBQTB5QyxXQUFBLHdCQUFBdjBDLEVBQUFnUixvQkFBQW5QLEVBQUEweUMsV0FBQSxHQUFBMXlDLEVBQUEybUQsY0FBQXptRCxFQUFBRixFQUFBeW1ELGNBQUFubkQsR0FBQW5CLEVBQUEwTCxNQUFBM0osRUFBQS9CLEVBQUF1USxNQUFBcFAsRUFBQW5CLEVBQUEyTCxRQUFBdXRCLEVBQUFsNUIsRUFBQTBmLElBQUEsbUJBQUExZixFQUFBZ1Isb0JBQUFuUCxFQUFBMHlDLFdBQUEsR0FBQXYwQyxHQUFBLFFBQXdObzlCLEVBQUF2N0IsRUFBQStGLEtBQUE1SCxFQUFBNkIsRUFBQTBoQyxVQUFBeGhDLEVBQUFGLEVBQUEybUQsY0FBQTlvQyxFQUFBN2QsRUFBQTJzQyxhQUFBeHVDLEVBQUEwTCxNQUFBM0osRUFBQVosRUFBQW5CLEVBQUEyTCxRQUFBdXRCLEVBQUF5dUIsR0FBQTlsRCxFQUFBcTNCLEVBQUF1dUIsR0FBQTVsRCxLQUFBdTdCLEVBQUEsbUJBQUE1OEIsRUFBQTQ4QixFQUFBOWdCLDJCQUFBLG1CQUFBdGMsRUFBQW10RCwwQkFBQSxtQkFBQW50RCxFQUFBaXRELGtDQUFBLG1CQUFBanRELEVBQUFxUiw0QkFDeE50UCxJQUFBMmQsR0FBQXZlLElBQUErM0IsSUFBQTh6QixHQUFBbnJELEVBQUE3QixFQUFBMGYsRUFBQXdaLEdBQUFveEIsSUFBQSxFQUFBbnBELEVBQUFVLEVBQUF5bUQsY0FBQXpzQixFQUFBNzdCLEVBQUF1USxNQUFBcFAsRUFBQSxRQUFBczhCLEVBQUE1N0IsRUFBQTBtRCxlQUFBK0MsR0FBQXpwRCxFQUFBNDdCLEVBQUEvZCxFQUFBMWYsRUFBQUQsR0FBQTg3QixFQUFBaDZCLEVBQUF5bUQsZUFBQXZtRCxJQUFBMmQsR0FBQXZlLElBQUEwNkIsR0FBQTJCLEdBQUF0dkIsU0FBQW84QyxJQUFBLG1CQUFBOXBELElBQUFpc0QsR0FBQTVxRCxFQUFBckIsRUFBQWtmLEdBQUFtYyxFQUFBaDZCLEVBQUF5bUQsZ0JBQUE5bkQsRUFBQThwRCxJQUFBeUMsR0FBQWxyRCxFQUFBRSxFQUFBMmQsRUFBQXZlLEVBQUEwNkIsRUFBQTNDLEtBQUFrRSxHQUFBLG1CQUFBcDlCLEVBQUE0dUQsNEJBQUEsbUJBQUE1dUQsRUFBQTZ1RCxzQkFBQSxtQkFBQTd1RCxFQUFBNnVELHFCQUFBN3VELEVBQUE2dUQsb0JBQUFudkMsRUFBQW1jLEVBQUEzQyxHQUFBLG1CQUFBbDVCLEVBQUE0dUQsNEJBQUE1dUQsRUFBQTR1RCwyQkFBQWx2QyxFQUFBbWMsRUFBQTNDLElBQUEsbUJBQUFsNUIsRUFBQTZSLHFCQUNBaFEsRUFBQTB5QyxXQUFBLHNCQUFBdjBDLEVBQUFtdEQsMEJBQUF0ckQsRUFBQTB5QyxXQUFBLDBCQUFBdjBDLEVBQUE2UixvQkFBQTlQLElBQUFILEVBQUE0bUQsZUFBQXJuRCxJQUFBUyxFQUFBMG1ELGdCQUFBem1ELEVBQUEweUMsV0FBQSxzQkFBQXYwQyxFQUFBbXRELHlCQUFBcHJELElBQUFILEVBQUE0bUQsZUFBQXJuRCxJQUFBUyxFQUFBMG1ELGdCQUFBem1ELEVBQUEweUMsV0FBQSxLQUFBMXlDLEVBQUEybUQsY0FBQTlvQyxFQUFBN2QsRUFBQXltRCxjQUFBenNCLEdBQUE3N0IsRUFBQTBMLE1BQUFnVSxFQUFBMWYsRUFBQXVRLE1BQUFzckIsRUFBQTc3QixFQUFBMkwsUUFBQXV0QixFQUFBbDVCLEVBQUFRLElBQUEsbUJBQUFSLEVBQUE2UixvQkFBQTlQLElBQUFILEVBQUE0bUQsZUFBQXJuRCxJQUFBUyxFQUFBMG1ELGdCQUFBem1ELEVBQUEweUMsV0FBQSxzQkFBQXYwQyxFQUFBbXRELHlCQUNBcHJELElBQUFILEVBQUE0bUQsZUFBQXJuRCxJQUFBUyxFQUFBMG1ELGdCQUFBem1ELEVBQUEweUMsV0FBQSxLQUFBdjBDLEdBQUEsR0FBbUUsT0FBQXd1RCxHQUFBNXNELEVBQUFDLEVBQUE3QixFQUFBOEIsRUFBQS9CLEdBQXFCLE9BQXVXLE9BQXZXMHVELEdBQUE1c0QsR0FBNkIsUUFBaEJDLEVBQUFELEVBQUEwbUQsY0FBZ0J2b0QsRUFBQSxRQUFBQSxFQUFBNkIsRUFBQXltRCxlQUFBdG9ELEVBQUFvTixRQUFBLEtBQUFrK0MsR0FBQXpwRCxFQUFBQyxFQUFBRCxFQUFBMnNDLGFBQUEsS0FBQXp1QyxJQUFBK0IsRUFBQUQsRUFBQXltRCxjQUFBbDdDLFdBQUFwTixHQUFBcXVELEtBQUF6c0QsRUFBQWc4QixHQUFBaDhCLEVBQUFDLEtBQTRJN0IsRUFBQTZCLEVBQUEwaEMsV0FBY3ZqQyxHQUFBLE9BQUE0QixHQUFBLE9BQUFBLEVBQUEyeEIsUUFBQXZ6QixFQUFBNnBELFdBQUFpRSxHQUFBNUcsR0FBQXJsRCxFQUFBMGhDLFVBQUE2VyxlQUFBeVQsR0FBQWhzRCxFQUFBN0IsRUFBQSt0RCxJQUFBLEdBQXlGL3RELEdBQUE2QixFQUFBMHlDLFdBQUEsRUFBQTF5QyxFQUFBMHhCLE1BQUFxNkIsR0FBQS9yRCxFQUFBLEtBQUFDLEVBQUEvQixLQUFBc3VELEtBQUEzd0IsR0FBQTk3QixFQUFBQyxFQUFBQyxJQUEwREYsRUFBQUMsRUFBQTB4QixTQUFVODZCLEtBQUF6c0QsRUFBQWc4QixHQUFBaDhCLEVBQUFDLElBQW1CRCxFQUFTLE9BQ2YsT0FEeUJ3cUQsR0FBQUQsR0FBQWorQyxVQUFlcE0sRUFBQXNxRCxHQUFBSCxHQUFBLzlDLGFBQWlCbE8sRUFBQXNnRCxHQUFBeCtDLEVBQ2xmRCxFQUFBK0YsU0FBUTIxQixHQUFBMnVCLEdBQUFycUQsR0FBQTA3QixHQUFBMHVCLEdBQUFqc0QsSUFBNkIsT0FBQTRCLEdBQUFzc0QsR0FBQXJzRCxHQUFnQkMsRUFBQUQsRUFBQStGLEtBQVM4WCxFQUFBN2QsRUFBQTJtRCxjQUFrQnhvRCxFQUFBNkIsRUFBQTJzQyxhQUFpQnpzQyxFQUFBLE9BQUFILElBQUE0bUQsY0FBQSxLQUFnQ2hyQixHQUFBdHZCLFNBQUF3UixJQUFBMWYsS0FBc0IwZixFQUFBLEVBQUE3ZCxFQUFBaEIsUUFBQWIsRUFBQTh1RCxVQUFBanRELEVBQUErbUQsZUFBQSxZQUFzRGxwQyxHQUFBLGFBQUEzZixJQUF5QzJmLEVBQUExZixFQUFBa04sU0FBYTI1QyxHQUFBL2tELEVBQUE5QixHQUFBMGYsRUFBQSxLQUFBM2QsR0FBQThrRCxHQUFBL2tELEVBQUFDLEtBQUFGLEVBQUEweUMsV0FBQSxJQUE2Q2dhLEdBQUEzc0QsRUFBQUMsR0FBUSxhQUFBOUIsR0FBQSxFQUFBOEIsRUFBQWhCLE1BQUFiLEVBQUE4dUQsUUFBQWp0RCxFQUFBK21ELGVBQUEsV0FBQS9tRCxFQUFBMm1ELGNBQUF4b0QsRUFBQTRCLEVBQUEsT0FBQTg3QixHQUFBOTdCLEVBQUFDLEVBQUE2ZCxHQUFBN2QsRUFBQTJtRCxjQUFBeG9ELEVBQUE0QixFQUFBQyxFQUFBMHhCLFFBQXBGM3hCLEVBQUFnOEIsR0FBQWg4QixFQUFBQyxHQUFxTkQsRUFBUyxxQkFBQUEsR0FBQXNzRCxHQUFBcnNELEtBQUEybUQsY0FBQTNtRCxFQUFBMnNDLGFBQ2xjLEtBQUssb0JBQW9CLGNBQUE2ZCxHQUFBeHFELElBQUEwaEMsVUFBQTZXLGVBQUF0NEMsRUFBQUQsRUFBQTJzQyxhQUFBaFIsR0FBQXR2QixTQUFBck0sRUFBQTJtRCxnQkFBQTFtRCxHQUFBLE9BQUFGLEVBQUFDLEVBQUEweEIsTUFBQW82QixHQUFBOXJELEVBQUEsS0FBQUMsRUFBQS9CLEdBQUEyOUIsR0FBQTk3QixFQUFBQyxFQUFBQyxHQUFBRCxFQUFBMm1ELGNBQUExbUQsRUFBQUYsRUFBQUMsRUFBQTB4QixPQUFBM3hCLEVBQUFnOEIsR0FBQWg4QixFQUFBQyxHQUFBRCxFQUFnTCxlQUFBRSxFQUFBRCxFQUFBK0YsS0FBQW1GLE9BQUFoTixFQUFBOEIsRUFBQTJzQyxhQUFBeHVDLEVBQUE2QixFQUFBNlAsSUFBQThyQixHQUFBdHZCLFNBQUFyTSxFQUFBMm1ELGdCQUFBem9ELEdBQUFDLEtBQUEsT0FBQTRCLElBQUE4UCxJQUFBLE9BQUFnc0IsR0FBQTk3QixFQUFBQyxFQUFBQyxJQUFBL0IsRUFBQUMsSUFBQTZCLEVBQUEybUQsY0FBQXpvRCxFQUFBNkIsRUFBQUMsRUFBQTB4QixPQUFBM3hCLEVBQUFnOEIsR0FBQWg4QixFQUFBQyxHQUFBRCxFQUE2SyxlQUFBN0IsRUFBQThCLEVBQUEyc0MsYUFBQWhSLEdBQUF0dkIsU0FBQXJNLEVBQUEybUQsZ0JBQUF6b0QsR0FBQTI5QixHQUFBOTdCLEVBQUFDLEVBQUE5QixHQUFBOEIsRUFBQTJtRCxjQUFBem9ELEVBQUE2QixFQUFBQyxFQUFBMHhCLE9BQUEzeEIsRUFBQWc4QixHQUFBaDhCLEVBQUFDLEdBQUFELEVBQWlILGVBQUE3QixFQUN2ZThCLEVBQUEyc0MsYUFBQXRoQyxTQUFBc3dCLEdBQUF0dkIsU0FBQSxPQUFBbk8sR0FBQThCLEVBQUEybUQsZ0JBQUF6b0QsR0FBQTI5QixHQUFBOTdCLEVBQUFDLEVBQUE5QixHQUFBOEIsRUFBQTJtRCxjQUFBem9ELEVBQUE2QixFQUFBQyxFQUFBMHhCLE9BQUEzeEIsRUFBQWc4QixHQUFBaDhCLEVBQUFDLEdBQUFELEVBQW1ILGVBQUE3QixFQUFBOEIsRUFBQTJzQyxhQUFBM3NDLEVBQUEybUQsZ0JBQUF6b0QsRUFBQTZCLEVBQUFnOEIsR0FBQWg4QixFQUFBQyxJQUFBNjdCLEdBQUE5N0IsRUFBQUMsRUFBQTlCLEVBQUFtTixVQUFBckwsRUFBQTJtRCxjQUFBem9ELEVBQUE2QixFQUFBQyxFQUFBMHhCLE9BQUEzeEIsRUFBK0csZUFabE8sU0FBQUEsRUFBQUMsRUFBQTlCLEdBQW1CLElBQUFDLEVBQUE2QixFQUFBK0YsS0FBQXMzQixTQUFBcDlCLEVBQUFELEVBQUEyc0MsYUFBQXpzQyxFQUFBRixFQUFBMm1ELGNBQUF0dkIsR0FBQSxFQUE4RCxHQUFBc0UsR0FBQXR2QixRQUFBZ3JCLEdBQUEsT0FBa0IsR0FBQW4zQixJQUFBRCxFQUFBLE9BQUFELEVBQUEwaEMsVUFBQSxFQUFBdW9CLEdBQUFqcUQsR0FBQSs3QixHQUFBaDhCLEVBQUFDLEdBQWdELElBQUF1N0IsRUFBQXQ3QixFQUFBbkIsTUFBZ0MsR0FBbEJrQixFQUFBMm1ELGNBQUExbUQsRUFBa0IsT0FBQUMsRUFBQXE3QixFQUFBLGdCQUF5QixHQUFBcjdCLEVBQUFwQixRQUFBbUIsRUFBQW5CLE1BQUEsQ0FBMkIsR0FBQW9CLEVBQUFtTCxXQUFBcEwsRUFBQW9MLFVBQUFnc0IsRUFBQSxPQUFBcjNCLEVBQUEwaEMsVUFBQSxFQUFBdW9CLEdBQUFqcUQsR0FBQSs3QixHQUFBaDhCLEVBQUFDLEdBQWdFdTdCLEVBQUEsTUFBSSxDQUFLLElBQUExZCxFQUFBM2QsRUFBQXBCLE1BQWMsR0FBQStlLElBQUEwZCxJQUFBLElBQUExZCxHQUFBLEVBQUFBLEdBQUEsRUFBQTBkLElBQUExZCxNQUFBMGQsS0FBQSxDQUE0QyxHQUFBcjdCLEVBQUFtTCxXQUFBcEwsRUFBQW9MLFVBQUFnc0IsRUFBQSxPQUFBcjNCLEVBQUEwaEMsVUFBQSxFQUFBdW9CLEdBQUFqcUQsR0FBQSs3QixHQUFBaDhCLEVBQUFDLEdBQWdFdTdCLEVBQUEsT0FBSSxHQUFBQSxFQUFBLG1CQUFBcDlCLEVBQUEyK0Isc0JBQUEzK0IsRUFBQTIrQixzQkFBQWpmLEVBQzlhMGQsR0FBQSxlQUFBQSxHQUFBLElBQTBCLEdBQUFyN0IsRUFBQW1MLFdBQUFwTCxFQUFBb0wsVUFBQWdzQixFQUFBLE9BQUFyM0IsRUFBQTBoQyxVQUFBLEVBQUF1b0IsR0FBQWpxRCxHQUFBKzdCLEdBQUFoOEIsRUFBQUMsUUFBZ0U2c0QsR0FBQTdzRCxFQUFBN0IsRUFBQW85QixFQUFBcjlCLEdBQXVELE9BQXRDOEIsRUFBQTBoQyxVQUFBbkcsRUFBYzB1QixHQUFBanFELEdBQU02N0IsR0FBQTk3QixFQUFBQyxFQUFBQyxFQUFBb0wsVUFBa0JyTCxFQUFBMHhCLE1BV2lGdzdCLENBQUFudEQsRUFBQUMsRUFBQTlCLEdBQXlCLFFBQUE2QixFQUFBLEdBQUE1QixFQUFBNkIsRUFBQStGLEtBQUE3RixFQUFBRixFQUFBMnNDLGFBQUE5dUIsRUFBQTdkLEVBQUEybUQsY0FBQTFtRCxFQUFBOUIsRUFBQTYrQixjQUFBM0YsRUFBQWw1QixFQUFBKytCLGFBQUF2QixHQUFBdHZCLFNBQUEsSUFBQWdyQixHQUFBeFosSUFBQTNkLEVBQUEsQ0FBb04sR0FBL0ZGLEVBQUEybUQsY0FBQXptRCxPQUE0QyxLQUExQnE3QixFQUFBcjdCLEVBQUFpdEQsd0JBQTBCLE9BQUE1eEIsTUFBQSxZQUFxQ3Y3QixFQUFBMGhDLFVBQUFuRyxFQUFjLElBQUFsRSxFQUFBa0UsR0FBQXN4QixHQUFBN3NELEVBQUE3QixFQUFBazVCLEVBQUFuNUIsUUFBeUIsR0FBQTJmLElBQUEzZCxFQUFBLENBQWVILEVBQ3ZmZzhCLEdBQUFoOEIsRUFBQUMsR0FBTyxNQUFBRCxFQUFxQjdCLEdBQWJBLEVBQUFnQyxFQUFBbUwsVUFBYXBMLEdBQU9ELEVBQUEweUMsV0FBQSxFQUFlN1csR0FBQTk3QixFQUFBQyxFQUFBOUIsR0FBUzZCLEVBQUFDLEVBQUEweEIsV0FBVTN4QixFQUFBZzhCLEdBQUFoOEIsRUFBQUMsR0FBYyxPQUFBRCxFQUFTLFFBQUFtNkIsRUFBQSxRQUFrQixTQUFBa3pCLEdBQUFydEQsR0FBZUEsRUFBQTJ5QyxXQUFBLEVBQWUsSUFBQTJhLFFBQUEsRUFBQUMsUUFBQSxFQUFBQyxRQUFBLEVBQzVJLFNBQUFDLEdBQUF6dEQsRUFBQUMsR0FBaUIsSUFBQTlCLEVBQUE4QixFQUFBMnNDLGFBQXFCLE9BQUEzc0MsRUFBQXNpQyxLQUFjLG1CQUFtQixjQUFBMmpCLEdBQUFqbUQsR0FBQSxLQUF5QixPQUFBMHFELEtBQWF4RSxLQUFNLElBQUEvbkQsRUFBQTZCLEVBQUEwaEMsVUFBK0ksT0FBN0h2akMsRUFBQTRwRCxpQkFBQTVwRCxFQUFBMkwsUUFBQTNMLEVBQUE0cEQsZUFBQTVwRCxFQUFBNHBELGVBQUEsTUFBcUUsT0FBQWhvRCxHQUFBLE9BQUFBLEVBQUEyeEIsUUFBQTY2QixHQUFBdnNELEtBQUEweUMsWUFBQSxHQUFrRDJhLEdBQUFydEQsR0FBTSxLQUFZLE9BQUEycUQsR0FBQTNxRCxHQUFhN0IsRUFBQW9zRCxHQUFBRCxHQUFBaitDLFNBQWlCLElBQUFwTSxFQUFBRCxFQUFBK0YsS0FBYSxVQUFBaEcsR0FBQSxNQUFBQyxFQUFBMGhDLFVBQUEsQ0FBZ0MsSUFBQXhoQyxFQUFBSCxFQUFBNG1ELGNBQUF0dkIsRUFBQXIzQixFQUFBMGhDLFVBQUFuRyxFQUFBZ3ZCLEdBQUFILEdBQUEvOUMsU0FBcURnckIsRUFBQXNzQixHQUFBdHNCLEVBQUFwM0IsRUFBQUMsRUFBQWhDLEVBQUFDLEdBQWdCbXZELEdBQUF2dEQsRUFBQUMsRUFBQXEzQixFQUFBcDNCLEVBQUFDLEVBQUFoQyxFQUFBQyxFQUFBbzlCLEdBQW9CeDdCLEVBQUE4UCxNQUFBN1AsRUFBQTZQLE1BQUE3UCxFQUFBMHlDLFdBQUEsU0FBa0MsQ0FBSyxJQUFBeDBDLEVBQUEsY0FBQThCLEVBQUEwaEMsV0FDemR4SCxFQUFBLFlBQXNDLEdBQWpCbjZCLEVBQUF3cUQsR0FBQUgsR0FBQS85QyxTQUFpQmtnRCxHQUFBdnNELEdBQUE5QixFQUFBOEIsRUFBQTBoQyxVQUFBemhDLEVBQUFELEVBQUErRixLQUFBN0YsRUFBQUYsRUFBQTJtRCxjQUFBem9ELEVBQUFrMEIsR0FBQXB5QixFQUFBOUIsRUFBQWtrQyxHQUFBbGlDLEVBQUEvQixFQUFBMGxELEdBQUEzbEQsRUFBQStCLEVBQUFDLEVBQUFILEVBQUE1QixHQUFBNkIsRUFBQTBtRCxZQUFBdm9ELEVBQUEsT0FBQUEsR0FBQWl2RCxHQUFBcHRELE9BQWlILEVBQUtELEVBQUFzakQsR0FBQXBqRCxFQUFBL0IsRUFBQUMsRUFBQTRCLElBQWNxeUIsR0FBQXB5QixFQUFPRCxFQUFBcWlDLEdBQUFsa0MsRUFBUTZCLEVBQUEsSUFBQUcsRUFBQUYsRUFBQTB4QixNQUFnQixPQUFBeHhCLEdBQVMsQ0FBRSxPQUFBQSxFQUFBb2lDLEtBQUEsSUFBQXBpQyxFQUFBb2lDLElBQUF2aUMsRUFBQW9GLFlBQUFqRixFQUFBd2hDLGdCQUFtRCxPQUFBeGhDLEVBQUFvaUMsS0FBQSxPQUFBcGlDLEVBQUF3eEIsTUFBQSxDQUFtQ3h4QixFQUFBd3hCLE1BQUFzUixPQUFBOWlDLEVBQWlCQSxJQUFBd3hCLE1BQVUsU0FBUyxHQUFBeHhCLElBQUFGLEVBQUEsTUFBZSxLQUFLLE9BQUFFLEVBQUEyeUMsU0FBaUIsQ0FBRSxVQUFBM3lDLEVBQUE4aUMsUUFBQTlpQyxFQUFBOGlDLFNBQUFoakMsRUFBQSxNQUFBRCxFQUF5Q0csSUFBQThpQyxPQUFXOWlDLEVBQUEyeUMsUUFBQTdQLE9BQUE5aUMsRUFBQThpQyxPQUEwQjlpQyxJQUFBMnlDLFFBQVkyUSxHQUFBempELEVBQUFFLEVBQUEvQixFQUFBQyxHQUFZMm1ELEdBQUE3a0QsRUFBQS9CLElBQUFrdkQsR0FBQXB0RCxHQUFlQSxFQUFBMGhDLFVBQzFlM2hDLEVBQUUsT0FBQUMsRUFBQTZQLE1BQUE3UCxFQUFBMHlDLFdBQUEsS0FBaUMsWUFBWSxVQUFBM3lDLEdBQUEsTUFBQUMsRUFBQTBoQyxVQUFBNnJCLEdBQUF4dEQsRUFBQUMsRUFBQUQsRUFBQTRtRCxjQUFBem9ELE9BQXlELENBQUssb0JBQUFBLEVBQUEsY0FBQThCLEVBQUEwaEMsV0FBQXhILEVBQUEsWUFBc0UvN0IsRUFBQW9zRCxHQUFBRCxHQUFBaitDLFNBQWlCaytDLEdBQUFILEdBQUEvOUMsU0FBZWtnRCxHQUFBdnNELElBQUE3QixFQUFBNkIsRUFBQTBoQyxVQUFBeGpDLEVBQUE4QixFQUFBMm1ELGNBQUF4b0QsRUFBQWkwQixHQUFBcHlCLEVBQUE4akQsR0FBQTNsRCxFQUFBRCxJQUFBa3ZELEdBQUFwdEQsTUFBQTdCLEVBQUFvbEQsR0FBQXJsRCxFQUFBQyxJQUFBaTBCLEdBQUFweUIsSUFBQTBoQyxVQUFBdmpDLEdBQStGLFlBQVksUUFBb0IsUUFBb0IsUUFBb0IsUUFBb0Isb0JBQW9CLGNBQUF1c0QsS0FBQTJDLEdBQUFydEQsR0FBQSxLQUErQixlQUFBa3FELEdBQUFscUQsR0FBQSxLQUEwQixvQkFBb0IsT0FBQWs2QixFQUFBLE9BQy9lLFFBQUFBLEVBQUEsUUFBa0IsU0FBQXV6QixHQUFBMXRELEVBQUFDLEdBQWlCLElBQUE5QixFQUFBOEIsRUFBQTZCLE9BQWUsT0FBQTdCLEVBQUE2cEQsT0FBQSxPQUFBM3JELEdBQUEwdUMsR0FBQTF1QyxHQUFnQyxPQUFBQSxHQUFBd3VDLEdBQUF4dUMsR0FBZ0I4QixJQUFBbEIsTUFBVSxPQUFBaUIsR0FBQSxJQUFBQSxFQUFBdWlDLEtBQUFvSyxHQUFBM3NDLEdBQTJCLElBQUlDLEtBQUEwdEQsMkJBQUF4dkIsUUFBQS85QixNQUFBSCxHQUFpRCxNQUFBN0IsR0FBU0EsS0FBQXV2RCwyQkFBQXh2QixRQUFBLzlCLE1BQUFoQyxJQUFrRCxTQUFBd3ZELEdBQUE1dEQsR0FBZSxJQUFBQyxFQUFBRCxFQUFBOFAsSUFBWSxVQUFBN1AsRUFBQSxzQkFBQUEsRUFBQSxJQUF5Q0EsRUFBQSxNQUFRLE1BQUE5QixHQUFTMHZELEdBQUE3dEQsRUFBQTdCLFFBQVE4QixFQUFBcU0sUUFBQSxLQUNwVixTQUFBd2hELEdBQUE5dEQsR0FBNkMsT0FBOUJ5b0QsR0FBQXpvRCxHQUE4QkEsRUFBQXVpQyxLQUFjLE9BQUFxckIsR0FBQTV0RCxHQUFhLElBQUFDLEVBQUFELEVBQUEyaEMsVUFBa0Isc0JBQUExaEMsRUFBQTBQLHFCQUFBLElBQWtEMVAsRUFBQTZKLE1BQUE5SixFQUFBNG1ELGNBQUEzbUQsRUFBQTBPLE1BQUEzTyxFQUFBMG1ELGNBQUF6bUQsRUFBQTBQLHVCQUF5RSxNQUFBeFIsR0FBUzB2RCxHQUFBN3RELEVBQUE3QixHQUFRLE1BQU0sT0FBQXl2RCxHQUFBNXRELEdBQWEsTUFBTSxPQUFBK3RELEdBQUEvdEQsSUFBYyxTQUFBZ3VELEdBQUFodUQsR0FBZSxXQUFBQSxFQUFBdWlDLEtBQUEsSUFBQXZpQyxFQUFBdWlDLEtBQUEsSUFBQXZpQyxFQUFBdWlDLElBQzVSLFNBQUEwckIsR0FBQWp1RCxHQUFlQSxFQUFBLENBQUcsUUFBQUMsRUFBQUQsRUFBQWlqQyxPQUFtQixPQUFBaGpDLEdBQVMsQ0FBRSxHQUFBK3RELEdBQUEvdEQsR0FBQSxDQUFVLElBQUE5QixFQUFBOEIsRUFBUSxNQUFBRCxFQUFRQyxJQUFBZ2pDLE9BQVc5SSxFQUFBLE9BQVNoOEIsT0FBQSxFQUFTLElBQUFDLEVBQUE2QixPQUFBLEVBQWUsT0FBQTlCLEVBQUFva0MsS0FBYyxPQUFBdGlDLEVBQUE5QixFQUFBd2pDLFVBQXFCdmpDLEdBQUEsRUFBSyxNQUFNLE9BQThDLE9BQUE2QixFQUFBOUIsRUFBQXdqQyxVQUFBNlcsY0FBbUNwNkMsR0FBQSxFQUFLLE1BQU0sUUFBQSs3QixFQUFBLE9BQWlCLEdBQUFoOEIsRUFBQXcwQyxZQUFBc00sR0FBQWgvQyxFQUFBLElBQUE5QixFQUFBdzBDLFlBQUEsSUFBNEMzeUMsRUFBQUMsRUFBQSxJQUFBOUIsRUFBQTZCLElBQWEsQ0FBRSxLQUFLLE9BQUE3QixFQUFBMjBDLFNBQWlCLENBQUUsVUFBQTMwQyxFQUFBOGtDLFFBQUErcUIsR0FBQTd2RCxFQUFBOGtDLFFBQUEsQ0FBa0M5a0MsRUFBQSxLQUFPLE1BQUE2QixFQUFRN0IsSUFBQThrQyxPQUFxQyxJQUExQjlrQyxFQUFBMjBDLFFBQUE3UCxPQUFBOWtDLEVBQUE4a0MsT0FBMEI5a0MsSUFBQTIwQyxRQUFnQixJQUFBMzBDLEVBQUFva0MsS0FBQSxJQUFBcGtDLEVBQUFva0MsS0FBcUIsQ0FBRSxLQUFBcGtDLEVBQUF3MEMsVUFBQSxTQUFBMXlDLEVBQ2plLFVBQUE5QixFQUFBd3pCLE9BQUEsSUFBQXh6QixFQUFBb2tDLElBQUEsU0FBQXRpQyxFQUF3QzlCLEVBQUF3ekIsTUFBQXNSLE9BQUE5a0MsTUFBQXd6QixNQUFnQyxPQUFBeHpCLEVBQUF3MEMsV0FBQSxDQUFxQngwQyxJQUFBd2pDLFVBQWMsTUFBQTNoQyxHQUFTLFFBQUFFLEVBQUFGLElBQWEsQ0FBRSxPQUFBRSxFQUFBcWlDLEtBQUEsSUFBQXJpQyxFQUFBcWlDLElBQUEsR0FBQXBrQyxFQUFBLEdBQUFDLEVBQUEsQ0FBbUMsSUFBQStCLEVBQUFGLEVBQUFxM0IsRUFBQXAzQixFQUFBeWhDLFVBQUFuRyxFQUFBcjlCLEVBQTBCLElBQUFnQyxFQUFBOHFDLFNBQUE5cUMsRUFBQXFGLFdBQUFMLGFBQUFteUIsRUFBQWtFLEdBQUFyN0IsRUFBQWdGLGFBQUFteUIsRUFBQWtFLFFBQWtFdjdCLEVBQUFrRixhQUFBakYsRUFBQXloQyxVQUFBeGpDLFFBQW1DQyxHQUFBK0IsRUFBQUYsRUFBQXEzQixFQUFBcDNCLEVBQUF5aEMsVUFBQSxJQUFBeGhDLEVBQUE4cUMsU0FBQTlxQyxFQUFBcUYsV0FBQUwsYUFBQW15QixFQUFBbjNCLEtBQUFpRixZQUFBa3lCLElBQUFyM0IsRUFBQW1GLFlBQUFsRixFQUFBeWhDLGdCQUFxSCxPQUFBemhDLEVBQUFxaUMsS0FBQSxPQUFBcmlDLEVBQUF5eEIsTUFBQSxDQUFtQ3p4QixFQUFBeXhCLE1BQUFzUixPQUFBL2lDLEVBQWlCQSxJQUFBeXhCLE1BQVUsU0FBUyxHQUFBenhCLElBQUFGLEVBQUEsTUFBZSxLQUFLLE9BQ3JmRSxFQUFBNHlDLFNBQVUsQ0FBRSxVQUFBNXlDLEVBQUEraUMsUUFBQS9pQyxFQUFBK2lDLFNBQUFqakMsRUFBQSxPQUF3Q0UsSUFBQStpQyxPQUFXL2lDLEVBQUE0eUMsUUFBQTdQLE9BQUEvaUMsRUFBQStpQyxPQUEwQi9pQyxJQUFBNHlDLFNBQ3pGLFNBQUFpYixHQUFBL3RELEdBQWUsUUFBQUMsRUFBQUQsRUFBQTdCLEdBQUEsRUFBQUMsT0FBQSxFQUFBOEIsT0FBQSxJQUFvQyxDQUFFLElBQUEvQixFQUFBLENBQU9BLEVBQUE4QixFQUFBZ2pDLE9BQVdqakMsRUFBQSxPQUFRLENBQTJCLE9BQXpCLE9BQUE3QixHQUFBZzhCLEVBQUEsT0FBeUJoOEIsRUFBQW9rQyxLQUFjLE9BQUFua0MsRUFBQUQsRUFBQXdqQyxVQUFxQnpoQyxHQUFBLEVBQUssTUFBQUYsRUFBUSxPQUFnRCxPQUFBNUIsRUFBQUQsRUFBQXdqQyxVQUFBNlcsY0FBbUN0NEMsR0FBQSxFQUFLLE1BQUFGLEVBQVE3QixJQUFBOGtDLE9BQVc5a0MsR0FBQSxFQUFLLE9BQUE4QixFQUFBc2lDLEtBQUEsSUFBQXRpQyxFQUFBc2lDLElBQUEsQ0FBeUJ2aUMsRUFBQSxRQUFBRyxFQUFBRixFQUFBcTNCLEVBQUFuM0IsSUFBbUIsR0FBQTJ0RCxHQUFBeDJCLEdBQUEsT0FBQUEsRUFBQTNGLE9BQUEsSUFBQTJGLEVBQUFpTCxJQUFBakwsRUFBQTNGLE1BQUFzUixPQUFBM0wsTUFBQTNGLFVBQStELENBQUssR0FBQTJGLElBQUFuM0IsRUFBQSxNQUFlLEtBQUssT0FBQW0zQixFQUFBd2IsU0FBaUIsQ0FBRSxVQUFBeGIsRUFBQTJMLFFBQUEzTCxFQUFBMkwsU0FBQTlpQyxFQUFBLE1BQUFILEVBQXlDczNCLElBQUEyTCxPQUFXM0wsRUFBQXdiLFFBQUE3UCxPQUFBM0wsRUFBQTJMLE9BQTBCM0wsSUFBQXdiLFFBQVk1eUMsR0FDM2ZDLEVBQUEvQixFQUFBazVCLEVBQUFyM0IsRUFBQTBoQyxVQUFBLElBQUF4aEMsRUFBQThxQyxTQUFBOXFDLEVBQUFxRixXQUFBQyxZQUFBNnhCLEdBQUFuM0IsRUFBQXNGLFlBQUE2eEIsSUFBQWw1QixFQUFBcUgsWUFBQXhGLEVBQUEwaEMsZ0JBQTJHLE9BQUExaEMsRUFBQXNpQyxJQUFBbmtDLEVBQUE2QixFQUFBMGhDLFVBQUE2VyxjQUFBc1YsR0FBQTd0RCxHQUFBLE9BQUFBLEVBQUEweEIsTUFBQSxDQUFvRTF4QixFQUFBMHhCLE1BQUFzUixPQUFBaGpDLEVBQWlCQSxJQUFBMHhCLE1BQVUsU0FBUyxHQUFBMXhCLElBQUFELEVBQUEsTUFBZSxLQUFLLE9BQUFDLEVBQUE2eUMsU0FBaUIsQ0FBRSxVQUFBN3lDLEVBQUFnakMsUUFBQWhqQyxFQUFBZ2pDLFNBQUFqakMsRUFBQSxPQUFtRCxLQUFYQyxJQUFBZ2pDLFFBQVdWLE1BQUFwa0MsR0FBQSxHQUFrQjhCLEVBQUE2eUMsUUFBQTdQLE9BQUFoakMsRUFBQWdqQyxPQUEwQmhqQyxJQUFBNnlDLFNBQ3pWLFNBQUFvYixHQUFBbHVELEVBQUFDLEdBQWlCLE9BQUFBLEVBQUFzaUMsS0FBYyxhQUFhLFdBQUFwa0MsRUFBQThCLEVBQUEwaEMsVUFBeUIsU0FBQXhqQyxFQUFBLENBQVksSUFBQUMsRUFBQTZCLEVBQUEybUQsY0FBc0I1bUQsRUFBQSxPQUFBQSxJQUFBNG1ELGNBQUF4b0QsRUFBNkIsSUFBQThCLEVBQUFELEVBQUErRixLQUFBN0YsRUFBQUYsRUFBQTBtRCxZQUE2QjFtRCxFQUFBMG1ELFlBQUEsS0FBbUIsT0FBQXhtRCxJQUFBaEMsRUFBQWtrQyxHQUFBamtDLEVBQUF5bEQsR0FBQTFsRCxFQUFBZ0MsRUFBQUQsRUFBQUYsRUFBQTVCLElBQWtDLE1BQU0sY0FBQTZCLEVBQUEwaEMsV0FBQXhILEVBQUEsT0FBMENsNkIsRUFBQTBoQyxVQUFBd2QsVUFBQWwvQyxFQUFBMm1ELGNBQXNDLE1BQU0sT0FBYSxRQUFjLGNBQWMsUUFBQXpzQixFQUFBLFFBQWtCLFNBQUFnMEIsR0FBQW51RCxFQUFBQyxFQUFBOUIsSUFBbUJBLEVBQUFpckQsR0FBQWpyRCxJQUFRb2tDLElBQUEsRUFBUXBrQyxFQUFBOFgsU0FBV3pLLFFBQUEsTUFBYyxJQUFBcE4sRUFBQTZCLEVBQUFsQixNQUFtRCxPQUFyQ1osRUFBQThpQixTQUFBLFdBQXNCbXRDLEdBQUFod0QsR0FBTXN2RCxHQUFBMXRELEVBQUFDLElBQVM5QixFQUM1ZCxTQUFBa3dELEdBQUFydUQsRUFBQUMsRUFBQTlCLElBQW1CQSxFQUFBaXJELEdBQUFqckQsSUFBUW9rQyxJQUFBLEVBQVEsSUFBQW5rQyxFQUFBNEIsRUFBQTJoQyxVQUFpTyxPQUEvTSxPQUFBdmpDLEdBQUEsbUJBQUFBLEVBQUFrd0Qsb0JBQUFud0QsRUFBQThpQixTQUFBLFdBQTBFLE9BQUFzdEMsTUFBQSxJQUFBaEosS0FBQXhrRCxPQUFBd3RELEdBQUF6eUMsSUFBQS9hLE1BQTBDLElBQUE1QyxFQUFBOEIsRUFBQWxCLE1BQUFYLEVBQUE2QixFQUFBNnBELE1BQXdCNEQsR0FBQTF0RCxFQUFBQyxHQUFRYyxLQUFBdXRELGtCQUFBbndELEdBQTBCcXdELGVBQUEsT0FBQXB3RCxJQUFBLE9BQWlDRCxFQUNwUSxTQUFBc3dELEdBQUF6dUQsRUFBQUMsRUFBQTlCLEVBQUFDLEVBQUE4QixFQUFBQyxHQUF5QmhDLEVBQUF3MEMsV0FBQSxJQUFpQngwQyxFQUFBMm9ELFlBQUEzb0QsRUFBQTBvRCxXQUFBLEtBQWdDem9ELEVBQUF5ckQsR0FBQXpyRCxFQUFBRCxHQUFVNkIsRUFBQUMsRUFBSSxHQUFHLE9BQUFELEVBQUF1aUMsS0FBYyxPQUErQyxPQUEvQ3ZpQyxFQUFBMnlDLFdBQUEsVUFBcUM0VyxHQUFBdnBELEVBQVo1QixFQUFBK3ZELEdBQUFudUQsRUFBQTVCLEVBQUErQixHQUFZQSxHQUFpQixVQUFBRixFQUFBN0IsRUFBQUQsRUFBQTZCLEVBQUEyaEMsVUFBQSxPQUFBM2hDLEVBQUEyeUMsWUFBQSxPQUFBeDBDLEdBQUEsbUJBQUFBLEVBQUFtd0Qsb0JBQUEsT0FBQUMsUUFBQUcsSUFBQXZ3RCxJQUFzSyxPQUF4QzZCLEVBQUEyeUMsV0FBQSxVQUE4QjRXLEdBQUF2cEQsRUFBWjVCLEVBQUFpd0QsR0FBQXJ1RCxFQUFBQyxFQUFBRSxHQUFZQSxHQUFrQkgsSUFBQWlqQyxhQUFXLE9BQUFqakMsR0FDeFYsU0FBQTJ1RCxHQUFBM3VELEdBQWUsT0FBQUEsRUFBQXVpQyxLQUFjLE9BQUEyakIsR0FBQWxtRCxHQUFhLElBQUFDLEVBQUFELEVBQUEyeUMsVUFBa0IsWUFBQTF5QyxHQUFBRCxFQUFBMnlDLFdBQUEsS0FBQTF5QyxFQUFBLEdBQUFELEdBQUEsS0FBOEMsY0FBQTJxRCxLQUFBeEUsS0FBQSxNQUFBbG1ELEVBQUFELEVBQUEyeUMsWUFBQTN5QyxFQUFBMnlDLFdBQUEsS0FBQTF5QyxFQUFBLEdBQUFELEdBQUEsS0FBK0UsY0FBQTRxRCxHQUFBNXFELEdBQUEsS0FBeUIscUJBQUFDLEVBQUFELEVBQUEyeUMsWUFBQTN5QyxFQUFBMnlDLFdBQUEsS0FBQTF5QyxFQUFBLEdBQUFELEdBQUEsS0FBb0UsY0FBQTJxRCxLQUFBLEtBQXlCLGVBQUFSLEdBQUFucUQsR0FBQSxLQUEwQixxQkFkM0pzdEQsR0FBQSxhQUFnQkMsR0FBQSxTQUFBdnRELEVBQUFDLEVBQUE5QixJQUFtQjhCLEVBQUEwbUQsWUFBQXhvRCxJQUFBa3ZELEdBQUFwdEQsSUFBMEJ1dEQsR0FBQSxTQUFBeHRELEVBQUFDLEVBQUE5QixFQUFBQyxHQUFxQkQsSUFBQUMsR0FBQWl2RCxHQUFBcHRELElBYzhGLElBQUEydUQsR0FBQTFKLEtBQUEySixHQUFBLEVBQUFDLEdBQUFGLEdBQUFHLEdBQUEsRUFBQUMsR0FBQSxFQUFBQyxJQUFBLEVBQUFoekIsR0FBQSxLQUFBaXpCLEdBQUEsS0FBQWh6QixHQUFBLEVBQUFpekIsSUFBQSxFQUFBQyxJQUFBLEVBQUE3eUIsR0FBQSxLQUFBOHlCLElBQUEsRUFBQUMsSUFBQSxFQUFBZixHQUFBLEtBQzlWLFNBQUFnQixLQUFjLFVBQUF0ekIsR0FBQSxRQUFBajhCLEVBQUFpOEIsR0FBQWdILE9BQStCLE9BQUFqakMsR0FBUyxDQUFFLElBQUFDLEVBQUFELEVBQVEsT0FBQUMsRUFBQXNpQyxLQUFjLE9BQUEyakIsR0FBQWptRCxHQUFhLE1BQU0sT0FBQTBxRCxLQUFheEUsS0FBTSxNQUFNLE9BQUF5RSxHQUFBM3FELEdBQWEsTUFBTSxPQUFBMHFELEtBQWEsTUFBTSxRQUFBUixHQUFBbHFELEdBQWNELElBQUFpakMsT0FBV2lzQixHQUFBLEtBQVFoekIsR0FBQSxFQUFJaXpCLElBQUEsRUFBTUMsSUFBQSxFQUFNbnpCLEdBQUEsS0FBT3F6QixJQUFBLEVBQ3hOLFNBQUFFLEdBQUF4dkQsR0FBZSxPQUFNLENBQUUsSUFBQUMsRUFBQUQsRUFBQTRqQyxVQUFBemxDLEVBQUE2QixFQUFBaWpDLE9BQUE3a0MsRUFBQTRCLEVBQUE4eUMsUUFBeUMsV0FBQTl5QyxFQUFBMnlDLFdBQUEsQ0FBMEIxeUMsRUFBQXd0RCxHQUFBeHRELEVBQUFELEdBQVksSUFBQUUsRUFBQUYsRUFBUSxnQkFBQWs4QixJQUFBLGFBQUFoOEIsRUFBQThtRCxlQUFBLENBQWtELElBQUE3bUQsRUFBQSxFQUFRLE9BQUFELEVBQUFxaUMsS0FBYyxrQkFBQWpMLEVBQUFwM0IsRUFBQXltRCxZQUFrQyxPQUFBcnZCLElBQUFuM0IsRUFBQW0zQixFQUFBMHZCLGdCQUErQixJQUFBMXZCLEVBQUFwM0IsRUFBQXl4QixNQUFjLE9BQUEyRixHQUFTLElBQUFBLEVBQUEwdkIsaUJBQUEsSUFBQTdtRCxLQUFBbTNCLEVBQUEwdkIsa0JBQUE3bUQsRUFBQW0zQixFQUFBMHZCLGdCQUFBMXZCLElBQUF3YixRQUFxRjV5QyxFQUFBOG1ELGVBQUE3bUQsRUFBbUIsVUFBQUYsRUFBQSxPQUFBQSxFQUM5TCxHQURtTixPQUFBOUIsR0FBQSxRQUFBQSxFQUFBdzBDLGFBQUEsT0FBQXgwQyxFQUFBMm9ELGNBQUEzb0QsRUFBQTJvRCxZQUFBOW1ELEVBQUE4bUQsYUFBQSxPQUFBOW1ELEVBQUE2bUQsYUFDM1ksT0FBQTFvRCxFQUFBMG9ELGFBQUExb0QsRUFBQTBvRCxXQUFBRSxXQUFBL21ELEVBQUE4bUQsYUFBQTNvRCxFQUFBMG9ELFdBQUE3bUQsRUFBQTZtRCxZQUFBLEVBQUE3bUQsRUFBQTJ5QyxZQUFBLE9BQUF4MEMsRUFBQTBvRCxXQUFBMW9ELEVBQUEwb0QsV0FBQUUsV0FBQS9tRCxFQUFBN0IsRUFBQTJvRCxZQUFBOW1ELEVBQUE3QixFQUFBMG9ELFdBQUE3bUQsSUFBd0wsT0FBQTVCLEVBQUEsT0FBQUEsRUFBcUIsVUFBQUQsRUFBZ0IsQ0FBS214RCxJQUFBLEVBQU0sTUFBM0J0dkQsRUFBQTdCLE1BQWtDLENBQWtCLFdBQWI2QixFQUFBMnVELEdBQUEzdUQsSUFBYSxPQUFBQSxFQUFBMnlDLFdBQUEsSUFBQTN5QyxFQUFtRyxHQUE3RCxPQUFBN0IsTUFBQTJvRCxZQUFBM29ELEVBQUEwb0QsV0FBQSxLQUFBMW9ELEVBQUF3MEMsV0FBQSxLQUE2RCxPQUFBdjBDLEVBQUEsT0FBQUEsRUFBcUIsVUFBQUQsRUFBZ0IsTUFBaEI2QixFQUFBN0IsR0FBNEIsWUFDclosU0FBQXN4RCxHQUFBenZELEdBQWUsSUFBQUMsRUFBQThzRCxHQUFBL3NELEVBQUE0akMsVUFBQTVqQyxFQUFBazhCLElBQThELE9BQXBDLE9BQUFqOEIsTUFBQXV2RCxHQUFBeHZELElBQW9CNnJDLEdBQUF2L0IsUUFBQSxLQUFnQnJNLEVBQzdFLFNBQUF5dkQsR0FBQTF2RCxFQUFBQyxFQUFBOUIsR0FBbUI4d0QsSUFBQTkwQixFQUFBLE9BQW1CODBCLElBQUEsRUFBTWh2RCxJQUFBaThCLElBQUFsOEIsSUFBQWt2RCxJQUFBLE9BQUFqekIsS0FBQXN6QixLQUFBcnpCLEdBQUFqOEIsRUFBQWt2RCxJQUFBLEVBQUFsekIsR0FBQWdyQixJQUFBaUksR0FBQWx2RCxHQUFBc00sUUFBQSxLQUFBNHZCLElBQUFsOEIsRUFBQThuRCw0QkFBQSxHQUF1RyxJQUFBMXBELEdBQUEsRUFBc0IsSUFBYmd4RCxJQUFBanhELEdBQUErOUIsSUFBQTJ5QixLQUFhLENBQUcsSUFBSSxHQUFBMXdELEVBQUEsS0FBVSxPQUFBODlCLEtBQUEwekIsTUFBZ0IxekIsR0FBQXd6QixHQUFBeHpCLFNBQVMsS0FBVSxPQUFBQSxJQUFTQSxHQUFBd3pCLEdBQUF4ekIsSUFBUyxNQUFBOTdCLEdBQVMsVUFBQTg3QixHQUFBNzlCLEdBQUEsRUFBQWd3RCxHQUFBanVELE9BQXVCLENBQUssT0FBQTg3QixJQUFBOUIsRUFBQSxPQUE2QixJQUFBajZCLEdBQUovQixFQUFBODlCLElBQUlnSCxPQUFlLFVBQUEvaUMsRUFBQSxDQUFhOUIsR0FBQSxFQUFLZ3dELEdBQUFqdUQsR0FBTSxNQUFNc3VELEdBQUF6dUQsRUFBQUUsRUFBQS9CLEVBQUFnQyxFQUFBaXZELEVBQUFsekIsSUFBb0JELEdBQUF1ekIsR0FBQXJ4RCxJQUFTLE1BQXFCLEdBQU44d0QsSUFBQSxFQUFNN3dELEVBQUEsWUFBaUIsVUFBQTY5QixHQUFBLENBQWEsR0FBQXF6QixHQUFBLE9BQUF0dkQsRUFBQThuRCw0QkFBQTduRCxFQUFBRCxFQUFBc00sUUFBQXMzQixVQUFpRXdyQixJQUFBajFCLEVBQUEsT0FDeGUsR0FBQWcxQixJQUFBelQsV0FBQSxXQUE2QixJQUFBejdDLEVBQUFELEVBQUFzTSxRQUFBMDZDLGVBQStCLElBQUEvbUQsSUFBQSxJQUFBRCxFQUFBa29ELHlCQUFBbG9ELEVBQUFrb0Qsd0JBQUFqb0QsSUFBQTJ2RCxHQUFBNXZELEVBQUFDLElBQTZFa3ZELElBa0IzRCxTQUFBbnZELEdBQWUsT0FBQTA4QixJQUFBdkMsRUFBQSxPQUF5QnVDLEdBQUF3ckIsd0JBQUFsb0QsRUFsQndCNnZELENBQUE3dkQsRUFBQXNNLFFBQUEwNkMsZ0JBQTZCLFlBQ2xMLFNBQUE2RyxHQUFBN3RELEVBQUFDLEdBQWlCLElBQUE5QixFQUFNNkIsRUFBQSxDQUEyQixJQUF4Qml2RCxLQUFBSSxJQUFBbDFCLEVBQUEsT0FBd0JoOEIsRUFBQTZCLEVBQUFpakMsT0FBZSxPQUFBOWtDLEdBQVMsQ0FBRSxPQUFBQSxFQUFBb2tDLEtBQWMsV0FBQW5rQyxFQUFBRCxFQUFBd2pDLFVBQXlCLHNCQUFBeGpDLEVBQUE2SCxLQUFBOHBELDBCQUFBLG1CQUFBMXhELEVBQUFrd0Qsb0JBQUEsT0FBQUMsUUFBQUcsSUFBQXR3RCxJQUFBLENBQWdKa3JELEdBQUFuckQsRUFBWjZCLEVBQUFxdUQsR0FBQWx3RCxFQUFWNkIsRUFBQTZwRCxHQUFBNXBELEVBQUFELEdBQVUsR0FBWSxHQUFVa3JELEdBQUEvc0QsRUFBQSxHQUFRQSxPQUFBLEVBQVMsTUFBQTZCLEVBQVEsTUFBTSxPQUE2QnNwRCxHQUFBbnJELEVBQVo2QixFQUFBbXVELEdBQUFod0QsRUFBakI2QixFQUFBNnBELEdBQUE1cEQsRUFBQUQsR0FBaUIsR0FBWSxHQUFVa3JELEdBQUEvc0QsRUFBQSxHQUFRQSxPQUFBLEVBQVMsTUFBQTZCLEVBQVE3QixJQUFBOGtDLE9BQVcsSUFBQWpqQyxFQUFBdWlDLE1BQUErbUIsR0FBQXRwRCxFQUFBN0IsRUFBQWd3RCxHQUFBbnVELEVBQUE3QixFQUFBMHJELEdBQUE1cEQsRUFBQUQsR0FBQSxNQUFBa3JELEdBQUFsckQsRUFBQSxJQUFxRDdCLE9BQUEsRUFBUyxPQUFBQSxFQUNyYixTQUFBNHhELEtBQWMsSUFBQS92RCxFQUFBLFVBQUFnckQsS0FBQSxjQUFtRCxPQUFoQmhyRCxHQUFBK3VELEtBQUEvdUQsRUFBQSt1RCxHQUFBLEdBQWdCQSxHQUFBL3VELEVBQVksU0FBQWlyRCxHQUFBanJELEVBQUFDLEdBQW1JLE9BQWxIRCxFQUFBLElBQUFndkQsTUFBQUMsR0FBQUksR0FBQSxFQUFBbnpCLEdBQUEsRUFBQWo4QixFQUFBaEIsS0FBQSt3RCxHQUFBLFVBQUFod0QsRUFBQSx1QkFBQUEsRUFBQSxnQkFBdUZnd0QsS0FBQSxJQUFBQyxJQUFBandELEVBQUFpd0QsU0FBQWp3RCxHQUEyQkEsRUFDaE4sU0FBQWtyRCxHQUFBbHJELEVBQUFDLEdBQWlCLEtBQUssT0FBQUQsR0FBUyxDQUFvTCxJQUFsTCxJQUFBQSxFQUFBZ25ELGdCQUFBaG5ELEVBQUFnbkQsZUFBQS9tRCxLQUFBRCxFQUFBZ25ELGVBQUEvbUQsR0FBK0QsT0FBQUQsRUFBQTRqQyxZQUFBLElBQUE1akMsRUFBQTRqQyxVQUFBb2pCLGdCQUFBaG5ELEVBQUE0akMsVUFBQW9qQixlQUFBL21ELEtBQUFELEVBQUE0akMsVUFBQW9qQixlQUFBL21ELEdBQW1ILE9BQUFELEVBQUFpakMsT0FBQSxRQUFBampDLEVBQUF1aUMsSUFBaUosTUFBaEgsSUFBQXBrQyxFQUFBNkIsRUFBQTJoQyxXQUFrQnN0QixJQUFBLElBQUEveUIsSUFBQWo4QixFQUFBaThCLElBQUFxekIsS0FBc0IsSUFBQW54RCxFQUFBRCxFQUFBbU8sUUFBQTA2QyxlQUErQmlJLEtBQUFJLElBQUFILEtBQUEvd0QsR0FBQXl4RCxHQUFBenhELEVBQUFDLEdBQXlCOHhELEdBQUFDLElBQUFoMkIsRUFBQSxPQUEyQm42QixJQUFBaWpDLFFBQVksU0FBQStuQixLQUF5QixPQUFYOEQsR0FBQTVKLEtBQUEwSixHQUFXQyxHQUFBLEdBQUFDLEdBQUEsTUFDcFosU0FBQXNCLEdBQUFwd0QsR0FBZSxJQUFBQyxFQUFBK3VELEdBQVNBLEdBQUEsVUFBQWhFLEtBQUEsY0FBZ0MsSUFBSSxPQUFBaHJELElBQVcsUUFBUWd2RCxHQUFBL3VELEdBQU0sU0FBQW93RCxHQUFBcndELEVBQUFDLEVBQUE5QixFQUFBQyxFQUFBOEIsR0FBdUIsSUFBQUMsRUFBQTZ1RCxHQUFTQSxHQUFBLEVBQUssSUFBSSxPQUFBaHZELEVBQUFDLEVBQUE5QixFQUFBQyxFQUFBOEIsR0FBa0IsUUFBUTh1RCxHQUFBN3VELEdBQU0sSUFBQW13RCxHQUFBLEtBQUE5ekIsR0FBQSxLQUFBK3pCLEdBQUEsRUFBQUMsUUFBQSxFQUFBL3pCLElBQUEsRUFBQUMsR0FBQSxLQUFBcUIsR0FBQSxFQUFBa3lCLEdBQUEsRUFBQVEsSUFBQSxFQUFBQyxJQUFBLEVBQUFDLEdBQUEsS0FBQUMsR0FBQSxLQUFBNXlCLElBQUEsRUFBQTZ5QixJQUFBLEVBQUFiLElBQUEsRUFBQWMsR0FBQSxLQUFBWCxHQUFBLElBQUFELEdBQUEsRUFBQWEsR0FBQSxFQUE2SCxTQUFBQyxHQUFBaHhELEdBQWUsT0FBQXV3RCxHQUFBLENBQVcsR0FBQXZ3RCxFQUFBdXdELEdBQUEsT0FBZSxPQUFBQyxJQUFBcEwsR0FBQW9MLElBQWtCLElBQUF2d0QsRUFBQWlsRCxLQUFBMEosR0FBYzJCLEdBQUF2d0QsRUFBS3d3RCxHQUFBckwsR0FBQThMLElBQVUvVCxRQUFBLElBQUFsOUMsRUFBQSxHQUFBQyxJQUNuWCxTQUFBMnZELEdBQUE1dkQsRUFBQUMsR0FBaUIsVUFBQUQsRUFBQW9vRCxrQkFBQXBvRCxFQUFBa29ELHdCQUFBam9ELEVBQUEsT0FBQXU4QixJQUFBOHpCLEdBQUE5ekIsR0FBQXg4QixJQUFBb29ELGtCQUFBcG9ELElBQUF3OEIsTUFBQTRyQixrQkFBQXBvRCxHQUFBb29ELGtCQUFBa0ksT0FBbUosQ0FBSyxJQUFBbnlELEVBQUE2QixFQUFBa29ELHlCQUFnQyxJQUFBL3BELEdBQUE4QixFQUFBOUIsS0FBQTZCLEVBQUFrb0Qsd0JBQUFqb0QsR0FBMEN3OEIsS0FBQXVCLEdBQUE2eUIsS0FBQW4wQixHQUFBMThCLEVBQUErOUIsR0FBQSxFQUFBbXpCLEdBQUFseEQsRUFBQSxXQUFBQyxFQUFBa3hELEtBQUFILEdBQUEvd0QsSUFDblAsU0FBQW14RCxLQUFjLElBQUFweEQsRUFBQSxFQUFBQyxFQUFBLEtBQWUsVUFBQXU4QixHQUFBLFFBQUFyK0IsRUFBQXErQixHQUFBcCtCLEVBQUFreUQsR0FBNkIsT0FBQWx5RCxHQUFTLENBQUUsSUFBQThCLEVBQUE5QixFQUFBOHBELHdCQUFnQyxPQUFBaG9ELEVBQUEsQ0FBNkMsSUFBbkMsT0FBQS9CLEdBQUEsT0FBQXErQixLQUFBckMsRUFBQSxPQUFtQy83QixNQUFBZ3FELGtCQUFBLENBQTRCa0ksR0FBQTl6QixHQUFBcCtCLEVBQUFncUQsa0JBQUEsS0FBOEIsTUFBTSxHQUFBaHFELElBQUFreUQsTUFBQXB3RCxFQUFBOUIsRUFBQWdxRCxrQkFBQTVyQixHQUFBNHJCLGtCQUFBbG9ELEVBQUE5QixFQUFBZ3FELGtCQUFBLFNBQXVGLElBQUFocUQsSUFBQW8rQixHQUFBLEVBQWVBLEdBQUFyK0IsR0FBSWlxRCxrQkFBQWtJLEdBQXVCbHlELEVBQUFncUQsa0JBQUEsS0FBeUIsTUFBTWpxRCxFQUFBaXFELGtCQUFBaHFELEVBQUFncUQsa0JBQUFocUQsRUFBQWdxRCxrQkFBQSxLQUFzRWhxRCxFQUFBRCxFQUFBaXFELHNCQUFzQixDQUEyQixJQUF0QixJQUFBcG9ELEdBQUFFLEVBQUFGLE9BQUFFLEVBQUFELEVBQUE3QixHQUFzQkEsSUFBQW8rQixHQUFBLE1BQ3plcitCLEVBQUFDLEVBQUlBLElBQUFncUQsbUJBQTJCLFFBQUpqcUQsRUFBQXUrQixLQUFJditCLElBQUE4QixHQUFBLElBQUFELEVBQUFrd0QsUUFBQSxFQUFpQ3h6QixHQUFBejhCLEVBQUk4OUIsR0FBQS85QixFQUFJLFNBQUFpeEQsR0FBQWp4RCxHQUFlcXhELEdBQUEsS0FBQXJ4RCxHQUFXLFNBQUFteEQsS0FBY0UsR0FBQSxXQUFjLFNBQUFBLEdBQUFyeEQsRUFBQUMsRUFBQTlCLEdBQTZCLEdBQVZ5eUQsR0FBQXp5RCxFQUFLaXpELEtBQUtueEQsRUFBQSxLQUFVLE9BQUF5OEIsSUFBQSxJQUFBcUIsS0FBQSxJQUFBLzlCLE1BQUErOUIsT0FBQTB5QixJQUFBekYsTUFBQWp0QixLQUErQ2l0QixLQUFBa0csR0FBQXgwQixHQUFBcUIsSUFBQTB5QixJQUFBVyxVQUF1QixLQUFVLE9BQUExMEIsSUFBQSxJQUFBcUIsS0FBQSxJQUFBLzlCLE1BQUErOUIsS0FBK0JtekIsR0FBQXgwQixHQUFBcUIsSUFBQSxHQUFBcXpCLEtBQWlCLE9BQUFSLEtBQUFMLEdBQUEsRUFBQUMsR0FBQSxNQUEwQixJQUFBenlCLElBQUFpekIsR0FBQWp6QixJQUFhNnlCLEdBQUEsS0FBUUgsSUFBQSxFQUFNYSxLQUFLLFNBQUFDLEdBQUF2eEQsRUFBQUMsR0FBaUJ3OEIsSUFBQXRDLEVBQUEsT0FBa0J1QyxHQUFBMThCLEVBQUkrOUIsR0FBQTk5QixFQUFJaXhELEdBQUFseEQsRUFBQUMsR0FBQSxHQUFXa3hELEtBQUtHLEtBQzFaLFNBQUFBLEtBQW1CLEdBQUxwQixHQUFBLEVBQUssT0FBQVksR0FBQSxDQUFjLElBQUE5d0QsRUFBQTh3RCxHQUFTQSxHQUFBLEtBQVEsUUFBQTd3RCxFQUFBLEVBQVlBLEVBQUFELEVBQUFxQyxPQUFXcEMsSUFBQSxDQUFLLElBQUE5QixFQUFBNkIsRUFBQUMsR0FBVyxJQUFJOUIsRUFBQXF6RCxjQUFnQixNQUFBcHpELEdBQVNzeUQsU0FBQSxFQUFBQyxHQUFBdnlELEtBQW1CLEdBQUFzeUQsR0FBQSxNQUFBMXdELEVBQUEyd0QsTUFBQSxLQUFBRCxJQUFBLEVBQUExd0QsRUFBa0MsU0FBQWt4RCxHQUFBbHhELEVBQUFDLEVBQUE5QixHQUFtQnMrQixJQUFBdEMsRUFBQSxPQUFrQnNDLElBQUEsRUFBS3QrQixFQUFBLFFBQUFBLEVBQUE2QixFQUFBK25ELGNBQUEwSixHQUFBenhELEVBQUE3QixFQUFBOEIsR0FBQSxRQUFBOUIsRUFBQXV4RCxHQUFBMXZELEVBQUFDLEdBQUEsTUFBQTB2RCxLQUFBM3ZELEVBQUErbkQsYUFBQTVwRCxFQUFBc3pELEdBQUF6eEQsRUFBQTdCLEVBQUE4QixJQUFBLFFBQUE5QixFQUFBNkIsRUFBQStuRCxjQUFBMEosR0FBQXp4RCxFQUFBN0IsRUFBQThCLEdBQUEsUUFBQTlCLEVBQUF1eEQsR0FBQTF2RCxFQUFBQyxHQUFBLEtBQUF3eEQsR0FBQXp4RCxFQUFBN0IsRUFBQThCLEdBQTRLdzhCLElBQUEsRUFDalksU0FBQWcxQixHQUFBenhELEVBQUFDLEVBQUE5QixHQUFtQixJQUFBQyxFQUFBNEIsRUFBQW1vRCxXQUFtQixVQUFBL3BELEtBQUFzekQsaUJBQUF2ekQsSUFBQSxPQUFBMnlELE9BQUExeUQsR0FBQTB5RCxHQUFBdnVELEtBQUFuRSxLQUFBdXpELFFBQXdILE9BQTdDM3hELEVBQUErbkQsYUFBQTluRCxPQUFpQkQsRUFBQWtvRCx3QkFBQSxHQUF1TixHQUFwTGxvRCxFQUFBK25ELGFBQUEsS0FBb0JzSCxHQUFBSixJQUFBLEdBQVM5d0QsRUFBQThCLEVBQUEwaEMsV0FBY3IxQixVQUFBck0sR0FBQWs2QixFQUFBLE9BQThELEtBQWhDLzdCLEVBQUFELEVBQUEycEQsOEJBQWdDM3RCLEVBQUEsT0FBc0JoOEIsRUFBQTJwRCw0QkFBQSxFQUFnQ2tELEtBQUtuZixHQUFBdi9CLFFBQUEsS0FBZ0IsRUFBQXJNLEVBQUEweUMsVUFBQSxVQUFBMXlDLEVBQUE0bUQsV0FBQSxDQUF5QzVtRCxFQUFBNG1ELFdBQUFFLFdBQUE5bUQsRUFBMEIsSUFBQUMsRUFBQUQsRUFBQTZtRCxpQkFBb0I1bUQsRUFBQUQsT0FBU0MsRUFBQUQsRUFBQTZtRCxZQUFxQmpDLEdBQUFuTSxHQUFNLElBQUF2NEMsRUFBQW0rQixJQUFXLEdBQUF1YixHQUFBMTVDLEdBQUEsQ0FBVSxzQkFDemVBLEVBQUEsSUFBQW0zQixHQUFTaWpCLE1BQUFwNkMsRUFBQXE2QyxlQUFBeGdDLElBQUE3WixFQUFBczZDLG1CQUEyQ3o2QyxFQUFBLENBQVEsSUFBQXc3QixFQUFBejRCLE9BQUEyM0MsY0FBQTMzQyxPQUFBMjNDLGVBQWlELEdBQUFsZixHQUFBLElBQUFBLEVBQUFvMkIsV0FBQSxDQUF3QnQ2QixFQUFBa0UsRUFBQW1mLFdBQWUsSUFBQTc4QixFQUFBMGQsRUFBQW9mLGFBQUFyN0MsRUFBQWk4QixFQUFBcWYsVUFBbUNyZixJQUFBc2YsWUFBZ0IsSUFBSXhqQixFQUFBMlQsU0FBQTFyQyxFQUFBMHJDLFNBQXNCLE1BQUE0bUIsR0FBVXY2QixFQUFBLEtBQU8sTUFBQXQzQixFQUFRLElBQUFwQixFQUFBLEVBQUFxN0IsR0FBQSxFQUFBNEIsR0FBQSxFQUFBMzFCLEVBQUEsRUFBQTRsRCxFQUFBLEVBQUF4eEIsRUFBQW42QixFQUFBbkIsRUFBQSxLQUF1Q2lCLEVBQUEsT0FBUSxDQUFFLFFBQUF3USxFQUFhNnBCLElBQUFoRCxHQUFBLElBQUF4WixHQUFBLElBQUF3YyxFQUFBMlEsV0FBQWhSLEVBQUFyN0IsRUFBQWtmLEdBQXNDd2MsSUFBQS82QixHQUFBLElBQUFpOEIsR0FBQSxJQUFBbEIsRUFBQTJRLFdBQUFwUCxFQUFBajlCLEVBQUE0OEIsR0FBc0MsSUFBQWxCLEVBQUEyUSxXQUFBcnNDLEdBQUEwN0IsRUFBQTZrQixVQUFBOThDLFFBQXdDLFFBQUFvTyxFQUFBNnBCLEVBQUFqMUIsYUFBaUNyRyxFQUFBczdCLEVBQUlBLEVBQUE3cEIsRUFBSSxPQUFNLENBQUUsR0FBQTZwQixJQUFBbjZCLEVBQUEsTUFBQUYsRUFDdGIsR0FEdWNqQixJQUFBczRCLEtBQzllcHhCLElBQUE0WCxJQUFBbWMsRUFBQXI3QixHQUFnQkksSUFBQU8sS0FBQXVzRCxJQUFBdHdCLElBQUFLLEVBQUFqOUIsR0FBdUIsUUFBQTZSLEVBQUE2cEIsRUFBQXAxQixhQUFBLE1BQXNDbEcsR0FBSnM3QixFQUFBdDdCLEdBQUl3RyxXQUFlODBCLEVBQUE3cEIsRUFBSTZtQixHQUFBLElBQUEyQyxJQUFBLElBQUE0QixFQUFBLE1BQXVCMGUsTUFBQXRnQixFQUFBamdCLElBQUE2aEIsUUFBZXZFLEVBQUEsS0FBWUEsTUFBTWlqQixNQUFBLEVBQUF2Z0MsSUFBQSxRQUFlc2QsRUFBQSxLQUF1RCxJQUEzQ3d0QixJQUFJZ04sWUFBQTN4RCxFQUFBNHhELGVBQUF6NkIsR0FBZ0NxaEIsSUFBQSxHQUFPcGMsR0FBQXI4QixFQUFRLE9BQUFxOEIsSUFBUyxDQUFFcDhCLEdBQUEsRUFBS20zQixPQUFBLEVBQVMsSUFBSSxLQUFLLE9BQUFpRixJQUFTLENBQUUsT0FBQUEsR0FBQW9XLFVBQUEsQ0FBb0IsSUFBQTVZLEVBQUF3QyxHQUFBcUgsVUFBc0IsUUFBSjlsQixFQUFBeWUsSUFBSWdHLEtBQWMsY0FBQXprQixFQUFBNjBCLFdBQUEsT0FBQTVZLEVBQUEsQ0FBcUMsSUFBQXJwQixFQUFBcXBCLEVBQUE2c0IsY0FBQXZzQixFQUFBTixFQUFBMnNCLGNBQUFzTCxFQUFBbDBDLEVBQUE2akIsVUFBdURxd0IsRUFBQWxvRCxNQUFBZ1UsRUFBQThvQyxjQUF5Qm9MLEVBQUFyakQsTUFBQW1QLEVBQUE0b0MsY0FBeUIsSUFBQXVMLEVBQUFELEVBQUF6Ryx3QkFBQTc2QyxFQUN6ZDJwQixHQUFHMjNCLEVBQUFFLG9DQUFBRCxFQUEwQyxNQUFNLGtDQUFrQyxRQUFBOTNCLEVBQUEsUUFBa0JvQyxNQUFBd3FCLFlBQWdCLE1BQUE4SyxHQUFVMXhELEdBQUEsRUFBQW0zQixFQUFBdTZCLEVBQVUxeEQsSUFBQSxPQUFBbzhCLElBQUFwQyxFQUFBLE9BQUEwekIsR0FBQXR4QixHQUFBakYsR0FBQSxPQUFBaUYsV0FBQXdxQixhQUFpRSxJQUFBeHFCLEdBQUFyOEIsRUFBUSxPQUFBcThCLElBQVMsQ0FBRXhDLEdBQUEsRUFBS3JwQixPQUFBLEVBQVMsSUFBSSxLQUFLLE9BQUE2ckIsSUFBUyxDQUFFLElBQUExQyxFQUFBMEMsR0FBQW9XLFVBQTJDLEdBQXpCLEdBQUE5WSxHQUFBb2xCLEdBQUExaUIsR0FBQW9GLFVBQUEsSUFBeUIsSUFBQTlILEVBQUEsQ0FBVSxJQUFBSyxFQUFBcUMsR0FBQXFILFVBQWtCLFVBQUExSixFQUFBLENBQWEsSUFBQW44QixFQUFBbThCLEVBQUFwcUIsSUFBWSxPQUFBL1IsSUFBQSxtQkFBQUEsSUFBQSxNQUFBQSxFQUFBdU8sUUFBQSxPQUEwRCxVQUFBdXRCLEdBQWEsT0FBQW8wQixHQUFBMXhCLElBQWFBLEdBQUFvVyxZQUFBLEVBQWdCLE1BQU0sT0FBQXNiLEdBQUExeEIsSUFBYUEsR0FBQW9XLFlBQUEsRUFBZ0J1YixHQUFBM3hCLEdBQUFxSCxVQUN4ZXJILElBQUcsTUFBTSxPQUFBMnhCLEdBQUEzeEIsR0FBQXFILFVBQUFySCxJQUF5QixNQUFNLE9BQUF3eEIsR0FBQTF6QixFQUFBa0MsSUFBQWxDLEVBQUE0SSxPQUFBLEtBQUE1SSxFQUFBMUksTUFBQSxLQUFBMEksRUFBQXVKLFlBQUF2SixFQUFBdUosVUFBQWpTLE1BQUEsS0FBQTBJLEVBQUF1SixVQUFBWCxPQUFBLE1BQTBHMUcsTUFBQXdxQixZQUFnQixNQUFBOEssR0FBVTkzQixHQUFBLEVBQUFycEIsRUFBQW1oRCxFQUFVOTNCLElBQUEsT0FBQXdDLElBQUFwQyxFQUFBLE9BQUEwekIsR0FBQXR4QixHQUFBN3JCLEdBQUEsT0FBQTZyQixXQUFBd3FCLGFBQWdILEdBQS9DaHBELEVBQUErbUQsR0FBSzVxQixFQUFBb0UsSUFBT3pFLEVBQUE5N0IsRUFBQSt6RCxZQUFnQi8zQixFQUFBaDhCLEVBQUFnMEQsZUFBbUI3M0IsSUFBQUwsR0FBQTJFLEVBQUF4N0IsU0FBQXFpQyxnQkFBQXhMLEdBQUEsQ0FBMEMsT0FBQUUsR0FBQThmLEdBQUFoZ0IsS0FBQUssRUFBQUgsRUFBQXdnQixXQUFBLEtBQUF4OEMsRUFBQWc4QixFQUFBL2YsT0FBQWpjLEVBQUFtOEIsR0FBQSxtQkFBQUwsS0FBQTJnQixlQUFBdGdCLEVBQUFMLEVBQUE0Z0IsYUFBQWozQixLQUFBMkQsSUFBQXBwQixFQUFBODdCLEVBQUE5NkIsTUFBQXNELFNBQUFVLE9BQUEyM0MsZUFBQXhnQixFQUFBbjNCLE9BQUEyM0MsZUFDaFZocUMsRUFBQW1wQixFQUFBdUwsTUFBQS9pQyxPQUFBdEUsRUFBQXlsQixLQUFBMkQsSUFBQTRTLEVBQUF3Z0IsTUFBQTdwQyxHQUFBcXBCLE9BQUEsSUFBQUEsRUFBQS9mLElBQUFqYyxFQUFBeWxCLEtBQUEyRCxJQUFBNFMsRUFBQS9mLElBQUF0SixJQUFBd3BCLEVBQUE4TSxRQUFBanBDLEVBQUFnOEIsSUFBQXJwQixFQUFBcXBCLElBQUFoOEIsSUFBQTJTLEtBQUFpcEMsR0FBQTlmLEVBQUE5N0IsR0FBQXM4QixFQUFBc2YsR0FBQTlmLEVBQUFFLEdBQUFycEIsR0FBQTJwQixJQUFBLElBQUFILEVBQUEwM0IsWUFBQTEzQixFQUFBeWdCLGFBQUFqcUMsRUFBQStRLE1BQUF5WSxFQUFBMGdCLGVBQUFscUMsRUFBQXNILFFBQUFraUIsRUFBQTJnQixZQUFBeGdCLEVBQUE1WSxNQUFBeVksRUFBQTRnQixjQUFBemdCLEVBQUFyaUIsV0FBQWc2QyxFQUFBaHZELFNBQUFtdkQsZUFBQUMsU0FBQTFoRCxFQUFBK1EsS0FBQS9RLEVBQUFzSCxRQUFBa2lCLEVBQUFtNEIsa0JBQUF0MEQsRUFBQWc4QixHQUFBRyxFQUFBbzRCLFNBQUFOLEdBQUE5M0IsRUFBQThNLE9BQUEzTSxFQUFBNVksS0FBQTRZLEVBQUFyaUIsVUFBQWc2QyxFQUFBTyxPQUFBbDRCLEVBQUE1WSxLQUFBNFksRUFBQXJpQixRQUFBa2lCLEVBQUFvNEIsU0FBQU4sT0FBb2E5M0IsS0FBSyxJQUFBbjhCLEVBQUE4N0IsRUFBUTk3QixJQUFBeUgsWUFBZSxJQUFBekgsRUFBQWt0QyxVQUFBL1EsRUFBQTMzQixNQUF5QmlKLFFBQUF6TixFQUFBeTBELEtBQUF6MEQsRUFBQTAwRCxXQUN6ZEMsSUFBQTMwRCxFQUFBNDBELFlBQXlELElBQXZDLG1CQUFBOTRCLEVBQUF3cEIsT0FBQXhwQixFQUFBd3BCLFFBQXVDeHBCLEVBQUEsRUFBUUEsRUFBQUssRUFBQTczQixPQUFXdzNCLEtBQUE5N0IsRUFBQW04QixFQUFBTCxJQUFBcnVCLFFBQUFpbkQsV0FBQTEwRCxFQUFBeTBELEtBQUF6MEQsRUFBQXlOLFFBQUFtbkQsVUFBQTUwRCxFQUFBMjBELElBQW9HLElBQW5DNU4sR0FBQSxLQUFRbk0sR0FBQWtNLElBQU9BLEdBQUEsS0FBUTFtRCxFQUFBbU8sUUFBQXJNLEVBQVlzOEIsR0FBQXI4QixFQUFRLE9BQUFxOEIsSUFBUyxDQUFFcjhCLEdBQUEsRUFBSzI1QixPQUFBLEVBQVMsSUFBSSxJQUFBSyxFQUFBOTdCLEVBQVEsT0FBQW0rQixJQUFTLENBQUUsSUFBQXEyQixFQUFBcjJCLEdBQUFvVyxVQUFtQixNQUFBaWdCLEVBQUEsQ0FBVSxJQUFBQyxFQUFBdDJCLEdBQUFxSCxVQUEyQixPQUFKN0osRUFBQUcsR0FBSm44QixFQUFBdytCLElBQVFnRyxLQUFjLFdBQUF1d0IsRUFBQS8wRCxFQUFBNGpDLFVBQTBCLEtBQUE1akMsRUFBQTQwQyxVQUFBLFVBQUFrZ0IsRUFBQUMsRUFBQWhwRCxNQUFBL0wsRUFBQTZvRCxjQUFBa00sRUFBQW5rRCxNQUFBNVEsRUFBQTJvRCxjQUFBb00sRUFBQTFqRCx3QkFBdUcsQ0FBSyxJQUFBMmpELEVBQUFGLEVBQUFqTSxjQUFBb00sRUFBQUgsRUFBQW5NLGNBQTRDb00sRUFBQWhwRCxNQUFBL0wsRUFBQTZvRCxjQUNoZWtNLEVBQUFua0QsTUFBQTVRLEVBQUEyb0QsY0FBeUJvTSxFQUFBN2lELG1CQUFBOGlELEVBQUFDLEVBQUFGLEVBQUFaLHFDQUFvRSxJQUFBZSxFQUFBbDFELEVBQUE0b0QsWUFBcUIsT0FBQXNNLElBQUFILEVBQUFocEQsTUFBQS9MLEVBQUE2b0QsY0FBQWtNLEVBQUFua0QsTUFBQTVRLEVBQUEyb0QsY0FBQWtELEdBQUE3ckQsRUFBQWsxRCxFQUFBSCxJQUE2RSxNQUFNLFdBQUFJLEVBQUFuMUQsRUFBQTRvRCxZQUE0QixVQUFBdU0sRUFBQSxDQUFxQixHQUFQeGlELEVBQUEsS0FBTyxPQUFBM1MsRUFBQTR6QixNQUFBLE9BQUE1ekIsRUFBQTR6QixNQUFBNFEsS0FBc0MsT0FBQTd4QixFQUFBM1MsRUFBQTR6QixNQUFBZ1EsVUFBMkIsTUFBTSxPQUFBanhCLEVBQUEzUyxFQUFBNHpCLE1BQUFnUSxVQUEyQmlvQixHQUFBN3JELEVBQUFtMUQsRUFBQXhpRCxHQUFhLE1BQU0sV0FBQXlpRCxFQUFBcDFELEVBQUE0akMsVUFBMEIsT0FBQWt4QixHQUFBLEVBQUE5MEQsRUFBQTQwQyxXQUFBb1MsR0FBQWhuRCxFQUFBaUksS0FBQWpJLEVBQUE2b0QsZ0JBQUF1TSxFQUFBOVAsUUFBaUUsTUFBTSxPQUFhLE9BQWEsUUFBYyxjQUNwZixRQUFBbHBCLEVBQUEsUUFBa0IsT0FBQXk0QixFQUFBLENBQVc3MEQsT0FBQSxFQUFTLElBQUFxMUQsRUFBQTcyQixHQUFBenNCLElBQWEsVUFBQXNqRCxFQUFBLENBQWMsSUFBQUMsRUFBQTkyQixHQUFBb0YsVUFBbUIsT0FBQXBGLEdBQUFnRyxLQUFjLE9BQUF4a0MsRUFBQXMxRCxFQUFZLE1BQU0sUUFBQXQxRCxFQUFBczFELEVBQWEsbUJBQUFELElBQUFyMUQsR0FBQXExRCxFQUFBOW1ELFFBQUF2TyxHQUEyQyxJQUFBdTFELEVBQUEvMkIsR0FBQXdxQixXQUFvQnhxQixHQUFBd3FCLFdBQUEsS0FBa0J4cUIsR0FBQSsyQixHQUFNLE1BQUF6QixHQUFVM3hELEdBQUEsRUFBQTI1QixFQUFBZzRCLEVBQVUzeEQsSUFBQSxPQUFBcThCLElBQUFwQyxFQUFBLE9BQUEwekIsR0FBQXR4QixHQUFBMUMsR0FBQSxPQUFBMEMsV0FBQXdxQixhQUFpRWtJLEdBQUFJLElBQUEsRUFBUzdHLEdBQUF2b0QsRUFBQTBoQyxXQUFtRSxLQUEzQjFoQyxFQUFBOUIsRUFBQW1PLFFBQUEwNkMsa0JBQTJCdUgsR0FBQSxNQUFpQnZ1RCxFQUFBa29ELHdCQUFBam9ELEVBQTRCLFNBQUEwdkQsS0FBYyxlQUFBaUIsT0FBQWpVLGdCQUFBb1UsTUFBQU4sSUFBQSxHQUNwYixTQUFBckMsR0FBQXB1RCxHQUFlLE9BQUEwOEIsSUFBQXZDLEVBQUEsT0FBeUJ1QyxHQUFBd3JCLHdCQUFBLEVBQTRCd0ksU0FBQSxFQUFBQyxHQUFBM3dELEdBQXFGLFNBQUF1ekQsR0FBQXZ6RCxFQUFBQyxHQUFpQixJQUFBOUIsRUFBQTYvQixHQUFRQSxJQUFBLEVBQUssSUFBSSxPQUFBaCtCLEVBQUFDLEdBQVksU0FBUSs5QixHQUFBNy9CLElBQUFzK0IsSUFBQTAwQixNQUFnQixTQUFBcUMsR0FBQXh6RCxFQUFBQyxHQUFpQixHQUFBKzlCLEtBQUE2eUIsR0FBQSxDQUFXQSxJQUFBLEVBQU0sSUFBSSxPQUFBN3dELEVBQUFDLEdBQVksUUFBUTR3RCxJQUFBLEdBQU8sT0FBQTd3RCxFQUFBQyxHQUFZLFNBQUF3ekQsR0FBQXp6RCxFQUFBQyxHQUFpQnc4QixJQUFBdEMsRUFBQSxPQUFrQixJQUFBaDhCLEVBQUE2L0IsR0FBUUEsSUFBQSxFQUFLLElBQUksT0FBQXF5QixHQUFBcndELEVBQUFDLEdBQWUsUUFBUSs5QixHQUFBNy9CLEVBQUFnekQsTUFDdlgsU0FBQXVDLEdBQUExekQsRUFBQUMsRUFBQTlCLEdBQW1CLEdBQUE2eEQsR0FBQSxPQUFBaHdELEVBQUFDLEVBQUE5QixHQUFvQjYvQixJQUFBdkIsSUFBQSxJQUFBd3pCLEtBQUFvQixHQUFBcEIsSUFBQSxRQUFBQSxHQUFBLEdBQW9DLElBQUE3eEQsRUFBQTR4RCxHQUFBOXZELEVBQUE4OUIsR0FBYUEsR0FBQWd5QixJQUFBLEVBQVEsSUFBSSxPQUFBaHdELEVBQUFDLEVBQUE5QixHQUFjLFFBQVE2eEQsR0FBQTV4RCxHQUFBNC9CLEdBQUE5OUIsSUFBQXU4QixJQUFBMDBCLE1BQXFCLFNBQUF3QyxHQUFBM3pELEdBQWUsSUFBQUMsRUFBQSs5QixHQUFRQSxJQUFBLEVBQUssSUFBSXF5QixHQUFBcndELEdBQU0sU0FBUWcrQixHQUFBLzlCLElBQUF3OEIsSUFBQTQwQixHQUFBLFlBQzdMLFNBQUF1QyxHQUFBNXpELEVBQUFDLEVBQUE5QixFQUFBQyxFQUFBOEIsR0FBdUIsSUFBQUMsRUFBQUYsRUFBQXFNLFFBQWdCLEdBQUFuTyxFQUFBLENBQThCLElBQUFtNUIsRUFBeEJuNUIsSUFBQTRzRCxvQkFBOEI5cUQsRUFBQSxDQUF3QyxJQUFyQyxJQUFBeXlDLEdBQUF2MEMsSUFBQSxJQUFBQSxFQUFBb2tDLEtBQUFwSSxFQUFBLE9BQXFDN0MsRUFBQW41QixFQUFRLElBQUFtNUIsRUFBQWlMLEtBQVUsQ0FBRSxHQUFBdWpCLEdBQUF4dUIsR0FBQSxDQUFVQSxJQUFBcUssVUFBQTRrQiwwQ0FBd0QsTUFBQXRtRCxHQUFRcTNCLElBQUEyTCxTQUFBOUksRUFBQSxPQUE2QjdDLElBQUFxSyxVQUFBNTNCLFFBQXNCNUwsRUFBQTJuRCxHQUFBM25ELEdBQUFrb0QsR0FBQWxvRCxFQUFBbTVCLFVBQWtCbjVCLEVBQUFzZ0MsRUFBMkosT0FBakosT0FBQXgrQixFQUFBOEosUUFBQTlKLEVBQUE4SixRQUFBNUwsRUFBQThCLEVBQUErbkQsZUFBQTdwRCxFQUFnRDhCLEVBQUFDLEdBQUlBLEVBQUFrcEQsR0FBQWhyRCxJQUFRNlgsU0FBV3pLLFFBQUF4TCxHQUErQixRQUFwQkMsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLEtBQW9CQyxFQUFBK2dCLFNBQUFoaEIsR0FBeUJxcEQsR0FBQW5wRCxFQUFBRCxFQUFBOUIsR0FBVThzRCxHQUFBL3FELEVBQUEvQixHQUFRQSxFQUNqYixTQUFBeTFELEdBQUE3ekQsR0FBZSxJQUFBQyxFQUFBRCxFQUFBK3FELG9CQUFnSCxZQUFwRixJQUFBOXFELElBQUEsbUJBQUFELEVBQUFtTCxPQUFBZ3ZCLEVBQUEsT0FBQUEsRUFBQSxNQUFBMzdCLE9BQUE4SCxLQUFBdEcsS0FBb0YsUUFBUkEsRUFBQSt5QyxHQUFBOXlDLElBQVEsS0FBQUQsRUFBQTJoQyxVQUFpQyxTQUFBbXlCLEdBQUE5ekQsRUFBQUMsRUFBQTlCLEVBQUFDLEdBQXFCLElBQUE4QixFQUFBRCxFQUFBcU0sUUFBaUMsT0FBQXNuRCxHQUFBNXpELEVBQUFDLEVBQUE5QixFQUFWK0IsRUFBQStxRCxHQUF2QkQsS0FBdUI5cUQsR0FBVTlCLEdBQXFCLFNBQUEyMUQsR0FBQS96RCxHQUEyQixLQUFaQSxJQUFBc00sU0FBWXFsQixNQUFBLFlBQXdCLE9BQUEzeEIsRUFBQTJ4QixNQUFBNFEsS0FBb0IsT0FBZ0MsZUFBQXZpQyxFQUFBMnhCLE1BQUFnUSxXQUNsVixTQUFBcXlCLEdBQUFoMEQsR0FBZSxJQUFBQyxFQUFBRCxFQUFBaTBELHdCQUFnQyxPQTFGL0MsU0FBQWowRCxHQUFlLHVCQUFBaytCLCtCQUFBLFNBQWdFLElBQUFqK0IsRUFBQWkrQiwrQkFBcUMsR0FBQWorQixFQUFBaTBELGFBQUFqMEQsRUFBQWswRCxjQUFBLFNBQTJDLElBQUksSUFBQWgyRCxFQUFBOEIsRUFBQW0wRCxPQUFBcDBELEdBQWtCcW9ELEdBQUFFLEdBQUEsU0FBQXZvRCxHQUFrQixPQUFBQyxFQUFBbzBELGtCQUFBbDJELEVBQUE2QixLQUFrQ3NvRCxHQUFBQyxHQUFBLFNBQUF2b0QsR0FBa0IsT0FBQUMsRUFBQXEwRCxxQkFBQW4yRCxFQUFBNkIsS0FBcUMsTUFBQTVCLElBQVUsU0EwRjNQbTJELENBQUEzMEQsS0FBY0ksR0FBSXcwRCx3QkFBQSxTQUFBeDBELEdBQTRDLGVBQVJBLEVBQUEreUMsR0FBQS95QyxJQUFRLEtBQUFBLEVBQUEyaEMsV0FBaUNzeUIsd0JBQUEsU0FBQWowRCxHQUFxQyxPQUFBQyxJQUFBRCxHQUFBLFNBQ25MLElBQUF5MEQsR0FBNEZsQixHQUE1RmtCLEdBQTRGZixHQUE1RmUsR0FBNEYsV0FBaU5oNEIsSUFBQSxJQUFBd3pCLEtBQUFvQixHQUFBcEIsSUFBQSxRQUFBQSxHQUFBLElBQ3hGLFNBQUF5RSxHQUFBMTBELEdBQWVlLEtBQUEyd0QsZ0JBQUEzQixLQUEwQmh2RCxLQUFBdWtDLE1BQUF0bEMsRUFBYWUsS0FBQTR6RCxXQUFBNXpELEtBQUE2ekQsTUFBQSxLQUFnQzd6RCxLQUFBOHpELGFBQUE5ekQsS0FBQSt6RCxjQUFBLEVBQXVDL3pELEtBQUFnMEQsVUFBQSxLQUFvQmgwRCxLQUFBNHdELFFBQUEsRUFHdkwsU0FBQXFELEtBQWNqMEQsS0FBQTR6RCxXQUFBLEtBQXFCNXpELEtBQUFrMEQsWUFBQSxFQUFtQmwwRCxLQUFBbTBELFVBQUFuMEQsS0FBQW0wRCxVQUFBNTFELEtBQUF5QixNQUNuQyxTQUFBbzBELEdBQUFuMUQsRUFBQUMsRUFBQTlCLEdBQW1CNEMsS0FBQXEwRCxjQUFBNU4sR0FBQXhuRCxFQUFBQyxFQUFBOUIsR0FFMEMsU0FBQWszRCxHQUFBcjFELEdBQWUsU0FBQUEsR0FBQSxJQUFBQSxFQUFBaXJDLFVBQUEsSUFBQWpyQyxFQUFBaXJDLFVBQUEsS0FBQWpyQyxFQUFBaXJDLFdBQUEsSUFBQWpyQyxFQUFBaXJDLFVBQUEsaUNBQUFqckMsRUFBQW0vQyxZQUU5USxTQUFBbVcsR0FBQXQxRCxFQUFBQyxFQUFBOUIsRUFBQUMsRUFBQThCLEdBQXVCbTFELEdBQUFsM0QsSUFBQWc4QixFQUFBLE9BQXNCLElBQUFoNkIsRUFBQWhDLEVBQUFvM0Qsb0JBQTRCLEdBQUFwMUQsRUFBQSxDQUFNLHNCQUFBRCxFQUFBLENBQTBCLElBQUFvM0IsRUFBQXAzQixFQUFRQSxFQUFBLFdBQWEsSUFBQUYsRUFBQSt6RCxHQUFBNXpELEVBQUFpMUQsZUFBMEI5OUIsRUFBQXI1QixLQUFBK0IsSUFBVyxNQUFBQSxFQUFBRyxFQUFBcTFELGtDQUFBeDFELEVBQUFDLEVBQUFDLEdBQUFDLEVBQUFnTCxPQUFBbEwsRUFBQUMsT0FBaUUsQ0FBcUMsR0FBaENDLEVBQUFoQyxFQUFBbzNELG9CQUR6TyxTQUFBdjFELEVBQUFDLEdBQXdJLEdBQXZIQSxZQUFBRCxFQUFBLElBQUFBLEVBQUFpckMsU0FBQWpyQyxFQUFBcWxDLGdCQUFBcmxDLEVBQUFxRixXQUFBLFdBQUFwRixFQUFBZ3JDLFdBQUFockMsRUFBQXcxRCxhQUFBLHFCQUF1SHgxRCxFQUFBLFFBQUE5QixFQUFnQkEsRUFBQTZCLEVBQUFrL0MsV0FBY2wvQyxFQUFBeUYsWUFBQXRILEdBQWtCLFdBQUFnM0QsR0FBQW4xRCxHQUFBLEVBQUFDLEdBQ2lEeTFELENBQUF2M0QsRUFBQUMsR0FBZ0MsbUJBQUE4QixFQUFBLENBQTBCLElBQUFzN0IsRUFBQXQ3QixFQUFRQSxFQUFBLFdBQWEsSUFBQUYsRUFBQSt6RCxHQUFBNXpELEVBQUFpMUQsZUFBMEI1NUIsRUFBQXY5QixLQUFBK0IsSUFBV3d6RCxHQUFBLFdBQWMsTUFBQXh6RCxFQUFBRyxFQUFBcTFELGtDQUFBeDFELEVBQUFDLEVBQUFDLEdBQUFDLEVBQUFnTCxPQUFBbEwsRUFBQUMsS0FBbUUsT0FBQTZ6RCxHQUFBNXpELEVBQUFpMUQsZUFDOWEsU0FBQU8sR0FBQTMxRCxFQUFBQyxHQUFpQixJQUFBOUIsRUFBQSxFQUFBMEUsVUFBQVIsYUFBQSxJQUFBUSxVQUFBLEdBQUFBLFVBQUEsUUFBd0YsT0FBdEJ3eUQsR0FBQXAxRCxJQUFBazZCLEVBQUEsT0FUbkYsU0FBQW42QixFQUFBQyxFQUFBOUIsR0FBbUIsSUFBQUMsRUFBQSxFQUFBeUUsVUFBQVIsYUFBQSxJQUFBUSxVQUFBLEdBQUFBLFVBQUEsUUFBa0UsT0FBTzQ0QixTQUFBdVEsR0FBQTNzQyxJQUFBLE1BQUFqQixFQUFBLFFBQUFBLEVBQUFrTixTQUFBdEwsRUFBQXc0QyxjQUFBdjRDLEVBQUFzbkQsZUFBQXBwRCxHQVNheTNELENBQUE1MUQsRUFBQUMsRUFBQSxLQUFBOUIsR0FUa0UwcUMsR0FBQUMsbUNBQUFrYixJQUMzSzBRLEdBQUFoMUQsVUFBQXlMLE9BQUEsU0FBQW5MLEdBQWdDZSxLQUFBNHdELFFBQUF4M0IsRUFBQSxPQUE0QnA1QixLQUFBOHpELGNBQUEsRUFBcUI5ekQsS0FBQWcwRCxVQUFBLzBELEVBQWlCLElBQUFDLEVBQUFjLEtBQUF1a0MsTUFBQTh2QixjQUFBajNELEVBQUE0QyxLQUFBMndELGdCQUFBdHpELEVBQUEsSUFBQTQyRCxHQUEwRixPQUEzQnBCLEdBQUE1ekQsRUFBQUMsRUFBQSxLQUFBOUIsRUFBQUMsRUFBQTgyRCxXQUEyQjkyRCxHQUFVczJELEdBQUFoMUQsVUFBQTJjLEtBQUEsU0FBQXJjLEdBQThCLEdBQUFlLEtBQUErekQsYUFBQTkwRCxRQUF5QixDQUFLLElBQUFDLEVBQUFjLEtBQUE0ekQsV0FBc0IsT0FBQTEwRCxNQUFBYyxLQUFBNHpELGVBQWlDMTBELEVBQUFzQyxLQUFBdkMsS0FDelQwMEQsR0FBQWgxRCxVQUFBbTJELE9BQUEsV0FBK0IsSUFBQTcxRCxFQUFBZSxLQUFBdWtDLE1BQUE4dkIsY0FBQW4xRCxFQUFBRCxFQUFBbW9ELFdBQW9GLEdBQXRDcG5ELEtBQUE0d0QsUUFBQSxPQUFBMXhELEdBQUFrNkIsRUFBQSxPQUFzQ3A1QixLQUFBOHpELGFBQUEsQ0FBc0IsSUFBQTEyRCxFQUFBNEMsS0FBQTJ3RCxnQkFBMkIsR0FBQXp4RCxJQUFBYyxLQUFBLENBQWFBLEtBQUE4ekQsZUFBQTEyRCxFQUFBNEMsS0FBQTJ3RCxnQkFBQXp4RCxFQUFBeXhELGdCQUFBM3dELEtBQUFvSyxPQUFBcEssS0FBQWcwRCxZQUEwRixRQUFBMzJELEVBQUEsS0FBQThCLEVBQUFELEVBQW1CQyxJQUFBYSxNQUFTM0MsRUFBQThCLE1BQUEwMEQsTUFBZSxPQUFBeDJELEdBQUErN0IsRUFBQSxPQUF5Qi83QixFQUFBdzJELE1BQUExMEQsRUFBQTAwRCxNQUFnQjd6RCxLQUFBNnpELE1BQUEzMEQsRUFBYUQsRUFBQW1vRCxXQUFBcG5ELEtBQWtCQSxLQUFBNHdELFFBQUEsRUFBZUosR0FBQXZ4RCxFQUFBN0IsR0FBUThCLEVBQUFjLEtBQUE2ekQsTUFBYTd6RCxLQUFBNnpELE1BQUEsS0FBaUMsUUFBakIzMEQsRUFBQUQsRUFBQW1vRCxXQUFBbG9ELElBQWlCQSxFQUFBNDBELGNBQUE1MEQsRUFBQWtMLE9BQUFsTCxFQUFBODBELGdCQUFnRGgwRCxLQUFBNnpELE1BQ25mLEtBQUE3ekQsS0FBQTR3RCxRQUFBLEdBQXFCK0MsR0FBQWgxRCxVQUFBOHhELFlBQUEsV0FBb0MsSUFBQXp3RCxLQUFBK3pELGFBQUEsQ0FBdUIvekQsS0FBQSt6RCxjQUFBLEVBQXFCLElBQUE5MEQsRUFBQWUsS0FBQTR6RCxXQUFzQixVQUFBMzBELEVBQUEsUUFBQUMsRUFBQSxFQUF3QkEsRUFBQUQsRUFBQXFDLE9BQVdwQyxLQUFBLEVBQUFELEVBQUFDLFFBQWdIKzBELEdBQUF0MUQsVUFBQTJjLEtBQUEsU0FBQXJjLEdBQThCLEdBQUFlLEtBQUFrMEQsV0FBQWoxRCxRQUF1QixDQUFLLElBQUFDLEVBQUFjLEtBQUE0ekQsV0FBc0IsT0FBQTEwRCxNQUFBYyxLQUFBNHpELGVBQWlDMTBELEVBQUFzQyxLQUFBdkMsS0FDL1hnMUQsR0FBQXQxRCxVQUFBdzFELFVBQUEsV0FBa0MsSUFBQW4wRCxLQUFBazBELFdBQUEsQ0FBcUJsMEQsS0FBQWswRCxZQUFBLEVBQW1CLElBQUFqMUQsRUFBQWUsS0FBQTR6RCxXQUFzQixVQUFBMzBELEVBQUEsUUFBQUMsRUFBQSxFQUF3QkEsRUFBQUQsRUFBQXFDLE9BQVdwQyxJQUFBLENBQUssSUFBQTlCLEVBQUE2QixFQUFBQyxHQUFXLG1CQUFBOUIsR0FBQWc4QixFQUFBLE1BQUFoOEIsR0FBd0NBLE9BQXVEZzNELEdBQUF6MUQsVUFBQXlMLE9BQUEsU0FBQW5MLEVBQUFDLEdBQWtDLElBQUE5QixFQUFBNEMsS0FBQXEwRCxjQUFBaDNELEVBQUEsSUFBQTQyRCxHQUFtRyxPQUE3QyxRQUFwQi8wRCxPQUFBLElBQUFBLEVBQUEsS0FBQUEsSUFBb0I3QixFQUFBaWUsS0FBQXBjLEdBQW9CNnpELEdBQUE5ekQsRUFBQTdCLEVBQUEsS0FBQUMsRUFBQTgyRCxXQUF5QjkyRCxHQUN2WCsyRCxHQUFBejFELFVBQUFvMkQsUUFBQSxTQUFBOTFELEdBQWlDLElBQUFDLEVBQUFjLEtBQUFxMEQsY0FBQWozRCxFQUFBLElBQUE2MkQsR0FBc0csT0FBaEQsUUFBcEJoMUQsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLElBQW9CN0IsRUFBQWtlLEtBQUFyYyxHQUFvQjh6RCxHQUFBLEtBQUE3ekQsRUFBQSxLQUFBOUIsRUFBQSsyRCxXQUE0Qi8yRCxHQUFVZzNELEdBQUF6MUQsVUFBQTgxRCxrQ0FBQSxTQUFBeDFELEVBQUFDLEVBQUE5QixHQUErRCxJQUFBQyxFQUFBMkMsS0FBQXEwRCxjQUFBbDFELEVBQUEsSUFBQTgwRCxHQUFnRyxPQUExQyxRQUFwQjcyRCxPQUFBLElBQUFBLEVBQUEsS0FBQUEsSUFBb0IrQixFQUFBbWMsS0FBQWxlLEdBQW9CMjFELEdBQUE3ekQsRUFBQTdCLEVBQUE0QixFQUFBRSxFQUFBZzFELFdBQXNCaDFELEdBQ2hUaTFELEdBQUF6MUQsVUFBQXEyRCxZQUFBLFdBQW9DLElBQUEvMUQsRUFBQSxJQUFBMDBELEdBQUEzekQsTUFBQWQsRUFBQUQsRUFBQTB4RCxnQkFBQXZ6RCxFQUFBNEMsS0FBQXEwRCxjQUFBaDNELEVBQUFELEVBQUFncUQsV0FBMkUsVUFBQS9wRCxFQUFBRCxFQUFBZ3FELFdBQUFub0QsSUFBQTQwRCxNQUFBLFNBQXdDLENBQUssSUFBQXoyRCxFQUFBLEtBQVcsT0FBQUMsS0FBQXN6RCxpQkFBQXp4RCxHQUErQjlCLEVBQUFDLE1BQUF3MkQsTUFBZTUwRCxFQUFBNDBELE1BQUF4MkQsRUFBVSxPQUFBRCxNQUFBeTJELE1BQUE1MEQsR0FBc0IsT0FBQUEsR0FBc0owcEMsR0FBQStxQixHQUFxQjlxQixHQUFBOHFCLEdBQXlCN3FCLEdBQUE2cUIsR0FJemIsSUFBQXVCLElBQVFDLGFBQUFOLEdBQUFPLFlBQUEsU0FBQWwyRCxHQUF3QyxhQUFBQSxFQUFBLFNBQUFBLEVBQUFpckMsU0FBQWpyQyxFQUFBNnpELEdBQUE3ekQsSUFBMkNpb0QsUUFBQSxTQUFBam9ELEVBQUFDLEVBQUE5QixHQUF5QixPQUFBbTNELEdBQUEsS0FBQXQxRCxFQUFBQyxHQUFBLEVBQUE5QixJQUF5QmdOLE9BQUEsU0FBQW5MLEVBQUFDLEVBQUE5QixHQUF3QixPQUFBbTNELEdBQUEsS0FBQXQxRCxFQUFBQyxHQUFBLEVBQUE5QixJQUF5Qmc0RCxvQ0FBQSxTQUFBbjJELEVBQUFDLEVBQUE5QixFQUFBQyxHQUE4RyxPQUF2RCxNQUFBNEIsUUFBQSxJQUFBQSxFQUFBK3FELHNCQUFBNXdCLEVBQUEsTUFBdURtN0IsR0FBQXQxRCxFQUFBQyxFQUFBOUIsR0FBQSxFQUFBQyxJQUFzQmc0RCx1QkFBQSxTQUFBcDJELEdBQXlELE9BQXJCcTFELEdBQUFyMUQsSUFBQW02QixFQUFBLFFBQXFCbjZCLEVBQUF1MUQsc0JBQUEvQixHQUFBLFdBQTRDOEIsR0FBQSxVQUFBdDFELEdBQUEsYUFBNkJBLEVBQUF1MUQsb0JBQUEsVUFBNkIsSUFBU2Msc0JBQUEsV0FBa0MsT0FBQVYsR0FBQS95RCxXQUFBLEVBQzVnQkMsWUFBV3l6RCx3QkFBQS9DLEdBQUFnRCx5QkFBQW5HLEdBQUFvRyw0QkFBQTlDLEdBQUErQyxVQUFBaEQsR0FBQWlELHlCQUFBL0MsR0FBQTkxQixvREFBb0w4NEIsZUFBQTUwQixFQUFBNjBCLG9CQUFBMzJCLEVBQUE0MkIsaUJBQUFoekIsR0FBQWl6Qix5QkFBQXh0QixHQUFBeXRCLHNCQUFBcjBCLEVBQUFzMEIsc0JBQUFqZSxJQUEySWtlLG9CQUFBLFNBQUFqM0QsRUFBQUMsR0FBbUMsV0FBQWsxRCxHQUFBbjFELEdBQUEsUUFBQUMsSUFBQSxJQUFBQSxFQUFBZ29ELFdBQThDK0wsSUFBSUMsd0JBQUEzeEIsRUFBQTQwQixXQUFBLEVBQUFqcEQsUUFBQSxTQUFBa3BELG9CQUFBLGNBQy9aLElBQUFDLElBQVFyK0IsUUFBQWk5QixJQUFXcUIsR0FBQUQsSUFBQXBCLElBQUFvQixHQUFldjVELEVBQUFELFFBQUF5NUQsR0FBQXQrQixRQUFBcytCLEdBQUF0K0IsUUFBQXMrQixpQ0NyT2xDLElBQUE5MUMsSUFBQSxvQkFBQXhlLGdCQUFBQyxXQUFBRCxPQUFBQyxTQUFBOEMsZUFRQXd4RCxHQUVBLzFDLFlBRUFnMkMsY0FBQSxvQkFBQUMsT0FFQUMscUJBQUFsMkMsTUFBQXhlLE9BQUF5ZSxtQkFBQXplLE9BQUE0ZSxhQUVBKzFDLGVBQUFuMkMsS0FBQXhlLE9BQUE0MEQsT0FFQUMsWUFBQXIyQyxHQUlBMWpCLEVBQUFELFFBQUEwNUQsZ0NDR0F6NUQsRUFBQUQsUUFaQSxTQUFBaTZELEdBRUEsYUFEQUEsTUFBQSxvQkFBQTcwRCx1QkFBQTNDLElBRUEsWUFFQSxJQUNBLE9BQUF3M0QsRUFBQTNvQixlQUFBMm9CLEVBQUFDLEtBQ0csTUFBQTUzRCxHQUNILE9BQUEyM0QsRUFBQUMscUNDakJBLElBQUFuNEQsRUFBQW5CLE9BQUFrQixVQUFBQyxlQU1BLFNBQUE2USxFQUFBQyxFQUFBQyxHQUVBLE9BQUFELElBQUFDLEVBSUEsSUFBQUQsR0FBQSxJQUFBQyxHQUFBLEVBQUFELEdBQUEsRUFBQUMsRUFHQUQsTUFBQUMsS0FtQ0E3UyxFQUFBRCxRQTFCQSxTQUFBZ1QsRUFBQUMsR0FDQSxHQUFBTCxFQUFBSSxFQUFBQyxHQUNBLFNBR0Esb0JBQUFELEdBQUEsT0FBQUEsR0FBQSxpQkFBQUMsR0FBQSxPQUFBQSxFQUNBLFNBR0EsSUFBQUMsRUFBQXRTLE9BQUE4SCxLQUFBc0ssR0FDQUcsRUFBQXZTLE9BQUE4SCxLQUFBdUssR0FFQSxHQUFBQyxFQUFBek8sU0FBQTBPLEVBQUExTyxPQUNBLFNBSUEsUUFBQXZFLEVBQUEsRUFBaUJBLEVBQUFnVCxFQUFBek8sT0FBa0J2RSxJQUNuQyxJQUFBNkIsRUFBQTFCLEtBQUE0UyxFQUFBQyxFQUFBaFQsTUFBQTBTLEVBQUFJLEVBQUFFLEVBQUFoVCxJQUFBK1MsRUFBQUMsRUFBQWhULEtBQ0EsU0FJQSx3Q0NsREEsSUFBQWk2RCxFQUFBcjZELEVBQUEsSUF5QkFHLEVBQUFELFFBbEJBLFNBQUFvNkQsRUFBQUMsRUFBQUMsR0FDQSxTQUFBRCxJQUFBQyxLQUVHRCxJQUFBQyxJQUVBSCxFQUFBRSxLQUVBRixFQUFBRyxHQUNIRixFQUFBQyxFQUFBQyxFQUFBMXlELFlBQ0csYUFBQXl5RCxFQUNIQSxFQUFBRSxTQUFBRCxLQUNHRCxFQUFBRyw0QkFDSCxHQUFBSCxFQUFBRyx3QkFBQUYscUNDbkJBLElBQUFHLEVBQUEzNkQsRUFBQSxJQVVBRyxFQUFBRCxRQUpBLFNBQUE0QixHQUNBLE9BQUE2NEQsRUFBQTc0RCxJQUFBLEdBQUFBLEVBQUF5ckMsd0NDR0FwdEMsRUFBQUQsUUFOQSxTQUFBNEIsR0FDQSxJQUNBZ3pDLEdBREFoekMsSUFBQXl2QyxlQUFBenZDLEVBQUF3RCxVQUNBd3ZDLGFBQUF6dkMsT0FDQSxTQUFBdkQsS0FBQSxtQkFBQWd6QyxFQUFBOGxCLEtBQUE5NEQsYUFBQWd6QyxFQUFBOGxCLEtBQUEsaUJBQUE5NEQsR0FBQSxpQkFBQUEsRUFBQXlyQyxVQUFBLGlCQUFBenJDLEVBQUFxckMsMkZDbEJBLElBQUF4UyxFQUFBMzZCLEVBQUEsVUFDQTY2RCxFQUFBNzZELEVBQUEsUUFDQUEsRUFBQSxTQUNBQSxFQUFBLFNBQ0FBLEVBQUEsU0FDQUEsRUFBQSxnRkFFa0JzckIsWUFFaEI3ZCxTQUVFLE9BQ0UydEIsRUFBQUMsUUFBQWp6QixjQUFDeXlELEVBQUFsdkMsY0FBRCxLQUNFeVAsRUFBQUMsUUFBQWp6QixjQUFBLE9BQUtpb0IsVUFBVy9wQixVQUFPdzBELEtBQ3JCMS9CLEVBQUFDLFFBQUFqekIsY0FBQSxjQUNFZ3pCLEVBQUFDLFFBQUFqekIsY0FBQzJ5RCxFQUFBMS9CLFFBQUQsT0FHRkQsRUFBQUMsUUFBQWp6QixjQUFBLFlBQ0VnekIsRUFBQUMsUUFBQWp6QixjQUFDeXlELEVBQUFobkMsT0FBRCxLQUNFdUgsRUFBQUMsUUFBQWp6QixjQUFDeXlELEVBQUF0ckMsT0FBTWQsT0FBQSxFQUFNeFUsS0FBSyxJQUFJMFYsVUFBV3FyQyxZQUNqQzUvQixFQUFBQyxRQUFBanpCLGNBQUN5eUQsRUFBQXRyQyxPQUFNZCxPQUFBLEVBQU14VSxLQUFLLGNBQWMwVixVQUFXc3JDLFlBQzNDNy9CLEVBQUFDLFFBQUFqekIsY0FBQ3l5RCxFQUFBOW9DLFVBQVN4UixHQUFHLDBDQ2IzQixJQUFBMjZDLEVBQUFsN0QsRUFBQSxJQUVBLFNBQUFxNUIsS0FFQWw1QixFQUFBRCxRQUFBLFdBQ0EsU0FBQWk3RCxFQUFBL3VELEVBQUFndkQsRUFBQUMsRUFBQWg1QyxFQUFBaTVDLEVBQUFDLEdBQ0EsR0FBQUEsSUFBQUwsRUFBQSxDQUlBLElBQUFwaUMsRUFBQSxJQUFBbDJCLE1BQ0EsbUxBS0EsTUFEQWsyQixFQUFBbjRCLEtBQUEsc0JBQ0FtNEIsR0FHQSxTQUFBMGlDLElBQ0EsT0FBQUwsRUFGQUEsRUFBQTd2RCxXQUFBNnZELEVBTUEsSUFBQU0sR0FDQXZ0QyxNQUFBaXRDLEVBQ0FwdkMsS0FBQW92QyxFQUNBOXZELEtBQUE4dkQsRUFDQW52QyxPQUFBbXZDLEVBQ0FyNUQsT0FBQXE1RCxFQUNBcnZDLE9BQUFxdkMsRUFDQU8sT0FBQVAsRUFFQVEsSUFBQVIsRUFDQVMsUUFBQUosRUFDQTF0RCxRQUFBcXRELEVBQ0FVLFdBQUFMLEVBQ0F6M0MsS0FBQW8zQyxFQUNBVyxTQUFBTixFQUNBanZDLE1BQUFpdkMsRUFDQTd0QyxVQUFBNnRDLEVBQ0Fyd0QsTUFBQXF3RCxFQUNBL3NDLE1BQUErc0MsR0FNQSxPQUhBQyxFQUFBTSxlQUFBMWlDLEVBQ0FvaUMsRUFBQWhnQyxVQUFBZ2dDLEVBRUFBLGlDQzlDQXQ3RCxFQUFBRCxRQUZBLDhEQ1RBQyxFQUFBRCxRQUFBdWIsTUFBQThGLFNBQUEsU0FBQXk2QyxHQUNBLHdCQUFBbDdELE9BQUFrQixVQUFBb0IsU0FBQTdDLEtBQUF5N0QsbUZDREEsSUFBQXJoQyxFQUFBMzZCLEVBQUEsVUFDQTY2RCxFQUFBNzZELEVBQUEsUUFDQUEsRUFBQSxTQUNBQSxFQUFBLFNBQ0FBLEVBQUEsOERBRU1pOEQsVUFBZTN3QyxZQUFVM0wsZUFBQTljLEdBQUEsSUFBQTRuQixFQUFBLE9BQUFBLEVBQUFvUSxTQUFBaDRCLEdBQUFRLEtBTTdCNjRELGNBQWdCbDRDLEtBQ2RBLEVBQU11SixpQkFDTjR1QyxNQUFNLDBCQVJxQjF4QyxFQVc3QmhkLFNBRUUsT0FDRTJ0QixFQUFBQyxRQUFBanpCLGNBQUEsT0FBS2lvQixVQUFXL3BCLFVBQU84MUQsUUFFckJoaEMsRUFBQUMsUUFBQWp6QixjQUFBLFdBQVNpb0IsVUFBVSxvQkFDakIrSyxFQUFBQyxRQUFBanpCLGNBQUEsT0FBS2lvQixVQUFVLFFBQ2IrSyxFQUFBQyxRQUFBanpCLGNBQUEsT0FBS2kwRCxJQUFLQyxZQUNWbGhDLEVBQUFDLFFBQUFqekIsY0FBQSw2QkFFRmd6QixFQUFBQyxRQUFBanpCLGNBQUEsV0FDRWd6QixFQUFBQyxRQUFBanpCLGNBQUEsVUFDRWd6QixFQUFBQyxRQUFBanpCLGNBQUEsVUFDRWd6QixFQUFBQyxRQUFBanpCLGNBQUN5eUQsRUFBQTBCLFNBQVE5dEMsT0FBQSxFQUFNMkIsZ0JBQWdCLFNBQVM3UCxHQUFHLEtBQTNDLFNBRUY2YSxFQUFBQyxRQUFBanpCLGNBQUEsVUFDRWd6QixFQUFBQyxRQUFBanpCLGNBQUN5eUQsRUFBQTBCLFNBQVE5dEMsT0FBQSxFQUFNMkIsZ0JBQWdCLFNBQVM3UCxHQUFHLGVBQTNDLGlCQU1SNmEsRUFBQUMsUUFBQWp6QixjQUFDbzBELEVBQUFuaEMsUUFBRCxRQWpDRjRnQyxFQUVHcHVELHVCQXFDTW91RCxnR0M3Q2YsSUFBQXRoQyxFQUFBMzZCLEVBQUEsY0FDQUEsRUFBQSxJQUNBKzdCLEVBQUEvN0IsRUFBQSxHQUNBeThELEVBQUF6OEQsRUFBQSxHQUNBMDhELEVBQUExOEQsRUFBQSxRQUNBQSxFQUFBLDhEQUVhNEMsVUFBYzBvQixZQU96Qi9ZLHFCQUNFLE1BQU03UCxNQUFFQSxFQUFGaTZELFdBQVNBLEdBQWV0NUQsS0FBSytJLE1BRWhDMUosR0FDRHM3QyxXQUFXLEtBQ1QyZSxLQUNDLEtBSVBsdkQsU0FDRSxNQUFNL0ssTUFBRUEsR0FBVVcsS0FBSytJLE1BQ3ZCLE9BQUkxSixFQUdGMDRCLEVBQUFDLFFBQUFqekIsY0FBQSxPQUFLaW9CLFVBQVcvcEIsVUFBTzVELE9BQVFBLEdBSGYsUUFuQlRFLFVBRUppTCxXQUNMbkwsTUFBTys0QixVQUFVa2dDLElBQ2pCZ0IsV0FBWWxoQyxVQUFVcHdCLGlCQXNCWCxFQUFBMHdCLEVBQUE2Z0MsU0FDYjNyRCxLQUNFdk8sT0FBTyxFQUFBKzVELEVBQUE1akQsVUFBUzVILE1BRWhCMHJELHlCQUpXLENBS2IvNUQsa0JDdENGekMsRUFBQUQsUUFBQSxTQUFBMjhELEdBQ0EsSUFBQUEsRUFBQUMsZ0JBQUEsQ0FDQSxJQUFBMzhELEVBQUFXLE9BQUFZLE9BQUFtN0QsR0FFQTE4RCxFQUFBeU4sV0FBQXpOLEVBQUF5TixhQUNBOU0sT0FBQUMsZUFBQVosRUFBQSxVQUNBYSxZQUFBLEVBQ0FDLElBQUEsV0FDQSxPQUFBZCxFQUFBRSxLQUdBUyxPQUFBQyxlQUFBWixFQUFBLE1BQ0FhLFlBQUEsRUFDQUMsSUFBQSxXQUNBLE9BQUFkLEVBQUFDLEtBR0FVLE9BQUFDLGVBQUFaLEVBQUEsV0FDQWEsWUFBQSxJQUVBYixFQUFBMjhELGdCQUFBLEVBRUEsT0FBQTM4RCxzR0N0QkEsSUFBQXM4RCxFQUFBejhELEVBQUEsR0FFYTI4RCxhQUFhLE9BQVNyMEQsS0FBTW9RLGtDQ0R6QyxJQUFBbFYsRUFBQXhELEVBQUEsSUFFQSxpQkFBQXdELFFBQUFyRCxFQUFBQyxFQUFBb0QsRUFBQSxNQU9BLElBQUErQyxHQUFlM0MsV0FBQSxFQUFBbTVELEtBQUEsRUFFZjV6RCxlQVBBQSxFQVFBOUIsZ0JBQUExRSxHQUVBM0MsRUFBQSxFQUFBQSxDQUFBd0QsRUFBQStDLEdBRUEvQyxFQUFBdzVELFNBQUE3OEQsRUFBQUQsUUFBQXNELEVBQUF3NUQsMEJDakJBNzhELEVBQUFELFFBQUFGLEVBQUEsRUFBQUEsRUFBQSxJQUtBNkUsTUFBQTFFLEVBQUFDLEVBQUEsT0FBa0NtUSxRQUFBLEVBQUFwTSxXQUFBODRELFNBQUFDLFNBQUEsR0FBQUMsS0FBQSxZQUFBOTRELFdBQUEscUJDU2xDbEUsRUFBQUQsUUFBQSxTQUFBK0csR0FFQSxJQUFBb2IsRUFBQSxvQkFBQWhkLGVBQUFnZCxTQUVBLElBQUFBLEVBQ0EsVUFBQXpmLE1BQUEsb0NBSUEsSUFBQXFFLEdBQUEsaUJBQUFBLEVBQ0EsT0FBQUEsRUFHQSxJQUFBbTJELEVBQUEvNkMsRUFBQWc3QyxTQUFBLEtBQUFoN0MsRUFBQWk3QyxLQUNBQyxFQUFBSCxFQUFBLzZDLEVBQUFwQyxTQUFBbGQsUUFBQSxpQkEyREEsT0EvQkFrRSxFQUFBbEUsUUFBQSwrREFBQXk2RCxFQUFBQyxHQUVBLElBV0FDLEVBWEFDLEVBQUFGLEVBQ0FuWixPQUNBdmhELFFBQUEsb0JBQUFsQyxFQUFBKzhELEdBQXdDLE9BQUFBLElBQ3hDNzZELFFBQUEsb0JBQUFsQyxFQUFBKzhELEdBQXdDLE9BQUFBLElBR3hDLDBEQUFBNWhELEtBQUEyaEQsR0FDQUgsR0FRQUUsRUFGQSxJQUFBQyxFQUFBMTFELFFBQUEsTUFFQTAxRCxFQUNHLElBQUFBLEVBQUExMUQsUUFBQSxLQUVIbTFELEVBQUFPLEVBR0FKLEVBQUFJLEVBQUE1NkQsUUFBQSxZQUlBLE9BQUFnQixLQUFBQyxVQUFBMDVELEdBQUEseUJDbkZBdjlELEVBQUFELFFBQUFGLEVBQUFrQyxFQUFBLHdEQ0NBLElBQUFzQixFQUFBeEQsRUFBQSxJQUVBLGlCQUFBd0QsUUFBQXJELEVBQUFDLEVBQUFvRCxFQUFBLE1BT0EsSUFBQStDLEdBQWUzQyxXQUFBLEVBQUFtNUQsS0FBQSxFQUVmNXpELGVBUEFBLEVBUUE5QixnQkFBQTFFLEdBRUEzQyxFQUFBLEVBQUFBLENBQUF3RCxFQUFBK0MsR0FFQS9DLEVBQUF3NUQsU0FBQTc4RCxFQUFBRCxRQUFBc0QsRUFBQXc1RCwwQkNqQkE5OEQsRUFBQUMsRUFBQUQsUUFBQUYsRUFBQSxFQUFBQSxFQUFBLElBS0E2RSxNQUFBMUUsRUFBQUMsRUFBQSxrc0NBQXV0QyxJQUFVbVEsUUFBQSxFQUFBcE0sU0FBQSxtRkFBQTg0RCxTQUFBQyxTQUFBLG1iQUE0aUJDLEtBQUEsYUFBQVUsZ0JBQUEsOC9CQUFzaUN4NUQsV0FBQSxNQUduekZuRSxFQUFBODhELFFBQ0FaLE9BQUEsMEdDUkEsSUFBQXpoQyxFQUFBMzZCLEVBQUEsVUFDQTY2RCxFQUFBNzZELEVBQUEsUUFDQUEsRUFBQSxTQUVBQSxFQUFBLGdGQUVtQnNyQixZQUNqQjdkLFNBQ0UsT0FDRTJ0QixFQUFBQyxRQUFBanpCLGNBQUEsT0FBS2lvQixVQUFXL3BCLFVBQU93M0QsTUFDckIxaUMsRUFBQUMsUUFBQWp6QixjQUFBLDhCQUNBZ3pCLEVBQUFDLFFBQUFqekIsY0FBQSxlQUNFZ3pCLEVBQUFDLFFBQUFqekIsY0FBQSxrQ0FDQWd6QixFQUFBQyxRQUFBanpCLGNBQUEsT0FBS2lvQixVQUFXL3BCLFVBQU95M0QsWUFDckIzaUMsRUFBQUMsUUFBQWp6QixjQUFDeXlELEVBQUEwQixTQUFROXRDLE9BQUEsRUFBTTJCLGdCQUFnQixTQUFTN1AsR0FBRyxlQUN6QzZhLEVBQUFDLFFBQUFqekIsY0FBQSxPQUFLaTBELElBQUsyQixtQ0NoQnhCNzlELEVBQUFELFFBQUFGLEVBQUFrQyxFQUFBLHdEQ0NBLElBQUFzQixFQUFBeEQsRUFBQSxJQUVBLGlCQUFBd0QsUUFBQXJELEVBQUFDLEVBQUFvRCxFQUFBLE1BT0EsSUFBQStDLEdBQWUzQyxXQUFBLEVBQUFtNUQsS0FBQSxFQUVmNXpELGVBUEFBLEVBUUE5QixnQkFBQTFFLEdBRUEzQyxFQUFBLEVBQUFBLENBQUF3RCxFQUFBK0MsR0FFQS9DLEVBQUF3NUQsU0FBQTc4RCxFQUFBRCxRQUFBc0QsRUFBQXc1RCwwQkNqQkE5OEQsRUFBQUMsRUFBQUQsUUFBQUYsRUFBQSxFQUFBQSxFQUFBLElBS0E2RSxNQUFBMUUsRUFBQUMsRUFBQSxtTEFBd00sSUFBVW1RLFFBQUEsRUFBQXBNLFNBQUEsaUZBQUE4NEQsU0FBQUMsU0FBQSx3RUFBK0xDLEtBQUEsV0FBQVUsZ0JBQUEsMEpBQWdNeDVELFdBQUEsTUFHamxCbkUsRUFBQTg4RCxRQUNBYyxLQUFBLDBHQ1JBLElBQUFuakMsRUFBQTM2QixFQUFBLGNBQ0FBLEVBQUEsSUFDQSs3QixFQUFBLzdCLEVBQUEsT0FDQUEsRUFBQSxTQUNBQSxFQUFBLEtBQ0FpK0QsRUFBQWorRCxFQUFBLElBQ0FnZSxFQUFBaGUsRUFBQSxPQUVBQSxFQUFBLDhEQUdNaTdELFVBQWtCM3ZDLFlBUXRCNVosb0JBQ0VyTyxLQUFLK0ksTUFBTThSLE9BR2J6USxTQUNFLE1BQU1zTCxXQUFFQSxFQUFGcUYsSUFBY0EsR0FBUS9hLEtBQUsrSSxNQUVqQyxPQUNFZ3ZCLEVBQUFDLFFBQUFqekIsY0FBQSxPQUFLaW9CLFVBQVcvcEIsVUFBTzQzRCxXQUNyQjlpQyxFQUFBQyxRQUFBanpCLGNBQUEsaUNBQ0FnekIsRUFBQUMsUUFBQWp6QixjQUFBLFdBQVNpb0IsVUFBVSxvQkFDakIrSyxFQUFBQyxRQUFBanpCLGNBQUMrMUQsRUFBQTlpQyxTQUFhSCxXQUFZOWMsS0FFNUJnZCxFQUFBQyxRQUFBanpCLGNBQUEsZ0JBR0FnekIsRUFBQUMsUUFBQWp6QixjQUFBLFdBQ0MyUSxHQUNDcWlCLEVBQUFDLFFBQUFqekIsY0FBQSxXQUFTaW9CLFVBQVUsb0JBQ2pCK0ssRUFBQUMsUUFBQWp6QixjQUFBLFdBQ0VnekIsRUFBQUMsUUFBQWp6QixjQUFBLCtCQUNBZ3pCLEVBQUFDLFFBQUFqekIsY0FBQ2cyRCxFQUFBL2lDLFNBQ0N0aUIsV0FBWUEsRUFDWnNsRCxTQUFVcjFELGVBL0JwQml5RCxFQUVHcHRELFdBQ0xrTCxXQUFZMGlCLFVBQVV2TixNQUN0QjlQLElBQUtxZCxVQUFVcHdCLEtBQUtDLFdBQ3BCNFMsS0FBTXVkLFVBQVVwd0IsS0FBS0MsdUJBb0NWLEVBQUF5d0IsRUFBQTZnQyxTQUNiM3JELEtBQ0U4SCxZQUFZLEVBQUFpRixFQUFBM0UsZUFBY3BJLE1BRTFCaU4sWUFBTUUsV0FKSyxDQUtiNjhDLHNHQzFERixJQUFBdGdDLEVBQUEzNkIsRUFBQSxjQUNBQSxFQUFBLFFBQ0FBLEVBQUEsOERBR2FzK0QsVUFBbUJoekMsWUFNOUI3ZCxTQUNFLE1BQU1zTCxXQUFFQSxHQUFlMVYsS0FBSytJLE1BQzVCLE9BQUkyTSxFQUdGcWlCLEVBQUFDLFFBQUFqekIsY0FBQSxlQUNFZ3pCLEVBQUFDLFFBQUFqekIsY0FBQSxVQUNHMlEsRUFBV3pWLElBQUk2VixHQUNkaWlCLEVBQUFDLFFBQUFqekIsY0FBQ20yRCxFQUFBbGpDLFNBQ0MxNUIsSUFBS3dYLEVBQVN4WCxJQUNkd1gsU0FBVUEsT0FSRyxRQVJkbWxELGVBRUp6d0QsV0FDTGtMLFdBQVkwaUIsVUFBVXZOLGlCQXNCWG93QyxtR0M3QmYsSUFBQTNqQyxFQUFBMzZCLEVBQUEsY0FDQUEsRUFBQSxJQUNBKzdCLEVBQUEvN0IsRUFBQSxPQUNBQSxFQUFBLFNBQ0FBLEVBQUEsS0FDQWkrRCxFQUFBaitELEVBQUEsNkRBRWF3K0QsVUFBaUJsekMsWUFBVTNMLGVBQUE5YyxHQUFBLElBQUE0bkIsRUFBQSxPQUFBQSxFQUFBb1EsU0FBQWg0QixHQUFBUSxLQUV0QzROLE9BQ0U2cEIsU0FBUyxHQUgyQnozQixLQVd0Q283RCxXQUFhLE1BQ1hwN0QsS0FBS29QLFVBQVdxb0IsU0FBUyxNQVpXejNCLEtBZXRDcTdELGVBQWlCdmxELEtBQ2YsTUFBTW5RLE9BQUVBLEdBQVczRixLQUFLK0ksTUFDeEJwRCxFQUFPbVEsR0FDUDlWLEtBQUtzN0Qsa0JBbEIrQnQ3RCxLQXFCdENzN0QsY0FBZ0IsTUFDZHQ3RCxLQUFLb1AsVUFBV3FvQixTQUFTLE1BdEJXclEsRUF5QnRDaGQsU0FDRSxNQUFNcXRCLFFBQUVBLEdBQVl6M0IsS0FBSzROLE9BQ25Ca0ksU0FBRUEsR0FBYTlWLEtBQUsrSSxNQUUxQixPQUNFZ3ZCLEVBQUFDLFFBQUFqekIsY0FBQSxVQUNHMHlCLEVBQ0dNLEVBQUFDLFFBQUFqekIsY0FBQysxRCxFQUFBOWlDLFNBQ0RsaUIsU0FBVUEsRUFDVitoQixXQUFZNzNCLEtBQUtxN0QsZUFDakJ2akMsU0FBVTkzQixLQUFLczdELGdCQUVmdmpDLEVBQUFDLFFBQUFqekIsY0FBQ3cyRCxFQUFBdmpDLFNBQ0RsaUIsU0FBVUEsRUFDVjBsRCxPQUFReDdELEtBQUtvN0QsV0FDYkssU0FBVXo3RCxLQUFLMDdELG1CQXhDZFAsYUFNSjN3RCxXQUNMc0wsU0FBVXNpQixVQUFVMzVCLE9BQU93SixXQUMzQnRDLE9BQVF5eUIsVUFBVXB3QixLQUFLQyx1QkF3Q1osRUFBQXl3QixFQUFBNmdDLFNBQ2IsTUFDRTV6RCxpQkFGVyxDQUdidzFELDJHQzNERixJQUFBN2pDLEVBQUEzNkIsRUFBQSxjQUNBQSxFQUFBLElBQ0ErN0IsRUFBQS83QixFQUFBLEdBQ0FpK0QsRUFBQWorRCxFQUFBLFFBQ0FBLEVBQUEsU0FFQUEsRUFBQSw4REFHYWcvRCxVQUF3QjF6QyxZQVFuQzdkLFNBQ0UsTUFBTTBMLFNBQUVBLEVBQUYwbEQsT0FBWUEsRUFBWjUxRCxPQUFvQkEsR0FBVzVGLEtBQUsrSSxNQUUxQyxPQUNFZ3ZCLEVBQUFDLFFBQUFqekIsY0FBQSxPQUFLaW9CLFVBQVcvcEIsVUFBTzI0RCxpQkFDckI3akMsRUFBQUMsUUFBQWp6QixjQUFBLFdBQVNpb0IsVUFBVSxpQkFJakIrSyxFQUFBQyxRQUFBanpCLGNBQUEsZUFDRWd6QixFQUFBQyxRQUFBanpCLGNBQUEsVUFDRWd6QixFQUFBQyxRQUFBanpCLGNBQUEsY0FBUytRLEVBQVN4WSxLQUFsQixPQUE0QndZLEVBQVN3aUIsUUFDckNQLEVBQUFDLFFBQUFqekIsY0FBQSxVQUFRekgsS0FBSyxPQUFPeXNCLFFBQVN5eEMsR0FBN0IsS0FDQXpqQyxFQUFBQyxRQUFBanpCLGNBQUEsVUFBUXpILEtBQUssU0FBU3lzQixRQUFTLElBQU1ua0IsRUFBT2tRLEVBQVN4WCxNQUFyRCxTQVNOeTVCLEVBQUFDLFFBQUFqekIsY0FBQSxlQUNFZ3pCLEVBQUFDLFFBQUFqekIsY0FBQzgyRCxFQUFBN2pDLFNBQVN2YyxXQUFZM0YsRUFBU3hYLFdBL0I1QnE5RCxvQkFFSm54RCxXQUNMc0wsU0FBVXNpQixVQUFVMzVCLE9BQU93SixXQUMzQnV6RCxPQUFRcGpDLFVBQVVwd0IsS0FBS0MsV0FDdkJyQyxPQUFRd3lCLFVBQVVwd0IsS0FBS0MsdUJBaUNaLEVBQUF5d0IsRUFBQTZnQyxTQUNiLE1BQ0UzekQsaUJBRlcsQ0FHYisxRCxpQ0NsREYsU0FBU0csRUFBUXYwQyxFQUFLcmtCLEtBQWNvVixHQUdsQyxPQUZHQSxJQUFNcFYsRUFBUTZ6RCxLQUFPcjJELEtBQUtDLFVBQVUyWCxJQUVoQ3lqRCxNQUFNeDBDLEVBQUtya0IsR0FDZm9ZLEtBQUswYixJQUFhQSxFQUFTL1QsR0FBSStULEVBQVNnbEMsU0FDeEMxZ0QsS0FBSyxFQUFFMkgsRUFBSSs0QyxNQUNWLEdBQUcvNEMsRUFBSSxPQUFPKzRDLEVBQ2QsTUFBTUEsRUFBS2g3QyxTQUFXZzdDLEVBQUszOEQsT0FBUzI4RCxFQUFLQyxRQUFVRCxxREFJekQsTUFBTUUsR0FDSkMsZUFBZ0Isb0JBR0x2K0QsTUFBTTJwQixJQUFPdTBDLEVBQVF2MEMsSUFDckI0UCxPQUFPLEVBQUM1UCxFQUFLalAsSUFBU3dqRCxFQUFRdjBDLEdBQU82MEMsT0FBUSxPQUFRRixXQUFXNWpELElBQ2hFOGUsTUFBTSxFQUFDN1AsRUFBS2pQLElBQVN3akQsRUFBUXYwQyxHQUFPNjBDLE9BQVEsTUFBT0YsV0FBVzVqRCxJQUM5RCtlLE1BQU0sRUFBQzlQLEVBQUtqUCxJQUFTd2pELEVBQVF2MEMsR0FBTzYwQyxPQUFRLFVBQVk5akQsbUZDbEJyRSxJQUFBZ2YsRUFBQTM2QixFQUFBLGNBQ0FBLEVBQUEsSUFDQSs3QixFQUFBLzdCLEVBQUEsR0FDQTAvRCxFQUFBMS9ELEVBQUEsSUFDQTRlLEVBQUE1ZSxFQUFBLFFBQ0FBLEVBQUEsU0FDQUEsRUFBQSxTQUVBQSxFQUFBLDhEQUVNMi9ELFVBQWlCcjBDLFlBQVUzTCxlQUFBOWMsR0FBQSxJQUFBNG5CLEVBQUEsT0FBQUEsRUFBQW9RLFNBQUFoNEIsR0FBQVEsS0FRL0J1OEQsaUJBQW1CN2dELEtBQ2pCLE1BQU1GLFdBQUVBLEVBQUZDLFdBQWNBLEdBQWV6YixLQUFLK0ksTUFDeEN5UyxFQUFXQyxFQUFZQyxLQVZNMEwsRUFhL0JoZCxTQUNFLE1BQU1pUyxTQUFFQSxFQUFGWixXQUFZQSxHQUFlemIsS0FBSytJLE1BQ3RDLE9BQUlzVCxFQUdGMGIsRUFBQUMsUUFBQWp6QixjQUFBLE9BQUtpb0IsVUFBVy9wQixVQUFPb1osVUFDckIwYixFQUFBQyxRQUFBanpCLGNBQUEsZUFDRWd6QixFQUFBQyxRQUFBanpCLGNBQUEseUJBQ0FnekIsRUFBQUMsUUFBQWp6QixjQUFDeTNELEVBQUF4a0MsU0FBWUgsV0FBWTczQixLQUFLdThELGlCQUFrQjlnRCxXQUFZQSxLQUk5RHNjLEVBQUFDLFFBQUFqekIsY0FBQSxXQUFTaW9CLFVBQVUsaUJBQ2pCK0ssRUFBQUMsUUFBQWp6QixjQUFBLHVCQUdFc1gsRUFBU3BjLElBQUl5YixHQUNKcWMsRUFBQUMsUUFBQWp6QixjQUFDMDNELEVBQUF6a0MsU0FBUTE1QixJQUFLb2QsRUFBUXBkLElBQUtvZCxRQUFTQSxPQWZoQyxNQWZuQjRnRCxFQUVHOXhELFdBQ0w2UixTQUFVK2IsVUFBVXZOLE1BQ3BCcFAsV0FBWTJjLFVBQVUzUCxPQUN0QmpOLFdBQVk0YyxVQUFVcHdCLGlCQWtDWCxFQUFBMHdCLEVBQUE2Z0MsU0FDYixDQUFDM3JELEdBQVM2TixrQkFDUlksVUFBVSxFQUFBZCxFQUFBbUIsdUJBQXNCOU8sRUFBTzZOLE1BRXZDRCx5QkFKVyxDQUtiOGdELGtGQ3RERixJQUFBaGxDLEVBQUEzNkIsRUFBQSxjQUNBQSxFQUFBLElBQ0ErN0IsRUFBQS83QixFQUFBLE9BQ0FBLEVBQUEsU0FDQUEsRUFBQSxLQUNBMC9ELEVBQUExL0QsRUFBQSxRQUVBQSxFQUFBLDhEQUVNKy9ELFVBQWdCejBDLFlBQVUzTCxlQUFBOWMsR0FBQSxJQUFBNG5CLEVBQUEsT0FBQUEsRUFBQW9RLFNBQUFoNEIsR0FBQVEsS0FFOUI0TixPQUNFNnBCLFNBQVMsR0FIbUJ6M0IsS0FXOUJvN0QsV0FBYSxNQUNYcDdELEtBQUtvUCxVQUFXcW9CLFNBQVMsTUFaR3ozQixLQWU5QnE3RCxlQUFpQjMvQyxLQUNmLE1BQU1HLGNBQUVBLEdBQWtCN2IsS0FBSytJLE1BQy9COFMsRUFBY0gsR0FDZDFiLEtBQUtzN0Qsa0JBbEJ1QnQ3RCxLQXFCOUJzN0QsY0FBZ0IsTUFDZHQ3RCxLQUFLb1AsVUFBV3FvQixTQUFTLE1BdEJHclEsRUF3QjlCaGQsU0FDRSxNQUFNcXRCLFFBQUVBLEdBQVl6M0IsS0FBSzROLE9BQ25COE4sUUFBRUEsR0FBWTFiLEtBQUsrSSxNQUN6QixPQUNFZ3ZCLEVBQUFDLFFBQUFqekIsY0FBQSxXQUFTaW9CLFVBQVcvcEIsVUFBT3lZLFNBQ3pCcWMsRUFBQUMsUUFBQWp6QixjQUFBLFVBQ0cweUIsRUFDR00sRUFBQUMsUUFBQWp6QixjQUFDeTNELEVBQUF4a0MsU0FDRHRjLFFBQVNBLEVBQ1RELFdBQVlDLEVBQVFELFdBQ3BCb2MsV0FBWTczQixLQUFLcTdELGVBQ2pCdmpDLFNBQVU5M0IsS0FBS3M3RCxnQkFHakJ2akMsRUFBQUMsUUFBQWp6QixjQUFDNDNELEVBQUEza0MsU0FDQ3RjLFFBQVNBLEVBQ1Q4L0MsT0FBUXg3RCxLQUFLbzdELGdCQXhDckJzQixFQU1HbHlELFdBQ0xrUixRQUFTMGMsVUFBVTM1QixPQUNuQm9kLGNBQWV1YyxVQUFVcHdCLGlCQXlDZCxFQUFBMHdCLEVBQUE2Z0MsU0FDYixNQUNFMTlDLCtCQUZXLENBR2I2Z0Qsa0ZDN0RGLElBQUFwbEMsRUFBQTM2QixFQUFBLGNBQ0FBLEVBQUEsSUFDQSs3QixFQUFBLzdCLEVBQUEsR0FDQTAvRCxFQUFBMS9ELEVBQUEsUUFFQUEsRUFBQSw4REFFTWlnRSxVQUF1QjMwQyxZQVEzQjdkLFNBQ0UsTUFBTXNSLFFBQUVBLEVBQUY4L0MsT0FBV0EsRUFBWHgvQyxjQUFtQkEsR0FBa0JoYyxLQUFLK0ksTUFFaEQsT0FDRWd2QixFQUFBQyxRQUFBanpCLGNBQUEsV0FBU2lvQixVQUFXL3BCLFVBQU80NUQsZ0JBQ3pCOWtDLEVBQUFDLFFBQUFqekIsY0FBQSxlQUNFZ3pCLEVBQUFDLFFBQUFqekIsY0FBQSxVQUNHMlcsRUFBUXBlLEtBRFgsT0FDcUJvZSxFQUFRZ2MsTUFDM0JLLEVBQUFDLFFBQUFqekIsY0FBQSxVQUFRekgsS0FBSyxPQUFPeXNCLFFBQVN5eEMsR0FBN0IsS0FDQXpqQyxFQUFBQyxRQUFBanpCLGNBQUEsVUFBUXpILEtBQUssU0FBU3lzQixRQUFTLElBQU0vTixFQUFjTixJQUFuRCxVQWpCTmtoRCxFQUVHcHlELFdBQ0xrUixRQUFTMGMsVUFBVTM1QixPQUFPd0osV0FDMUJ1ekQsT0FBUXBqQyxVQUFVcHdCLEtBQUtDLFdBQ3ZCK1QsY0FBZW9jLFVBQVVwd0IsS0FBS0MsdUJBb0JuQixFQUFBeXdCLEVBQUE2Z0MsU0FDYixNQUNFdjlDLCtCQUZXLENBR2I0Z0Qsb0JDbENGLElBQUF6OEQsRUFBQXhELEVBQUEsSUFFQSxpQkFBQXdELFFBQUFyRCxFQUFBQyxFQUFBb0QsRUFBQSxNQU9BLElBQUErQyxHQUFlM0MsV0FBQSxFQUFBbTVELEtBQUEsRUFFZjV6RCxlQVBBQSxFQVFBOUIsZ0JBQUExRSxHQUVBM0MsRUFBQSxFQUFBQSxDQUFBd0QsRUFBQStDLEdBRUEvQyxFQUFBdzVELFNBQUE3OEQsRUFBQUQsUUFBQXNELEVBQUF3NUQsMEJDakJBOThELEVBQUFDLEVBQUFELFFBQUFGLEVBQUEsRUFBQUEsRUFBQSxJQUtBNkUsTUFBQTFFLEVBQUFDLEVBQUEsaU5BQXNPLElBQVVtUSxRQUFBLEVBQUFwTSxTQUFBLGdHQUFBODRELFNBQUFDLFNBQUEsdUZBQTZOQyxLQUFBLHFCQUFBVSxnQkFBQSx5TkFBeVF4NUQsV0FBQSxNQUd0dEJuRSxFQUFBODhELFFBQ0FrRCxlQUFBLDRDQ1JBLElBQUExOEQsRUFBQXhELEVBQUEsSUFFQSxpQkFBQXdELFFBQUFyRCxFQUFBQyxFQUFBb0QsRUFBQSxNQU9BLElBQUErQyxHQUFlM0MsV0FBQSxFQUFBbTVELEtBQUEsRUFFZjV6RCxlQVBBQSxFQVFBOUIsZ0JBQUExRSxHQUVBM0MsRUFBQSxFQUFBQSxDQUFBd0QsRUFBQStDLEdBRUEvQyxFQUFBdzVELFNBQUE3OEQsRUFBQUQsUUFBQXNELEVBQUF3NUQsMEJDakJBOThELEVBQUFDLEVBQUFELFFBQUFGLEVBQUEsRUFBQUEsRUFBQSxJQUtBNkUsTUFBQTFFLEVBQUFDLEVBQUEsd0pBQTZLLElBQVVtUSxRQUFBLEVBQUFwTSxTQUFBLDZGQUFBODRELFNBQUFDLFNBQUEsOERBQWlNQyxLQUFBLGtCQUFBVSxnQkFBQSxnSUFBNkt4NUQsV0FBQSxNQUdyaUJuRSxFQUFBODhELFFBQ0FtRCxZQUFBLDBDQ1JBLElBQUEzOEQsRUFBQXhELEVBQUEsSUFFQSxpQkFBQXdELFFBQUFyRCxFQUFBQyxFQUFBb0QsRUFBQSxNQU9BLElBQUErQyxHQUFlM0MsV0FBQSxFQUFBbTVELEtBQUEsRUFFZjV6RCxlQVBBQSxFQVFBOUIsZ0JBQUExRSxHQUVBM0MsRUFBQSxFQUFBQSxDQUFBd0QsRUFBQStDLEdBRUEvQyxFQUFBdzVELFNBQUE3OEQsRUFBQUQsUUFBQXNELEVBQUF3NUQsMEJDakJBOThELEVBQUFDLEVBQUFELFFBQUFGLEVBQUEsRUFBQUEsRUFBQSxJQUtBNkUsTUFBQTFFLEVBQUFDLEVBQUEsd0pBQTZLLElBQVVtUSxRQUFBLEVBQUFwTSxTQUFBLHlGQUFBODRELFNBQUFDLFNBQUEsOERBQTZMQyxLQUFBLGNBQUFVLGdCQUFBLDRIQUFxS3g1RCxXQUFBLE1BR3poQm5FLEVBQUE4OEQsUUFDQWorQyxRQUFBLDBDQ1JBLElBQUF2YixFQUFBeEQsRUFBQSxJQUVBLGlCQUFBd0QsUUFBQXJELEVBQUFDLEVBQUFvRCxFQUFBLE1BT0EsSUFBQStDLEdBQWUzQyxXQUFBLEVBQUFtNUQsS0FBQSxFQUVmNXpELGVBUEFBLEVBUUE5QixnQkFBQTFFLEdBRUEzQyxFQUFBLEVBQUFBLENBQUF3RCxFQUFBK0MsR0FFQS9DLEVBQUF3NUQsU0FBQTc4RCxFQUFBRCxRQUFBc0QsRUFBQXc1RCwwQkNqQkE5OEQsRUFBQUMsRUFBQUQsUUFBQUYsRUFBQSxFQUFBQSxFQUFBLElBS0E2RSxNQUFBMUUsRUFBQUMsRUFBQSxnSUFBcUosSUFBVW1RLFFBQUEsRUFBQXBNLFNBQUEsMEZBQUE4NEQsU0FBQUMsU0FBQSw4REFBK0xDLEtBQUEsZUFBQVUsZ0JBQUEsMEhBQW1LeDVELFdBQUEsTUFHamdCbkUsRUFBQTg4RCxRQUNBdDlDLFNBQUEsNENDUkEsSUFBQWxjLEVBQUF4RCxFQUFBLElBRUEsaUJBQUF3RCxRQUFBckQsRUFBQUMsRUFBQW9ELEVBQUEsTUFPQSxJQUFBK0MsR0FBZTNDLFdBQUEsRUFBQW01RCxLQUFBLEVBRWY1ekQsZUFQQUEsRUFRQTlCLGdCQUFBMUUsR0FFQTNDLEVBQUEsRUFBQUEsQ0FBQXdELEVBQUErQyxHQUVBL0MsRUFBQXc1RCxTQUFBNzhELEVBQUFELFFBQUFzRCxFQUFBdzVELDBCQ2pCQTk4RCxFQUFBQyxFQUFBRCxRQUFBRixFQUFBLEVBQUFBLEVBQUEsSUFLQTZFLE1BQUExRSxFQUFBQyxFQUFBLDRKQUFpTCxJQUFVbVEsUUFBQSxFQUFBcE0sU0FBQSxtR0FBQTg0RCxTQUFBQyxTQUFBLDREQUFxTUMsS0FBQSxzQkFBQVUsZ0JBQUEsb0lBQXFMeDVELFdBQUEsTUFHcmpCbkUsRUFBQTg4RCxRQUNBaUMsZ0JBQUEsNENDUkEsSUFBQXo3RCxFQUFBeEQsRUFBQSxJQUVBLGlCQUFBd0QsUUFBQXJELEVBQUFDLEVBQUFvRCxFQUFBLE1BT0EsSUFBQStDLEdBQWUzQyxXQUFBLEVBQUFtNUQsS0FBQSxFQUVmNXpELGVBUEFBLEVBUUE5QixnQkFBQTFFLEdBRUEzQyxFQUFBLEVBQUFBLENBQUF3RCxFQUFBK0MsR0FFQS9DLEVBQUF3NUQsU0FBQTc4RCxFQUFBRCxRQUFBc0QsRUFBQXc1RCwwQkNqQkE5OEQsRUFBQUMsRUFBQUQsUUFBQUYsRUFBQSxFQUFBQSxFQUFBLElBS0E2RSxNQUFBMUUsRUFBQUMsRUFBQSxvUUFBeVIsSUFBVW1RLFFBQUEsRUFBQXBNLFNBQUEsNkZBQUE4NEQsU0FBQUMsU0FBQSxtSEFBc1BDLEtBQUEsZ0JBQUFVLGdCQUFBLHNPQUFpUng1RCxXQUFBLE1BRzF5Qm5FLEVBQUE4OEQsUUFDQWtCLFVBQUEsNENDUkEsSUFBQTE2RCxFQUFBeEQsRUFBQSxJQUVBLGlCQUFBd0QsUUFBQXJELEVBQUFDLEVBQUFvRCxFQUFBLE1BT0EsSUFBQStDLEdBQWUzQyxXQUFBLEVBQUFtNUQsS0FBQSxFQUVmNXpELGVBUEFBLEVBUUE5QixnQkFBQTFFLEdBRUEzQyxFQUFBLEVBQUFBLENBQUF3RCxFQUFBK0MsR0FFQS9DLEVBQUF3NUQsU0FBQTc4RCxFQUFBRCxRQUFBc0QsRUFBQXc1RCwwQkNqQkE5OEQsRUFBQUMsRUFBQUQsUUFBQUYsRUFBQSxFQUFBQSxFQUFBLElBS0E2RSxNQUFBMUUsRUFBQUMsRUFBQSxxSEFBMEksSUFBVW1RLFFBQUEsRUFBQXBNLFNBQUEsZ0ZBQUE4NEQsU0FBQUMsU0FBQSw4Q0FBb0tDLEtBQUEsVUFBQVUsZ0JBQUEscUZBQTBIeDVELFdBQUEsTUFHbGJuRSxFQUFBODhELFFBQ0FsQyxJQUFBLHdHQ1RBLElBQUFzRixFQUFBcGdFLEVBQUEsUUFDQUEsRUFBQSxTQUNBQSxFQUFBLEtBQ0F5OEQsRUFBQXo4RCxFQUFBLEdBQ0FnZSxFQUFBaGUsRUFBQSxHQUNBNGUsRUFBQTVlLEVBQUEsdURBRUEsTUFBTXFnRSxHQUFjLEVBQUFELEVBQUE1cEMsa0JBQ2xCemQsd0JBQ0F5Ryx3Q0FDQTljLGNBQ0FpVyxvQkFHSTJuRCxFQUFtQmo3RCxPQUFPazdELHNDQUF3QzlvQyxVQUVsRTNxQixHQUFRLEVBQUFzekQsRUFBQS9xQyxhQUNaZ3JDLEVBQ0FDLEdBQ0UsRUFBQUYsRUFBQXpvQyxpQkFDRTZvQyxVQUNBQyx1QkFLUzN6RCxnQ0MxQmYsU0FBQTR6RCxFQUFBQyxHQUNBLGdCQUFBbnpELEdBQ0EsSUFBQTVCLEVBQUE0QixFQUFBNUIsU0FDQUMsRUFBQTJCLEVBQUEzQixTQUNBLGdCQUFBZ0QsR0FDQSxnQkFBQXdVLEdBQ0EseUJBQUFBLEVBQ0FBLEVBQUF6WCxFQUFBQyxFQUFBODBELEdBR0E5eEQsRUFBQXdVLE1BVkFyakIsRUFBQWtCLEVBQUFvM0IsR0FnQkEsSUFBQWtvQyxFQUFBRSxJQUNBRixFQUFBSSxrQkFBQUYsRUFFQXBvQyxFQUFBLHlGQ25CQSxJQUFBbWtDLEVBQUF6OEQsRUFBQSxhQUllLEdBQUc0TCxjQUFlaUQsR0FBUXdVLElBRXZDLE1BQU0vYSxLQUFFQSxFQUFGaVEsUUFBUUEsR0FBWThLLEVBQzFCLE1BTGdCNFYsSUFBT0EsR0FBMkIsbUJBQWJBLEVBQUl0YSxLQUtyQ2tpRCxDQUFVdG9ELElBRWQzTSxHQUFXdEQsS0FBTW1RLGVBRVZGLEVBQ0pvRyxLQUNDelYsSUFDRTBDLEdBQVd0RCxLQUFNc1EsYUFFVmhOLEdBQ0x0RCxPQUNBaVEsUUFBU3JQLEtBR2I0dkIsSUFHRSxNQUZBbHRCLEdBQVd0RCxLQUFNc1EsYUFDakJoTixHQUFXdEQsS0FBTWtRLFFBQU9ELFFBQVN1Z0IsSUFDM0JBLEtBakJtQmpxQixFQUFLd1Usc0JDTnRDLElBQUE3ZixFQUFBeEQsRUFBQSxJQUVBLGlCQUFBd0QsUUFBQXJELEVBQUFDLEVBQUFvRCxFQUFBLE1BT0EsSUFBQStDLEdBQWUzQyxXQUFBLEVBQUFtNUQsS0FBQSxFQUVmNXpELGVBUEFBLEVBUUE5QixnQkFBQTFFLEdBRUEzQyxFQUFBLEVBQUFBLENBQUF3RCxFQUFBK0MsR0FFQS9DLEVBQUF3NUQsU0FBQTc4RCxFQUFBRCxRQUFBc0QsRUFBQXc1RCwwQkNqQkE3OEQsRUFBQUQsUUFBQUYsRUFBQSxFQUFBQSxFQUFBLElBS0E2RSxNQUFBMUUsRUFBQUMsRUFBQSwyMUJBQWszQixJQUFVbVEsUUFBQSxFQUFBcE0sU0FBQSx5RUFBQTg0RCxTQUFBQyxTQUFBLHNjQUFxakJDLEtBQUEsV0FBQVUsZ0JBQUEsNDFCQUFvNEJ4NUQsV0FBQSIsImZpbGUiOiJidW5kbGUuNDg2ZWUyNWIzNDZhZjg2YTA0ZjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDI4KTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHBhcmVudCkge1xuICBpZiAocGFyZW50KXtcbiAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQsIHBhcmVudCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlLCB0YXJnZXQpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGlmKG9wdGlvbnMuYXR0cnMubm9uY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBub25jZSA9IGdldE5vbmNlKCk7XG5cdFx0aWYgKG5vbmNlKSB7XG5cdFx0XHRvcHRpb25zLmF0dHJzLm5vbmNlID0gbm9uY2U7XG5cdFx0fVxuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9uY2UoKSB7XG5cdGlmICh0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gX193ZWJwYWNrX25vbmNlX187XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgdmFyIHN1YnNjcmlwdGlvblNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgdHJ5U3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB0cnlVbnN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbm90aWZ5TmVzdGVkU3ViczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNTdWJzY3JpYmVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTtcblxuZXhwb3J0IHZhciBzdG9yZVNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBDaGlsZHJlbiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBzdG9yZVNoYXBlLCBzdWJzY3JpcHRpb25TaGFwZSB9IGZyb20gJy4uL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi91dGlscy93YXJuaW5nJztcblxudmFyIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gZmFsc2U7XG5mdW5jdGlvbiB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpIHtcbiAgaWYgKGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gdHJ1ZTtcblxuICB3YXJuaW5nKCc8UHJvdmlkZXI+IGRvZXMgbm90IHN1cHBvcnQgY2hhbmdpbmcgYHN0b3JlYCBvbiB0aGUgZmx5LiAnICsgJ0l0IGlzIG1vc3QgbGlrZWx5IHRoYXQgeW91IHNlZSB0aGlzIGVycm9yIGJlY2F1c2UgeW91IHVwZGF0ZWQgdG8gJyArICdSZWR1eCAyLnggYW5kIFJlYWN0IFJlZHV4IDIueCB3aGljaCBubyBsb25nZXIgaG90IHJlbG9hZCByZWR1Y2VycyAnICsgJ2F1dG9tYXRpY2FsbHkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yZWR1eC9yZWxlYXNlcy8nICsgJ3RhZy92Mi4wLjAgZm9yIHRoZSBtaWdyYXRpb24gaW5zdHJ1Y3Rpb25zLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvdmlkZXIoKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXg7XG5cbiAgdmFyIHN0b3JlS2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnc3RvcmUnO1xuICB2YXIgc3ViS2V5ID0gYXJndW1lbnRzWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb25LZXkgPSBzdWJLZXkgfHwgc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcblxuICB2YXIgUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbc3RvcmVLZXldID0gdGhpc1tzdG9yZUtleV0sIF9yZWZbc3Vic2NyaXB0aW9uS2V5XSA9IG51bGwsIF9yZWY7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvdmlkZXIpO1xuXG4gICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgX3RoaXNbc3RvcmVLZXldID0gcHJvcHMuc3RvcmU7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBDaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXNbc3RvcmVLZXldICE9PSBuZXh0UHJvcHMuc3RvcmUpIHtcbiAgICAgICAgd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRcbiAgfTtcbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdG9yZUtleV0gPSBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgcmV0dXJuIFByb3ZpZGVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQcm92aWRlcigpOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBDTEVBUkVEID0gbnVsbDtcbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIC8vIHRoZSBjdXJyZW50L25leHQgcGF0dGVybiBpcyBjb3BpZWQgZnJvbSByZWR1eCdzIGNyZWF0ZVN0b3JlIGNvZGUuXG4gIC8vIFRPRE86IHJlZmFjdG9yK2V4cG9zZSB0aGF0IGNvZGUgdG8gYmUgcmV1c2FibGUgaGVyZT9cbiAgdmFyIGN1cnJlbnQgPSBbXTtcbiAgdmFyIG5leHQgPSBbXTtcblxuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIG5leHQgPSBDTEVBUkVEO1xuICAgICAgY3VycmVudCA9IENMRUFSRUQ7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50ID0gbmV4dDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpc3RlbmVyc1tpXSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgbmV4dC5wdXNoKGxpc3RlbmVyKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBjdXJyZW50ID09PSBDTEVBUkVEKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgICBuZXh0LnNwbGljZShuZXh0LmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yiwgb25TdGF0ZUNoYW5nZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJzY3JpcHRpb24pO1xuXG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMub25TdGF0ZUNoYW5nZSA9IG9uU3RhdGVDaGFuZ2U7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICB9XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5vblN0YXRlQ2hhbmdlKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMub25TdGF0ZUNoYW5nZSk7XG5cbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuXG52YXIgaG90UmVsb2FkaW5nVmVyc2lvbiA9IDA7XG52YXIgZHVtbXlTdGF0ZSA9IHt9O1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5mdW5jdGlvbiBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3Rvciwgc3RvcmUpIHtcbiAgLy8gd3JhcCB0aGUgc2VsZWN0b3IgaW4gYW4gb2JqZWN0IHRoYXQgdHJhY2tzIGl0cyByZXN1bHRzIGJldHdlZW4gcnVucy5cbiAgdmFyIHNlbGVjdG9yID0ge1xuICAgIHJ1bjogZnVuY3Rpb24gcnVuQ29tcG9uZW50U2VsZWN0b3IocHJvcHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXh0UHJvcHMgPSBzb3VyY2VTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCBwcm9wcyk7XG4gICAgICAgIGlmIChuZXh0UHJvcHMgIT09IHNlbGVjdG9yLnByb3BzIHx8IHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICBzZWxlY3Rvci5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgICAgICBzZWxlY3Rvci5lcnJvciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgIHNlbGVjdG9yLmVycm9yID0gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnkpIHtcbiAgdmFyIF9jb250ZXh0VHlwZXMsIF9jaGlsZENvbnRleHRUeXBlcztcblxuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICBfcmVmJGdldERpc3BsYXlOYW1lID0gX3JlZi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZiRnZXREaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gJ0Nvbm5lY3RBZHZhbmNlZCgnICsgbmFtZSArICcpJztcbiAgfSA6IF9yZWYkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmJG1ldGhvZE5hbWUgPSBfcmVmLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZiRtZXRob2ROYW1lID09PSB1bmRlZmluZWQgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYkcmVuZGVyQ291bnRQcm9wID0gX3JlZi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmJHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX3JlZiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmJHNob3VsZEhhbmRsZVN0YXQgPSBfcmVmLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCxcbiAgICAgIF9yZWYkc3RvcmVLZXkgPSBfcmVmLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmJHN0b3JlS2V5ID09PSB1bmRlZmluZWQgPyAnc3RvcmUnIDogX3JlZiRzdG9yZUtleSxcbiAgICAgIF9yZWYkd2l0aFJlZiA9IF9yZWYud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmJHdpdGhSZWYgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiR3aXRoUmVmLFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydnZXREaXNwbGF5TmFtZScsICdtZXRob2ROYW1lJywgJ3JlbmRlckNvdW50UHJvcCcsICdzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMnLCAnc3RvcmVLZXknLCAnd2l0aFJlZiddKTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcbiAgdmFyIHZlcnNpb24gPSBob3RSZWxvYWRpbmdWZXJzaW9uKys7XG5cbiAgdmFyIGNvbnRleHRUeXBlcyA9IChfY29udGV4dFR5cGVzID0ge30sIF9jb250ZXh0VHlwZXNbc3RvcmVLZXldID0gc3RvcmVTaGFwZSwgX2NvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jb250ZXh0VHlwZXMpO1xuICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSAoX2NoaWxkQ29udGV4dFR5cGVzID0ge30sIF9jaGlsZENvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jaGlsZENvbnRleHRUeXBlcyk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaW52YXJpYW50KHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ID09ICdmdW5jdGlvbicsICdZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSAnICsgKG1ldGhvZE5hbWUgKyAnLiBJbnN0ZWFkIHJlY2VpdmVkICcgKyBKU09OLnN0cmluZ2lmeShXcmFwcGVkQ29tcG9uZW50KSkpO1xuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG5cbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICB3aXRoUmVmOiB3aXRoUmVmLFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIENvbm5lY3QgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgX2luaGVyaXRzKENvbm5lY3QsIF9Db21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBDb25uZWN0KHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgICBfdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgX3RoaXMucmVuZGVyQ291bnQgPSAwO1xuICAgICAgICBfdGhpcy5zdG9yZSA9IHByb3BzW3N0b3JlS2V5XSB8fCBjb250ZXh0W3N0b3JlS2V5XTtcbiAgICAgICAgX3RoaXMucHJvcHNNb2RlID0gQm9vbGVhbihwcm9wc1tzdG9yZUtleV0pO1xuICAgICAgICBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UgPSBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UuYmluZChfdGhpcyk7XG5cbiAgICAgICAgaW52YXJpYW50KF90aGlzLnN0b3JlLCAnQ291bGQgbm90IGZpbmQgXCInICsgc3RvcmVLZXkgKyAnXCIgaW4gZWl0aGVyIHRoZSBjb250ZXh0IG9yIHByb3BzIG9mICcgKyAoJ1wiJyArIGRpc3BsYXlOYW1lICsgJ1wiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCAnKSArICgnb3IgZXhwbGljaXRseSBwYXNzIFwiJyArIHN0b3JlS2V5ICsgJ1wiIGFzIGEgcHJvcCB0byBcIicgKyBkaXNwbGF5TmFtZSArICdcIi4nKSk7XG5cbiAgICAgICAgX3RoaXMuaW5pdFNlbGVjdG9yKCk7XG4gICAgICAgIF90aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICAgIHZhciBfcmVmMjtcblxuICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCByZWNlaXZlZCBzdG9yZSBmcm9tIHByb3BzLCBpdHMgc3Vic2NyaXB0aW9uIHNob3VsZCBiZSB0cmFuc3BhcmVudFxuICAgICAgICAvLyB0byBhbnkgZGVzY2VuZGFudHMgcmVjZWl2aW5nIHN0b3JlK3N1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQ7IGl0IHBhc3NlcyBhbG9uZ1xuICAgICAgICAvLyBzdWJzY3JpcHRpb24gcGFzc2VkIHRvIGl0LiBPdGhlcndpc2UsIGl0IHNoYWRvd3MgdGhlIHBhcmVudCBzdWJzY3JpcHRpb24sIHdoaWNoIGFsbG93c1xuICAgICAgICAvLyBDb25uZWN0IHRvIGNvbnRyb2wgb3JkZXJpbmcgb2Ygbm90aWZpY2F0aW9ucyB0byBmbG93IHRvcC1kb3duLlxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5wcm9wc01vZGUgPyBudWxsIDogdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiBfcmVmMiA9IHt9LCBfcmVmMltzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uIHx8IHRoaXMuY29udGV4dFtzdWJzY3JpcHRpb25LZXldLCBfcmVmMjtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47XG5cbiAgICAgICAgLy8gY29tcG9uZW50V2lsbE1vdW50IGZpcmVzIGR1cmluZyBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcsIGJ1dCBjb21wb25lbnREaWRNb3VudCBhbmRcbiAgICAgICAgLy8gY29tcG9uZW50V2lsbFVubW91bnQgZG8gbm90LiBCZWNhdXNlIG9mIHRoaXMsIHRyeVN1YnNjcmliZSBoYXBwZW5zIGR1cmluZyAuLi5kaWRNb3VudC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB1bnN1YnNjcmlwdGlvbiB3b3VsZCBuZXZlciB0YWtlIHBsYWNlIGR1cmluZyBTU1IsIGNhdXNpbmcgYSBtZW1vcnkgbGVhay5cbiAgICAgICAgLy8gVG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIGEgY2hpbGQgY29tcG9uZW50IG1heSBoYXZlIHRyaWdnZXJlZCBhIHN0YXRlIGNoYW5nZSBieVxuICAgICAgICAvLyBkaXNwYXRjaGluZyBhbiBhY3Rpb24gaW4gaXRzIGNvbXBvbmVudFdpbGxNb3VudCwgd2UgaGF2ZSB0byByZS1ydW4gdGhlIHNlbGVjdCBhbmQgbWF5YmVcbiAgICAgICAgLy8gcmUtcmVuZGVyLlxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKG5leHRQcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSBub29wO1xuICAgICAgICB0aGlzLnN0b3JlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4gPSBub29wO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuZ2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0V3JhcHBlZEluc3RhbmNlKCkge1xuICAgICAgICBpbnZhcmlhbnQod2l0aFJlZiwgJ1RvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgeW91IG5lZWQgdG8gc3BlY2lmeSAnICsgKCd7IHdpdGhSZWY6IHRydWUgfSBpbiB0aGUgb3B0aW9ucyBhcmd1bWVudCBvZiB0aGUgJyArIG1ldGhvZE5hbWUgKyAnKCkgY2FsbC4nKSk7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZWRJbnN0YW5jZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnNldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIHNldFdyYXBwZWRJbnN0YW5jZShyZWYpIHtcbiAgICAgICAgdGhpcy53cmFwcGVkSW5zdGFuY2UgPSByZWY7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U2VsZWN0b3IgPSBmdW5jdGlvbiBpbml0U2VsZWN0b3IoKSB7XG4gICAgICAgIHZhciBzb3VyY2VTZWxlY3RvciA9IHNlbGVjdG9yRmFjdG9yeSh0aGlzLnN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IG1ha2VTZWxlY3RvclN0YXRlZnVsKHNvdXJjZVNlbGVjdG9yLCB0aGlzLnN0b3JlKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gaW5pdFN1YnNjcmlwdGlvbigpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjtcblxuICAgICAgICAvLyBwYXJlbnRTdWIncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cbiAgICAgICAgdmFyIHBhcmVudFN1YiA9ICh0aGlzLnByb3BzTW9kZSA/IHRoaXMucHJvcHMgOiB0aGlzLmNvbnRleHQpW3N1YnNjcmlwdGlvbktleV07XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLnN0b3JlLCBwYXJlbnRTdWIsIHRoaXMub25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyAgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgdGhpcy5zdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBBblxuICAgICAgICAvLyBleHRyYSBudWxsIGNoZWNrIGV2ZXJ5IGNoYW5nZSBjYW4gYmUgYXZvaWRlZCBieSBjb3B5aW5nIHRoZSBtZXRob2Qgb250byBgdGhpc2AgYW5kIHRoZW5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGl0IHdpdGggYSBuby1vcCBvbiB1bm1vdW50LiBUaGlzIGNhbiBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzXG4gICAgICAgIC8vIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVycyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlXG4gICAgICAgIC8vIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IHRoaXMuc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZCh0aGlzLnN1YnNjcmlwdGlvbik7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5vblN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gb25TdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdGhpcy5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGU7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShkdW1teVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICAvLyBgY29tcG9uZW50RGlkVXBkYXRlYCBpcyBjb25kaXRpb25hbGx5IGltcGxlbWVudGVkIHdoZW4gYG9uU3RhdGVDaGFuZ2VgIGRldGVybWluZXMgaXRcbiAgICAgICAgLy8gbmVlZHMgdG8gbm90aWZ5IG5lc3RlZCBzdWJzLiBPbmNlIGNhbGxlZCwgaXQgdW5pbXBsZW1lbnRzIGl0c2VsZiB1bnRpbCBmdXJ0aGVyIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZXMgb2NjdXIuIERvaW5nIGl0IHRoaXMgd2F5IHZzIGhhdmluZyBhIHBlcm1hbmVudCBgY29tcG9uZW50RGlkVXBkYXRlYCB0aGF0IGRvZXNcbiAgICAgICAgLy8gYSBib29sZWFuIGNoZWNrIGV2ZXJ5IHRpbWUgYXZvaWRzIGFuIGV4dHJhIG1ldGhvZCBjYWxsIG1vc3Qgb2YgdGhlIHRpbWUsIHJlc3VsdGluZ1xuICAgICAgICAvLyBpbiBzb21lIHBlcmYgYm9vc3QuXG4gICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5zdWJzY3JpcHRpb24pICYmIHRoaXMuc3Vic2NyaXB0aW9uLmlzU3Vic2NyaWJlZCgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuYWRkRXh0cmFQcm9wcyA9IGZ1bmN0aW9uIGFkZEV4dHJhUHJvcHMocHJvcHMpIHtcbiAgICAgICAgaWYgKCF3aXRoUmVmICYmICFyZW5kZXJDb3VudFByb3AgJiYgISh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikpIHJldHVybiBwcm9wcztcbiAgICAgICAgLy8gbWFrZSBhIHNoYWxsb3cgY29weSBzbyB0aGF0IGZpZWxkcyBhZGRlZCBkb24ndCBsZWFrIHRvIHRoZSBvcmlnaW5hbCBzZWxlY3Rvci5cbiAgICAgICAgLy8gdGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCBmb3IgJ3JlZicgc2luY2UgdGhhdCdzIGEgcmVmZXJlbmNlIGJhY2sgdG8gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpbnN0YW5jZS4gYSBzaW5nbGV0b24gbWVtb2l6ZWQgc2VsZWN0b3Igd291bGQgdGhlbiBiZSBob2xkaW5nIGEgcmVmZXJlbmNlIHRvIHRoZVxuICAgICAgICAvLyBpbnN0YW5jZSwgcHJldmVudGluZyB0aGUgaW5zdGFuY2UgZnJvbSBiZWluZyBnYXJiYWdlIGNvbGxlY3RlZCwgYW5kIHRoYXQgd291bGQgYmUgYmFkXG4gICAgICAgIHZhciB3aXRoRXh0cmFzID0gX2V4dGVuZHMoe30sIHByb3BzKTtcbiAgICAgICAgaWYgKHdpdGhSZWYpIHdpdGhFeHRyYXMucmVmID0gdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2U7XG4gICAgICAgIGlmIChyZW5kZXJDb3VudFByb3ApIHdpdGhFeHRyYXNbcmVuZGVyQ291bnRQcm9wXSA9IHRoaXMucmVuZGVyQ291bnQrKztcbiAgICAgICAgaWYgKHRoaXMucHJvcHNNb2RlICYmIHRoaXMuc3Vic2NyaXB0aW9uKSB3aXRoRXh0cmFzW3N1YnNjcmlwdGlvbktleV0gPSB0aGlzLnN1YnNjcmlwdGlvbjtcbiAgICAgICAgcmV0dXJuIHdpdGhFeHRyYXM7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHRocm93IHNlbGVjdG9yLmVycm9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIHRoaXMuYWRkRXh0cmFQcm9wcyhzZWxlY3Rvci5wcm9wcykpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29ubmVjdDtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICBDb25uZWN0LmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5wcm9wVHlwZXMgPSBjb250ZXh0VHlwZXM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIC8vIFdlIGFyZSBob3QgcmVsb2FkaW5nIVxuICAgICAgICBpZiAodGhpcy52ZXJzaW9uICE9PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgICB0aGlzLmluaXRTZWxlY3RvcigpO1xuXG4gICAgICAgICAgLy8gSWYgYW55IGNvbm5lY3RlZCBkZXNjZW5kYW50cyBkb24ndCBob3QgcmVsb2FkIChhbmQgcmVzdWJzY3JpYmUgaW4gdGhlIHByb2Nlc3MpLCB0aGVpclxuICAgICAgICAgIC8vIGxpc3RlbmVycyB3aWxsIGJlIGxvc3Qgd2hlbiB3ZSB1bnN1YnNjcmliZS4gVW5mb3J0dW5hdGVseSwgYnkgY29weWluZyBvdmVyIGFsbFxuICAgICAgICAgIC8vIGxpc3RlbmVycywgdGhpcyBkb2VzIG1lYW4gdGhhdCB0aGUgb2xkIHZlcnNpb25zIG9mIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3aWxsIHN0aWxsIGJlXG4gICAgICAgICAgLy8gbm90aWZpZWQgb2Ygc3RhdGUgY2hhbmdlczsgaG93ZXZlciwgdGhlaXIgb25TdGF0ZUNoYW5nZSBmdW5jdGlvbiBpcyBhIG5vLW9wIHNvIHRoaXNcbiAgICAgICAgICAvLyBpc24ndCBhIGh1Z2UgZGVhbC5cbiAgICAgICAgICB2YXIgb2xkTGlzdGVuZXJzID0gW107XG5cbiAgICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycyA9IHRoaXMuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5nZXQoKTtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuaW5pdFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093bi5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bWJvbDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgZ2V0UmF3VGFnIGZyb20gJy4vX2dldFJhd1RhZy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9TdHJpbmcgZnJvbSAnLi9fb2JqZWN0VG9TdHJpbmcuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldFRhZztcbiIsImltcG9ydCBvdmVyQXJnIGZyb20gJy4vX292ZXJBcmcuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0UHJvdG90eXBlO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0TGlrZTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNQbGFpbk9iamVjdDtcbiIsImltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn1cblxuLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vLyBcbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59XG5cbi8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vIFxuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy8gICAgXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07XG5cbiAgICAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuXG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4geyBkaXNwYXRjaDogZGlzcGF0Y2ggfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuXG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHMgPSB2b2lkIDA7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSwgbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyksIG93blByb3BzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuXG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGUgPSB2b2lkIDA7XG4gIHZhciBvd25Qcm9wcyA9IHZvaWQgMDtcbiAgdmFyIHN0YXRlUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBkaXNwYXRjaFByb3BzID0gdm9pZCAwO1xuICB2YXIgbWVyZ2VkUHJvcHMgPSB2b2lkIDA7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcblxuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgdmFyIG5leHRTdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlUHJvcHNDaGFuZ2VkID0gIWFyZVN0YXRlUHJvcHNFcXVhbChuZXh0U3RhdGVQcm9wcywgc3RhdGVQcm9wcyk7XG4gICAgc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuXG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG5cbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHJldHVybiBoYXNSdW5BdExlYXN0T25jZSA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgOiBoYW5kbGVGaXJzdENhbGwobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpO1xuICB9O1xufVxuXG4vLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbJ2luaXRNYXBTdGF0ZVRvUHJvcHMnLCAnaW5pdE1hcERpc3BhdGNoVG9Qcm9wcycsICdpbml0TWVyZ2VQcm9wcyddKTtcblxuICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIG9wdGlvbnMuZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRmFjdG9yeSA9IG9wdGlvbnMucHVyZSA/IHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IDogaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4uL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknO1xuXG4vKlxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxuXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXG4gIFxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cblxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cblxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgb2YgdHlwZSAnICsgdHlwZW9mIGFyZyArICcgZm9yICcgKyBuYW1lICsgJyBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50ICcgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgJy4nKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxuLy8gY3JlYXRlQ29ubmVjdCB3aXRoIGRlZmF1bHQgYXJncyBidWlsZHMgdGhlICdvZmZpY2lhbCcgY29ubmVjdCBiZWhhdmlvci4gQ2FsbGluZyBpdCB3aXRoXG4vLyBkaWZmZXJlbnQgb3B0aW9ucyBvcGVucyB1cCBzb21lIHRlc3RpbmcgYW5kIGV4dGVuc2liaWxpdHkgc2NlbmFyaW9zXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdCgpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdW5kZWZpbmVkID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMpIHtcbiAgICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9LFxuICAgICAgICBfcmVmMiRwdXJlID0gX3JlZjIucHVyZSxcbiAgICAgICAgcHVyZSA9IF9yZWYyJHB1cmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmMiRwdXJlLFxuICAgICAgICBfcmVmMiRhcmVTdGF0ZXNFcXVhbCA9IF9yZWYyLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYyJGFyZVN0YXRlc0VxdWFsID09PSB1bmRlZmluZWQgPyBzdHJpY3RFcXVhbCA6IF9yZWYyJGFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBfcmVmMiRhcmVPd25Qcm9wc0VxdWEgPSBfcmVmMi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZjIkYXJlT3duUHJvcHNFcXVhID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVPd25Qcm9wc0VxdWEsXG4gICAgICAgIF9yZWYyJGFyZVN0YXRlUHJvcHNFcSA9IF9yZWYyLmFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZjIkYXJlU3RhdGVQcm9wc0VxID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVTdGF0ZVByb3BzRXEsXG4gICAgICAgIF9yZWYyJGFyZU1lcmdlZFByb3BzRSA9IF9yZWYyLmFyZU1lcmdlZFByb3BzRXF1YWwsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmMiRhcmVNZXJnZWRQcm9wc0UgPT09IHVuZGVmaW5lZCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYyJGFyZU1lcmdlZFByb3BzRSxcbiAgICAgICAgZXh0cmFPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbJ3B1cmUnLCAnYXJlU3RhdGVzRXF1YWwnLCAnYXJlT3duUHJvcHNFcXVhbCcsICdhcmVTdGF0ZVByb3BzRXF1YWwnLCAnYXJlTWVyZ2VkUHJvcHNFcXVhbCddKTtcblxuICAgIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWF0Y2gobWFwU3RhdGVUb1Byb3BzLCBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hdGNoKG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNZXJnZVByb3BzID0gbWF0Y2gobWVyZ2VQcm9wcywgbWVyZ2VQcm9wc0ZhY3RvcmllcywgJ21lcmdlUHJvcHMnKTtcblxuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gJ0Nvbm5lY3QoJyArIG5hbWUgKyAnKSc7XG4gICAgICB9LFxuXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcblxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG5cbiAgICB9LCBleHRyYU9wdGlvbnMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29ubmVjdCgpOyIsImV4cG9ydCBjb25zdCBFUlJPUiA9ICdFUlJPUic7XG5leHBvcnQgY29uc3QgRVJST1JfQ0xFQVIgPSAnRVJST1JfQ0xFQVInO1xuZXhwb3J0IGNvbnN0IExPQURfU1RBUlQgPSAnTE9BRF9TVEFSVCc7XG5leHBvcnQgY29uc3QgTE9BRF9FTkQgPSAnTE9BRF9FTkQnO1xuXG5leHBvcnQgY29uc3QgZ2V0RXJyb3IgPSBzdGF0ZSA9PiBzdGF0ZS5lcnJvcjtcbmV4cG9ydCBjb25zdCBnZXRMb2FkaW5nID0gc3RhdGUgPT4gc3RhdGUubG9hZGluZztcblxuZXhwb3J0IGZ1bmN0aW9uIGVycm9yKHN0YXRlID0gbnVsbCwgeyB0eXBlLCBwYXlsb2FkIH0pIHtcbiAgc3dpdGNoKHR5cGUpIHtcbiAgICBjYXNlIEVSUk9SOlxuICAgICAgcmV0dXJuIHBheWxvYWQ7IFxuICAgIGNhc2UgTE9BRF9TVEFSVDpcbiAgICBjYXNlIEVSUk9SX0NMRUFSOlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZGluZyhzdGF0ZSA9IGZhbHNlLCB7IHR5cGUgfSkge1xuICBzd2l0Y2godHlwZSkge1xuICAgIGNhc2UgTE9BRF9TVEFSVDpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGNhc2UgTE9BRF9FTkQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufSIsImV4cG9ydCBjb25zdCBDQVRFR09SWV9MT0FEID0gJ0NBVEVHT1JZX0xPQUQnO1xuZXhwb3J0IGNvbnN0IENBVEVHT1JZX0FERCA9ICdDQVRFR09SWV9BREQnO1xuZXhwb3J0IGNvbnN0IENBVEVHT1JZX1VQREFURSA9ICdDQVRFR09SWV9VUERBVEUnO1xuZXhwb3J0IGNvbnN0IENBVEVHT1JZX1JFTU9WRSA9ICdDQVRFR09SWV9SRU1PVkUnO1xuXG5cbmV4cG9ydCBjb25zdCBnZXRDYXRlZ29yaWVzID0gc3RhdGUgPT4gc3RhdGUuY2F0ZWdvcmllcztcblxuZXhwb3J0IGZ1bmN0aW9uIGNhdGVnb3JpZXMoc3RhdGUgPSBbXSwgeyB0eXBlLCBwYXlsb2FkIH0pIHtcbiAgc3dpdGNoKHR5cGUpIHtcbiAgICBjYXNlIENBVEVHT1JZX0xPQUQ6XG4gICAgICByZXR1cm4gcGF5bG9hZDtcbiAgICAgIFxuICAgIGNhc2UgQ0FURUdPUllfQUREOlxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHBheWxvYWRcbiAgICAgIF07XG4gICAgY2FzZSBDQVRFR09SWV9VUERBVEU6XG4gICAgICByZXR1cm4gc3RhdGUubWFwKGNhdGVnb3J5ID0+IGNhdGVnb3J5LmtleSA9PT0gcGF5bG9hZC5rZXkgPyBwYXlsb2FkIDogY2F0ZWdvcnkpO1xuICAgIGNhc2UgQ0FURUdPUllfUkVNT1ZFOlxuICAgICAgcmV0dXJuIHN0YXRlLmZpbHRlcihjYXRlZ29yeSA9PiBjYXRlZ29yeS5rZXkgIT09IHBheWxvYWQpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICBtaXhpbnM6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgIG5hbWU6IHRydWUsXG4gICAgbGVuZ3RoOiB0cnVlLFxuICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICBjYWxsZXI6IHRydWUsXG4gICAgY2FsbGVlOiB0cnVlLFxuICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICBhcml0eTogdHJ1ZVxufTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoT2JqZWN0KTtcblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5XSAmJiAhS05PV05fU1RBVElDU1trZXldICYmICghYmxhY2tsaXN0IHx8ICFibGFja2xpc3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgdHJ5IHsgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsImltcG9ydCB7IENBVEVHT1JZX0xPQUQsIENBVEVHT1JZX0FERCwgQ0FURUdPUllfVVBEQVRFLCBDQVRFR09SWV9SRU1PVkUgfSBmcm9tICcuL3JlZHVjZXJzJztcbmltcG9ydCB7IGxvYWRDYXRlZ29yaWVzLCBhZGRDYXRlZ29yeSwgcmVtb3ZlQ2F0ZWdvcnksIHVwZGF0ZUNhdGVnb3J5LCB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NhdGVnb3J5QXBpJztcblxuZXhwb3J0IGNvbnN0IGxvYWQgPSAoKSA9PiAoe1xuICB0eXBlOiBDQVRFR09SWV9MT0FELFxuICBwYXlsb2FkOiBsb2FkQ2F0ZWdvcmllcygpXG59KTtcblxuZXhwb3J0IGNvbnN0IGFkZCA9IGNhdGVnb3J5ID0+IHtcbiAgY2F0ZWdvcnkudGltZXN0YW1wID0gKG5ldyBEYXRlKCkpLnRvTG9jYWxlU3RyaW5nKCk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQ0FURUdPUllfQURELFxuICAgIHBheWxvYWQ6IGFkZENhdGVnb3J5KGNhdGVnb3J5KVxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZSA9IGNhdGVnb3J5ID0+ICh7XG4gIHR5cGU6IENBVEVHT1JZX1VQREFURSxcbiAgcGF5bG9hZDogdXBkYXRlQ2F0ZWdvcnkoY2F0ZWdvcnkpXG59KTtcblxuZXhwb3J0IGNvbnN0IHJlbW92ZSA9IGtleSA9PiAoe1xuICB0eXBlOiBDQVRFR09SWV9SRU1PVkUsXG4gIHBheWxvYWQ6IHJlbW92ZUNhdGVnb3J5KGtleSkudGhlbigoKSA9PiBrZXkpXG59KTtcbiIsImltcG9ydCB7IEVYUEVOU0VfQURELCBFWFBFTlNFX1VQREFURSwgRVhQRU5TRV9SRU1PVkUgfSBmcm9tICcuL2V4cGVuc2VSZWR1Y2Vycyc7XG5pbXBvcnQgeyBhZGRFeHBlbnNlVG9DYXRlZ29yeSwgdXBkYXRlRXhwZW5zZUNhdGVnb3J5LCByZW1vdmVFeHBlbnNlQ2F0ZWdvcnkgfSBmcm9tICcuLi8uLi8uLi9zcmMvc2VydmljZXMvY2F0ZWdvcnlBcGknO1xuXG5leHBvcnQgY29uc3QgYWRkRXhwZW5zZSA9IChjYXRlZ29yeUlkLCBleHBlbnNlKSA9PiB7XG4gIGV4cGVuc2UudGltZXN0YW1wID0gKG5ldyBEYXRlKCkpLnRvTG9jYWxlU3RyaW5nKCk7XG4gIGV4cGVuc2UuY2F0ZWdvcnlJZCA9IGNhdGVnb3J5SWQ7XG4gIHJldHVybiB7XG4gICAgdHlwZTogRVhQRU5TRV9BREQsXG4gICAgcGF5bG9hZDogYWRkRXhwZW5zZVRvQ2F0ZWdvcnkoZXhwZW5zZSlcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVFeHBlbnNlID0gZXhwZW5zZSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogRVhQRU5TRV9VUERBVEUsXG4gICAgcGF5bG9hZDogdXBkYXRlRXhwZW5zZUNhdGVnb3J5KGV4cGVuc2UpXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlRXhwZW5zZSA9IGV4cGVuc2UgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IEVYUEVOU0VfUkVNT1ZFLFxuICAgIHBheWxvYWQ6IHJlbW92ZUV4cGVuc2VDYXRlZ29yeShleHBlbnNlKS50aGVuKCgpID0+IGV4cGVuc2UpXG4gIH07XG59O1xuIiwiaW1wb3J0IHsgQ0FURUdPUllfTE9BRCwgQ0FURUdPUllfQURELCBDQVRFR09SWV9SRU1PVkUgfSBmcm9tICcuLi9jYXRlZ29yaWVzL3JlZHVjZXJzJztcbmV4cG9ydCBjb25zdCBFWFBFTlNFX0FERCA9ICdFWFBFTlNFX0FERCc7XG5leHBvcnQgY29uc3QgRVhQRU5TRV9VUERBVEUgPSAnRVhQRU5TRV9VUERBVEUnO1xuZXhwb3J0IGNvbnN0IEVYUEVOU0VfUkVNT1ZFID0gJ0VYUEVOU0VfUkVNT1ZFJztcblxuZXhwb3J0IGNvbnN0IGdldEV4cGVuc2VzID0gc3RhdGUgPT4gc3RhdGUuZXhwZW5zZXNCeUNhdGVnb3J5O1xuZXhwb3J0IGNvbnN0IGdldEV4cGVuc2VzQnlDYXRlZ29yeSA9IChzdGF0ZSwgY2F0ZWdvcnlJZCkgPT4gZ2V0RXhwZW5zZXMoc3RhdGUpW2NhdGVnb3J5SWRdO1xuXG5leHBvcnQgZnVuY3Rpb24gZXhwZW5zZXNCeUNhdGVnb3J5KHN0YXRlID0gW10sIHsgdHlwZSwgcGF5bG9hZCB9KSB7XG5cbiAgc3dpdGNoKHR5cGUpe1xuICAgIGNhc2UgQ0FURUdPUllfTE9BRDpcbiAgICAgIHJldHVybiBwYXlsb2FkLnJlZHVjZSgobWFwLCBjYXRlZ29yeSkgPT4ge1xuICAgICAgICBtYXBbY2F0ZWdvcnkua2V5XSA9IChjYXRlZ29yeS5leHBlbnNlcyk7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgICB9LFxuICAgICAge30pO1xuICAgIGNhc2UgQ0FURUdPUllfQUREOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIFtwYXlsb2FkLmtleV06IFtdXG4gICAgICB9O1xuICAgIGNhc2UgQ0FURUdPUllfUkVNT1ZFOiB7XG4gICAgICBjb25zdCBjb3B5ID0geyAuLi5zdGF0ZSB9O1xuICAgICAgZGVsZXRlIGNvcHlbcGF5bG9hZC5pZF07XG4gICAgICByZXR1cm4gY29weTtcbiAgICB9XG4gICAgY2FzZSBFWFBFTlNFX0FERDogXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgW3BheWxvYWQuY2F0ZWdvcnlJZF0gOiBbXG4gICAgICAgICAgLi4uc3RhdGVbcGF5bG9hZC5jYXRlZ29yeUlkXSxcbiAgICAgICAgICBwYXlsb2FkXG4gICAgICAgIF1cbiAgICAgIH07XG4gICAgY2FzZSBFWFBFTlNFX1VQREFURToge1xuICAgICAgcmV0dXJuIHsgXG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBbcGF5bG9hZC5jYXRlZ29yeUlkXTogc3RhdGVbcGF5bG9hZC5jYXRlZ29yeUlkXS5tYXAoZXhwZW5zZSA9PiBleHBlbnNlLmtleSA9PT0gcGF5bG9hZC5rZXkgPyBwYXlsb2FkIDogZXhwZW5zZSlcbiAgICAgIH07XG4gICAgfVxuICAgIGNhc2UgRVhQRU5TRV9SRU1PVkU6IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0geyAuLi5zdGF0ZSB9O1xuICAgICAgY29uc3QgdXBkYXRlID0gbmV3U3RhdGVbcGF5bG9hZC5jYXRlZ29yeUlkXS5maWx0ZXIoZXhwZW5zZSA9PiBleHBlbnNlLmtleSAhPT0gcGF5bG9hZC5rZXkpO1xuICAgICAgbmV3U3RhdGVbcGF5bG9hZC5jYXRlZ29yeUlkXSA9IHVwZGF0ZTtcbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG4iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvKSB7XG4gIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcblxuICB2YXIgdG9QYXJ0cyA9IHRvICYmIHRvLnNwbGl0KCcvJykgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSBmcm9tICYmIGZyb20uc3BsaXQoJy8nKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gdm9pZCAwO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcbiAgfWlmIChtdXN0RW5kQWJzICYmIGZyb21QYXJ0c1swXSAhPT0gJycgJiYgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSkpIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGIpICYmIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGFUeXBlID0gdHlwZW9mIGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGEpO1xuICB2YXIgYlR5cGUgPSB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYik7XG5cbiAgaWYgKGFUeXBlICE9PSBiVHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChhVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYVZhbHVlID0gYS52YWx1ZU9mKCk7XG4gICAgdmFyIGJWYWx1ZSA9IGIudmFsdWVPZigpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWx1ZUVxdWFsOyIsImV4cG9ydCB2YXIgYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBoYXNCYXNlbmFtZSA9IGZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXggKyAnKFxcXFwvfFxcXFw/fCN8JCknLCAnaScpLnRlc3QocGF0aCk7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBUcmFpbGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgcGFyc2VQYXRoID0gZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG5leHBvcnQgdmFyIGNyZWF0ZVBhdGggPSBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG5cblxuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcblxuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6ICc/JyArIHNlYXJjaDtcblxuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuXG4gIHJldHVybiBwYXRoO1xufTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHsgcGFyc2VQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuXG5leHBvcnQgdmFyIGNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcblxuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn07XG5cbmV4cG9ydCB2YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn07IiwiaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5cbnZhciBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICB2YXIgc2V0UHJvbXB0ID0gZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKTtcblxuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjb25maXJtVHJhbnNpdGlvblRvID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpO1xuXG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgdmFyIGFwcGVuZExpc3RlbmVyID0gZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyOyIsImV4cG9ydCB2YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuZXhwb3J0IHZhciBhZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG5leHBvcnQgdmFyIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID8gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNIaXN0b3J5ID0gZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbmV4cG9ydCB2YXIgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn07IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgc3RyaXBUcmFpbGluZ1NsYXNoLCBoYXNCYXNlbmFtZSwgc3RyaXBCYXNlbmFtZSwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcbmltcG9ydCB7IGNhblVzZURPTSwgYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZ2V0Q29uZmlybWF0aW9uLCBzdXBwb3J0c0hpc3RvcnksIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UsIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgfSBmcm9tICcuL0RPTVV0aWxzJztcblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIGdldEhpc3RvcnlTdGF0ZSA9IGZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG5cbiAgdmFyIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBwcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcblxuXG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcFN0YXRlID0gZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuXG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuXG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQnJvd3Nlckhpc3Rvcnk7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcExlYWRpbmdTbGFzaCwgc3RyaXBUcmFpbGluZ1NsYXNoLCBoYXNCYXNlbmFtZSwgc3RyaXBCYXNlbmFtZSwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcbmltcG9ydCB7IGNhblVzZURPTSwgYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZ2V0Q29uZmlybWF0aW9uLCBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcblxuICB2YXIgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IHByb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHVuZGVmaW5lZCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcblxuICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJyk7XG5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcblxuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJyk7XG5cbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVIYXNoSGlzdG9yeTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcblxudmFyIGNsYW1wID0gZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xudmFyIGNyZWF0ZU1lbW9yeUhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBwcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB1bmRlZmluZWQgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBwcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB1bmRlZmluZWQgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgY2FuR28gPSBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9O1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVNZW1vcnlIaXN0b3J5OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1hdGNoOiBfdGhpcy5jb21wdXRlTWF0Y2goX3RoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgaGlzdG9yeSA9IF9wcm9wcy5oaXN0b3J5O1xuXG5cbiAgICBpbnZhcmlhbnQoY2hpbGRyZW4gPT0gbnVsbCB8fCBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDEsIFwiQSA8Um91dGVyPiBtYXkgaGF2ZSBvbmx5IG9uZSBjaGlsZCBlbGVtZW50XCIpO1xuXG4gICAgLy8gRG8gdGhpcyBoZXJlIHNvIHdlIGNhbiBzZXRTdGF0ZSB3aGVuIGEgPFJlZGlyZWN0PiBjaGFuZ2VzIHRoZVxuICAgIC8vIGxvY2F0aW9uIGluIGNvbXBvbmVudFdpbGxNb3VudC4gVGhpcyBoYXBwZW5zIGUuZy4gd2hlbiBkb2luZ1xuICAgIC8vIHNlcnZlciByZW5kZXJpbmcgdXNpbmcgYSA8U3RhdGljUm91dGVyPi5cbiAgICB0aGlzLnVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgbWF0Y2g6IF90aGlzMi5jb21wdXRlTWF0Y2goaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyh0aGlzLnByb3BzLmhpc3RvcnkgPT09IG5leHRQcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIik7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgcmV0dXJuIGNoaWxkcmVuID8gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbikgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuUm91dGVyLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Sb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJvd3NlclJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ccm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBCcm93c2VyUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUhhc2hIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhhc2hSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpO1xuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBIYXNoUm91dGVyOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSBcImhpc3RvcnlcIjtcblxudmFyIGlzTW9kaWZpZWRFdmVudCA9IGZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG52YXIgTGluayA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMaW5rLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaW5rKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGluayk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsaWNrKSBfdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICFfdGhpcy5wcm9wcy50YXJnZXQgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgdmFyIGhpc3RvcnkgPSBfdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgICByZXBsYWNlID0gX3RoaXMkcHJvcHMucmVwbGFjZSxcbiAgICAgICAgICAgICAgdG8gPSBfdGhpcyRwcm9wcy50bztcblxuXG4gICAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBMaW5rLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHJlcGxhY2UgPSBfcHJvcHMucmVwbGFjZSxcbiAgICAgICAgdG8gPSBfcHJvcHMudG8sXG4gICAgICAgIGlubmVyUmVmID0gX3Byb3BzLmlubmVyUmVmLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFtcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpbnZhcmlhbnQodG8gIT09IHVuZGVmaW5lZCwgJ1lvdSBtdXN0IHNwZWNpZnkgdGhlIFwidG9cIiBwcm9wZXJ0eScpO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgaGlzdG9yeS5sb2NhdGlvbikgOiB0bztcblxuICAgIHZhciBocmVmID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7IG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssIGhyZWY6IGhyZWYsIHJlZjogaW5uZXJSZWYgfSkpO1xuICB9O1xuXG4gIHJldHVybiBMaW5rO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5MaW5rLnByb3BUeXBlcyA9IHtcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZCxcbiAgaW5uZXJSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSlcbn07XG5MaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgcmVwbGFjZTogZmFsc2Vcbn07XG5MaW5rLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGNyZWF0ZUhyZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTGluazsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbW9yeVJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgTWVtb3J5Um91dGVyIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IE1lbW9yeVJvdXRlcjsiLCJpbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gXCJwYXRoLXRvLXJlZ2V4cFwiO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZVBhdGggPSBmdW5jdGlvbiBjb21waWxlUGF0aChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlID0gcGF0aFRvUmVnZXhwKHBhdHRlcm4sIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgY29tcGlsZWRQYXR0ZXJuID0geyByZTogcmUsIGtleXM6IGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkUGF0dGVybjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRQYXR0ZXJuO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGggcGF0dGVybi5cbiAqL1xudmFyIG1hdGNoUGF0aCA9IGZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBwYXJlbnQgPSBhcmd1bWVudHNbMl07XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSBvcHRpb25zID0geyBwYXRoOiBvcHRpb25zIH07XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcblxuXG4gIGlmIChwYXRoID09IG51bGwpIHJldHVybiBwYXJlbnQ7XG5cbiAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoKHBhdGgsIHsgZW5kOiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pLFxuICAgICAgcmUgPSBfY29tcGlsZVBhdGgucmUsXG4gICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgdmFyIG1hdGNoID0gcmUuZXhlYyhwYXRobmFtZSk7XG5cbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG5cbiAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuXG4gIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLCAvLyB0aGUgcGF0aCBwYXR0ZXJuIHVzZWQgdG8gbWF0Y2hcbiAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLCAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICBpc0V4YWN0OiBpc0V4YWN0LCAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSlcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5cbnZhciBpc0VtcHR5Q2hpbGRyZW4gPSBmdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG52YXIgUm91dGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcywgX3RoaXMuY29udGV4dC5yb3V0ZXIpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZS5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMubG9jYXRpb24gfHwgdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChfcmVmLCByb3V0ZXIpIHtcbiAgICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgICBwYXRoID0gX3JlZi5wYXRoLFxuICAgICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZTtcblxuICAgIGlmIChjb21wdXRlZE1hdGNoKSByZXR1cm4gY29tcHV0ZWRNYXRjaDsgLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG5cbiAgICBpbnZhcmlhbnQocm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG9yIHdpdGhSb3V0ZXIoKSBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICB2YXIgcm91dGUgPSByb3V0ZXIucm91dGU7XG5cbiAgICB2YXIgcGF0aG5hbWUgPSAobG9jYXRpb24gfHwgcm91dGUubG9jYXRpb24pLnBhdGhuYW1lO1xuXG4gICAgcmV0dXJuIG1hdGNoUGF0aChwYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBzdHJpY3Q6IHN0cmljdCwgZXhhY3Q6IGV4YWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9LCByb3V0ZS5tYXRjaCk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWRcIik7XG5cbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5yZW5kZXIgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtYXRjaDogdGhpcy5jb21wdXRlTWF0Y2gobmV4dFByb3BzLCBuZXh0Q29udGV4dC5yb3V0ZXIpXG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgbWF0Y2ggPSB0aGlzLnN0YXRlLm1hdGNoO1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudCxcbiAgICAgICAgcmVuZGVyID0gX3Byb3BzLnJlbmRlcjtcbiAgICB2YXIgX2NvbnRleHQkcm91dGVyID0gdGhpcy5jb250ZXh0LnJvdXRlcixcbiAgICAgICAgaGlzdG9yeSA9IF9jb250ZXh0JHJvdXRlci5oaXN0b3J5LFxuICAgICAgICByb3V0ZSA9IF9jb250ZXh0JHJvdXRlci5yb3V0ZSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IF9jb250ZXh0JHJvdXRlci5zdGF0aWNDb250ZXh0O1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcbiAgICB2YXIgcHJvcHMgPSB7IG1hdGNoOiBtYXRjaCwgbG9jYXRpb246IGxvY2F0aW9uLCBoaXN0b3J5OiBoaXN0b3J5LCBzdGF0aWNDb250ZXh0OiBzdGF0aWNDb250ZXh0IH07XG5cbiAgICBpZiAoY29tcG9uZW50KSByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogbnVsbDtcblxuICAgIGlmIChyZW5kZXIpIHJldHVybiBtYXRjaCA/IHJlbmRlcihwcm9wcykgOiBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gY2hpbGRyZW4ocHJvcHMpO1xuXG4gICAgaWYgKGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlLnByb3BUeXBlcyA9IHtcbiAgY29tcHV0ZWRNYXRjaDogUHJvcFR5cGVzLm9iamVjdCwgLy8gcHJpdmF0ZSwgZnJvbSA8U3dpdGNoPlxuICBwYXRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZS5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pXG59O1xuUm91dGUuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUm91dGUgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Sb3V0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IFJvdXRlIGZyb20gXCIuL1JvdXRlXCI7XG5pbXBvcnQgTGluayBmcm9tIFwiLi9MaW5rXCI7XG5cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbnZhciBOYXZMaW5rID0gZnVuY3Rpb24gTmF2TGluayhfcmVmKSB7XG4gIHZhciB0byA9IF9yZWYudG8sXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICBnZXRJc0FjdGl2ZSA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWZbXCJhcmlhLWN1cnJlbnRcIl0sXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcInRvXCIsIFwiZXhhY3RcIiwgXCJzdHJpY3RcIiwgXCJsb2NhdGlvblwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwic3R5bGVcIiwgXCJpc0FjdGl2ZVwiLCBcImFyaWEtY3VycmVudFwiXSk7XG5cbiAgdmFyIHBhdGggPSAodHlwZW9mIHRvID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodG8pKSA9PT0gXCJvYmplY3RcIiA/IHRvLnBhdGhuYW1lIDogdG87XG5cbiAgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcbiAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwge1xuICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgIGV4YWN0OiBleGFjdCxcbiAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKF9yZWYyKSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfcmVmMi5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaCA9IF9yZWYyLm1hdGNoO1xuXG4gICAgICB2YXIgaXNBY3RpdmUgPSAhIShnZXRJc0FjdGl2ZSA/IGdldElzQWN0aXZlKG1hdGNoLCBsb2NhdGlvbikgOiBtYXRjaCk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHtcbiAgICAgICAgdG86IHRvLFxuICAgICAgICBjbGFzc05hbWU6IGlzQWN0aXZlID8gW2NsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lXS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSkuam9pbihcIiBcIikgOiBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZSwgYWN0aXZlU3R5bGUpIDogc3R5bGUsXG4gICAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGxcbiAgICAgIH0sIHJlc3QpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuTmF2TGluay5wcm9wVHlwZXMgPSB7XG4gIHRvOiBMaW5rLnByb3BUeXBlcy50byxcbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICBcImFyaWEtY3VycmVudFwiOiBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSlcbn07XG5cbk5hdkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmVDbGFzc05hbWU6IFwiYWN0aXZlXCIsXG4gIFwiYXJpYS1jdXJyZW50XCI6IFwicGFnZVwiXG59O1xuXG5leHBvcnQgZGVmYXVsdCBOYXZMaW5rOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5XG4gKiBmcm9tIGEgc2NyZWVuIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFByb21wdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQcm9tcHQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByb21wdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvbXB0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLnVuYmxvY2spIHRoaXMudW5ibG9jaygpO1xuXG4gICAgdGhpcy51bmJsb2NrID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5LmJsb2NrKG1lc3NhZ2UpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykge1xuICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICB0aGlzLnVuYmxvY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMud2hlbikgdGhpcy5lbmFibGUodGhpcy5wcm9wcy5tZXNzYWdlKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMud2hlbikge1xuICAgICAgaWYgKCF0aGlzLnByb3BzLndoZW4gfHwgdGhpcy5wcm9wcy5tZXNzYWdlICE9PSBuZXh0UHJvcHMubWVzc2FnZSkgdGhpcy5lbmFibGUobmV4dFByb3BzLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICB9XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuZGlzYWJsZSgpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBQcm9tcHQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblByb21wdC5wcm9wVHlwZXMgPSB7XG4gIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICBtZXNzYWdlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pLmlzUmVxdWlyZWRcbn07XG5Qcm9tcHQuZGVmYXVsdFByb3BzID0ge1xuICB3aGVuOiB0cnVlXG59O1xuUHJvbXB0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBibG9jazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBQcm9tcHQgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Qcm9tcHRcIjtcblxuZXhwb3J0IGRlZmF1bHQgUHJvbXB0OyIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbnZhciBwYXR0ZXJuQ2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbnZhciBjb21waWxlR2VuZXJhdG9yID0gZnVuY3Rpb24gY29tcGlsZUdlbmVyYXRvcihwYXR0ZXJuKSB7XG4gIHZhciBjYWNoZUtleSA9IHBhdHRlcm47XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGNvbXBpbGVkR2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0dGVybik7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0dGVybl0gPSBjb21waWxlZEdlbmVyYXRvcjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRHZW5lcmF0b3I7XG59O1xuXG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdHRlcm4gYW5kIHBhcmFtZXRlcnMuXG4gKi9cbnZhciBnZW5lcmF0ZVBhdGggPSBmdW5jdGlvbiBnZW5lcmF0ZVBhdGgoKSB7XG4gIHZhciBwYXR0ZXJuID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBcIi9cIjtcbiAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKHBhdHRlcm4gPT09IFwiL1wiKSB7XG4gICAgcmV0dXJuIHBhdHRlcm47XG4gIH1cbiAgdmFyIGdlbmVyYXRvciA9IGNvbXBpbGVHZW5lcmF0b3IocGF0dGVybik7XG4gIHJldHVybiBnZW5lcmF0b3IocGFyYW1zLCB7IHByZXR0eTogdHJ1ZSB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgZ2VuZXJhdGVQYXRoIGZyb20gXCIuL2dlbmVyYXRlUGF0aFwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciB1cGRhdGluZyB0aGUgbG9jYXRpb24gcHJvZ3JhbW1hdGljYWxseVxuICogd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUmVkaXJlY3QgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVkaXJlY3QsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJlZGlyZWN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWRpcmVjdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5pc1N0YXRpYyA9IGZ1bmN0aW9uIGlzU3RhdGljKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQucm91dGVyICYmIHRoaXMuY29udGV4dC5yb3V0ZXIuc3RhdGljQ29udGV4dDtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIGlmICh0aGlzLmlzU3RhdGljKCkpIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICghdGhpcy5pc1N0YXRpYygpKSB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBwcmV2VG8gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuICAgIHZhciBuZXh0VG8gPSBjcmVhdGVMb2NhdGlvbih0aGlzLnByb3BzLnRvKTtcblxuICAgIGlmIChsb2NhdGlvbnNBcmVFcXVhbChwcmV2VG8sIG5leHRUbykpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiWW91IHRyaWVkIHRvIHJlZGlyZWN0IHRvIHRoZSBzYW1lIHJvdXRlIHlvdSdyZSBjdXJyZW50bHkgb246IFwiICsgKFwiXFxcIlwiICsgbmV4dFRvLnBhdGhuYW1lICsgbmV4dFRvLnNlYXJjaCArIFwiXFxcIlwiKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXB1dGVUbyA9IGZ1bmN0aW9uIGNvbXB1dGVUbyhfcmVmKSB7XG4gICAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICAgIHRvID0gX3JlZi50bztcblxuICAgIGlmIChjb21wdXRlZE1hdGNoKSB7XG4gICAgICBpZiAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgdG8sIHtcbiAgICAgICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5wZXJmb3JtID0gZnVuY3Rpb24gcGVyZm9ybSgpIHtcbiAgICB2YXIgaGlzdG9yeSA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcbiAgICB2YXIgcHVzaCA9IHRoaXMucHJvcHMucHVzaDtcblxuICAgIHZhciB0byA9IHRoaXMuY29tcHV0ZVRvKHRoaXMucHJvcHMpO1xuXG4gICAgaWYgKHB1c2gpIHtcbiAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgfVxuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJlZGlyZWN0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5SZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gIGNvbXB1dGVkTWF0Y2g6IFByb3BUeXBlcy5vYmplY3QsIC8vIHByaXZhdGUsIGZyb20gPFN3aXRjaD5cbiAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxufTtcblJlZGlyZWN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgcHVzaDogZmFsc2Vcbn07XG5SZWRpcmVjdC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHJlcGxhY2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJlZGlyZWN0IGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBjcmVhdGVQYXRoIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyXCI7XG5cbnZhciBhZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn07XG5cbnZhciBhZGRCYXNlbmFtZSA9IGZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59O1xuXG52YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG5cbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59O1xuXG52YXIgY3JlYXRlVVJMID0gZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufTtcblxudmFyIHN0YXRpY0hhbmRsZXIgPSBmdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpO1xuICB9O1xufTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG52YXIgU3RhdGljUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGljUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jcmVhdGVIcmVmID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goX3RoaXMucHJvcHMuYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgIH0sIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gXCJQVVNIXCI7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0O1xuXG4gICAgICBjb250ZXh0LmFjdGlvbiA9IFwiUkVQTEFDRVwiO1xuICAgICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfSwgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IHtcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5jb250ZXh0XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpO1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBiYXNlbmFtZSA9IF9wcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgY29udGV4dCA9IF9wcm9wcy5jb250ZXh0LFxuICAgICAgICBsb2NhdGlvbiA9IF9wcm9wcy5sb2NhdGlvbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IHRoaXMuY3JlYXRlSHJlZixcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBoaXN0b3J5OiBoaXN0b3J5IH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5TdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG59O1xuU3RhdGljUm91dGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYmFzZW5hbWU6IFwiXCIsXG4gIGxvY2F0aW9uOiBcIi9cIlxufTtcblN0YXRpY1JvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3RhdGljUm91dGVyIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3dpdGNoKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcoIShuZXh0UHJvcHMubG9jYXRpb24gJiYgIXRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciByb3V0ZSA9IHRoaXMuY29udGV4dC5yb3V0ZXIucm91dGU7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgcm91dGUubG9jYXRpb247XG5cbiAgICB2YXIgbWF0Y2ggPSB2b2lkIDAsXG4gICAgICAgIGNoaWxkID0gdm9pZCAwO1xuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgICB2YXIgX2VsZW1lbnQkcHJvcHMgPSBlbGVtZW50LnByb3BzLFxuICAgICAgICAgICAgcGF0aFByb3AgPSBfZWxlbWVudCRwcm9wcy5wYXRoLFxuICAgICAgICAgICAgZXhhY3QgPSBfZWxlbWVudCRwcm9wcy5leGFjdCxcbiAgICAgICAgICAgIHN0cmljdCA9IF9lbGVtZW50JHByb3BzLnN0cmljdCxcbiAgICAgICAgICAgIHNlbnNpdGl2ZSA9IF9lbGVtZW50JHByb3BzLnNlbnNpdGl2ZSxcbiAgICAgICAgICAgIGZyb20gPSBfZWxlbWVudCRwcm9wcy5mcm9tO1xuXG4gICAgICAgIHZhciBwYXRoID0gcGF0aFByb3AgfHwgZnJvbTtcblxuICAgICAgICBjaGlsZCA9IGVsZW1lbnQ7XG4gICAgICAgIG1hdGNoID0gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIGV4YWN0OiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0sIHJvdXRlLm1hdGNoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgeyBsb2NhdGlvbjogbG9jYXRpb24sIGNvbXB1dGVkTWF0Y2g6IG1hdGNoIH0pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Td2l0Y2guY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBTd2l0Y2ggZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Td2l0Y2hcIjtcblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgZ2VuZXJhdGVQYXRoIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvZ2VuZXJhdGVQYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlUGF0aDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL21hdGNoUGF0aFwiO1xuXG5leHBvcnQgZGVmYXVsdCBtYXRjaFBhdGg7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiO1xuaW1wb3J0IFJvdXRlIGZyb20gXCIuL1JvdXRlXCI7XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cbnZhciB3aXRoUm91dGVyID0gZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwge1xuICAgICAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKHJvdXRlQ29tcG9uZW50UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIHJvdXRlQ29tcG9uZW50UHJvcHMsIHtcbiAgICAgICAgICByZWY6IHdyYXBwZWRDb21wb25lbnRSZWZcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG4gIEMucHJvcFR5cGVzID0ge1xuICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5mdW5jXG4gIH07XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IHdpdGhSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7IiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6ICdAQHJlZHV4L0lOSVQnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyksXG4gIFJFUExBQ0U6ICdAQHJlZHV4L1JFUExBQ0UnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJylcbn07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAoKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iaikpICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgcHJvdG8gPSBvYmo7XG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmUobGlzdGVuZXIpIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG5cbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAoKHR5cGVvZiBvYnNlcnZlciA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JzZXJ2ZXIpKSAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4geyB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmUgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9XG5cbiAgLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG4gIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcblxuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgJ2FjdGlvbiBcIicgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyAnXCInIHx8ICdhbiBhY3Rpb24nO1xuXG4gIHJldHVybiAnR2l2ZW4gJyArIGFjdGlvbkRlc2NyaXB0aW9uICsgJywgcmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiAnICsgJ1RvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gJyArICdJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC4nO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gJ1RoZSAnICsgYXJndW1lbnROYW1lICsgJyBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFwiJyArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgJ1wiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nICcgKyAoJ2tleXM6IFwiJyArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgJ1wiJyk7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuXG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG5cbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuICdVbmV4cGVjdGVkICcgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArICcgJyArICgnXCInICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyAnXCIgZm91bmQgaW4gJyArIGFyZ3VtZW50TmFtZSArICcuICcpICsgJ0V4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogJyArICgnXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IEFjdGlvblR5cGVzLklOSVQgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gJyArICdJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgJyArICdleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5ICcgKyAnbm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvblxcJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCAnICsgJ3lvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuJyk7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSAnQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTl8nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwgeyB0eXBlOiB0eXBlIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiAnICsgKCdEb25cXCd0IHRyeSB0byBoYW5kbGUgJyArIEFjdGlvblR5cGVzLklOSVQgKyAnIG9yIG90aGVyIGFjdGlvbnMgaW4gXCJyZWR1eC8qXCIgJykgKyAnbmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgJyArICdjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCAnICsgJ2luIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSAnICsgJ2FjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLicpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoJ05vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcIicgKyBrZXkgKyAnXCInKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHZvaWQgMDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yID0gdm9pZCAwO1xuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKCkge1xuICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAoKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYWN0aW9uQ3JlYXRvcnMpKSAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCAnICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhY3Rpb25DcmVhdG9ycykpICsgJy4gJyArICdEaWQgeW91IHdyaXRlIFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cIiBpbnN0ZWFkIG9mIFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiPycpO1xuICB9XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhY3Rpb25DcmVhdG9ycyk7XG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cblxuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh1bmRlZmluZWQsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZyhcIllvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nLiBcIiArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIERlZmluZVBsdWdpbiBmb3Igd2VicGFjayAoaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMDAzMDAzMSkgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSwgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcyB9O1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5T2JqZWN0ID0ge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIE9iamVjdC5mcmVlemUoZW1wdHlPYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5T2JqZWN0OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJpbXBvcnQgeyBwdXQsIHBvc3QsIGdldCwgZGVsIH0gZnJvbSAnLi9yZXF1ZXN0JztcblxuY29uc3QgVVJMID0gJ2h0dHBzOi8vYnVkZ2V0LXRyYWNrZXItNWJmNTIuZmlyZWJhc2Vpby5jb20vJztcbmNvbnN0IENBVEVHT1JZX1VSTCA9IGAke1VSTH0vY2F0ZWdvcmllc2A7XG5cbmNvbnN0IGdldENhdGVnb3J5VXJsID0ga2V5ID0+IGAke0NBVEVHT1JZX1VSTH0vJHtrZXl9Lmpzb25gO1xuY29uc3QgZ2V0RXhwZW5zZVVybCA9IChrZXksIGV4cGVuc2VLZXkpID0+IGAke0NBVEVHT1JZX1VSTH0vJHtrZXl9L2V4cGVuc2VzLyR7ZXhwZW5zZUtleX0uanNvbmA7XG5cbmNvbnN0IHRyYW5zZm9ybVRvQXJyYXkgPSBvYmogPT4ge1xuICBpZighb2JqKSByZXR1cm4gW107XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChrZXkgPT4ge1xuICAgIGNvbnN0IGVhY2ggPSBvYmpba2V5XTtcbiAgICBlYWNoLmtleSA9IGtleTtcbiAgICByZXR1cm4gZWFjaDtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgbG9hZENhdGVnb3JpZXMgPSAoKSA9PiB7XG4gIHJldHVybiBnZXQoYCR7Q0FURUdPUllfVVJMfS5qc29uYClcbiAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICBjb25zdCBjYXRlZ29yaWVzID0gdHJhbnNmb3JtVG9BcnJheShyZXNwb25zZSk7XG4gICAgICBjYXRlZ29yaWVzLmZvckVhY2goY2F0ZWdvcnkgPT4gY2F0ZWdvcnkuZXhwZW5zZXMgPSB0cmFuc2Zvcm1Ub0FycmF5KGNhdGVnb3J5LmV4cGVuc2VzKSk7XG4gICAgICByZXR1cm4gY2F0ZWdvcmllcztcbiAgICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBhZGRDYXRlZ29yeSA9IGNhdGVnb3J5ID0+IHtcbiAgaWYoY2F0ZWdvcnkubmFtZSA9PT0gJ2Vycm9yJykge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnVGhpcyBpcyBhbiBlcnJvcicpO1xuICB9XG5cbiAgY29uc3QgdXJsID0gYCR7Q0FURUdPUllfVVJMfS5qc29uYDtcbiAgcmV0dXJuIHBvc3QodXJsLCBjYXRlZ29yeSlcbiAgICAudGhlbihyZXMgPT4ge1xuICAgICAgY2F0ZWdvcnkua2V5ID0gcmVzLm5hbWU7XG4gICAgICByZXR1cm4gY2F0ZWdvcnk7XG4gICAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgdXBkYXRlQ2F0ZWdvcnkgPSBjYXRlZ29yeSA9PiB7XG4gIGNvbnN0IHVybCA9IGdldENhdGVnb3J5VXJsKGNhdGVnb3J5LmtleSk7XG4gIHJldHVybiBwdXQodXJsLCBjYXRlZ29yeSk7XG59O1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlQ2F0ZWdvcnkgPSBpZCA9PiB7XG4gIGNvbnN0IHVybCA9IGdldENhdGVnb3J5VXJsKGlkKTtcbiAgcmV0dXJuIGRlbCh1cmwpO1xufTtcblxuZXhwb3J0IGNvbnN0IGFkZEV4cGVuc2VUb0NhdGVnb3J5ID0gZXhwZW5zZSA9PiB7XG4gIGNvbnN0IHVybCA9IGAke0NBVEVHT1JZX1VSTH0vJHtleHBlbnNlLmNhdGVnb3J5SWR9L2V4cGVuc2VzLmpzb25gO1xuICByZXR1cm4gcG9zdCh1cmwsIGV4cGVuc2UpXG4gICAgLnRoZW4ocmVzID0+IHtcbiAgICAgIGV4cGVuc2Uua2V5ID0gcmVzLm5hbWU7XG4gICAgICByZXR1cm4gZXhwZW5zZTtcbiAgICB9KTtcbn07XG5leHBvcnQgY29uc3QgdXBkYXRlRXhwZW5zZUNhdGVnb3J5ID0gZXhwZW5zZSA9PiB7XG4gIGNvbnN0IHVybCA9IGdldEV4cGVuc2VVcmwoZXhwZW5zZS5jYXRlZ29yeUlkLCBleHBlbnNlLmtleSk7XG4gIHJldHVybiBwdXQodXJsLCBleHBlbnNlKTtcbn07XG5cbmV4cG9ydCBjb25zdCByZW1vdmVFeHBlbnNlQ2F0ZWdvcnkgPSBleHBlbnNlID0+IHtcbiAgY29uc3QgdXJsID0gZ2V0RXhwZW5zZVVybChleHBlbnNlLmNhdGVnb3J5SWQsIGV4cGVuc2Uua2V5KTtcbiAgcmV0dXJuIGRlbCh1cmwpO1xufTsiLCJcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vRXhwZW5zZUZvcm0uY3NzJztcblxuY2xhc3MgRXhwZW5zZUZvcm0gZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0ZSA9IHtcbiAgICBlZGl0aW5nOiBmYWxzZSxcbiAgICBpZDogbnVsbCxcbiAgICBuYW1lOiAnJyxcbiAgICBwcmljZTogJydcbiAgfTtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGV4cGVuc2U6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgb25Db21wbGV0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNhbmNlbDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgY2F0ZWdvcnlJZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgZXhwZW5zZSB9ID0gdGhpcy5wcm9wcztcbiAgICBpZighZXhwZW5zZSkgcmV0dXJuIG51bGw7XG5cbiAgICB0aGlzLnNldFN0YXRlKGV4cGVuc2UpO1xuICB9XG4gIFxuICBoYW5kbGVDaGFuZ2UgPSAoeyB0YXJnZXQgfSkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBbdGFyZ2V0Lm5hbWVdOiB0YXJnZXQudmFsdWUgfSk7XG4gIH07XG4gIFxuICBoYW5kbGVTdWJtaXQgPSAoZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHsgbmFtZSwgcHJpY2UsIGtleSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBleHBlbnNlID0geyBuYW1lLCBwcmljZSwgfTtcbiAgICBpZihrZXkpIGV4cGVuc2Uua2V5ID0ga2V5O1xuICAgIGlmKHRoaXMucHJvcHMuZXhwZW5zZSkge1xuICAgICAgZXhwZW5zZS5jYXRlZ29yeUlkID0gdGhpcy5wcm9wcy5leHBlbnNlLmNhdGVnb3J5SWQ7XG4gICAgfVxuICAgIHRoaXMucHJvcHMub25Db21wbGV0ZShleHBlbnNlKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgbmFtZTogJycsIHByaWNlOiAnJyB9KTtcbiAgfTtcblxuICByZW5kZXIoKSB7IFxuICAgIGNvbnN0IHsga2V5LCBuYW1lLCBwcmljZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IG9uQ2FuY2VsIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxmb3JtICBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9PlxuICAgICAgICB7LyogPHA+RVhQRU5TRSBGT1JNPC9wPiAqL31cbiAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgTmFtZTpcbiAgICAgICAgICA8aW5wdXQgbmFtZT1cIm5hbWVcIiB2YWx1ZT17bmFtZX0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfS8+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgUHJpY2U6XG4gICAgICAgICAgPGlucHV0IG5hbWU9XCJwcmljZVwiIHZhbHVlPXtwcmljZX0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfS8+XG4gICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMuZm9ybUJ1dHRvbnN9PlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiPnsga2V5ID8gJ1VwZGF0ZScgOiAnQWRkJyB9PC9idXR0b24+XG4gICAgICAgICAge2tleSAmJiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXtvbkNhbmNlbH0+Q2FuY2VsPC9idXR0b24+fVxuICAgICAgICA8L3NwYW4+XG4gICAgICAgIDxkaXYgPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZm9ybT5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEV4cGVuc2VGb3JtO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmNsYXNzIENhdGVnb3J5Rm9ybSBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRlID0ge1xuICAgIGVkaXRpbmc6IGZhbHNlLFxuICAgIGtleTogbnVsbCxcbiAgICBuYW1lOiAnJyxcbiAgICBidWRnZXQ6ICcnLCAgICBcbiAgICBleHBlbnNlczogW10sXG4gICAgY2F0ZWdvcnk6IG51bGwsXG4gIH07XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjYXRlZ29yeTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvbkNvbXBsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uQ2FuY2VsOiBQcm9wVHlwZXMuZnVuY1xuICB9O1xuICBcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBjYXRlZ29yeSB9ID0gdGhpcy5wcm9wcztcbiAgICBpZighY2F0ZWdvcnkpIHJldHVybjtcblxuICAgIHRoaXMuc2V0U3RhdGUoY2F0ZWdvcnkpO1xuICB9XG4gIFxuICBoYW5kbGVTdWJtaXQgPSAoZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHsgbmFtZSwgYnVkZ2V0LCBrZXkgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgY2F0ZWdvcnkgPSB7IG5hbWUsIGJ1ZGdldCB9O1xuICAgIGlmKGtleSkgY2F0ZWdvcnkua2V5ID0ga2V5O1xuXG4gICAgdGhpcy5wcm9wcy5vbkNvbXBsZXRlKGNhdGVnb3J5KTtcbiAgICB0aGlzLnNldFN0YXRlKHsgbmFtZTogJycsIGJ1ZGdldDogJycgfSk7XG4gIH07XG4gIFxuICBoYW5kbGVDaGFuZ2UgPSAoeyB0YXJnZXQgfSkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBbdGFyZ2V0Lm5hbWVdOiB0YXJnZXQudmFsdWUgfSk7XG4gIH07XG5cbiAgcmVuZGVyKCkgeyBcbiAgICBjb25zdCB7IGtleSwgbmFtZSwgYnVkZ2V0IH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgb25DYW5jZWwgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fT5cbiAgICAgICAgPGxhYmVsPlxuICAgICAgICAgIE5hbWU6XG4gICAgICAgICAgPGlucHV0IG5hbWU9XCJuYW1lXCIgdmFsdWU9e25hbWV9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0vPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgQnVkZ2V0OlxuICAgICAgICAgIDxpbnB1dCBuYW1lPVwiYnVkZ2V0XCIgdmFsdWU9e2J1ZGdldH0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfS8+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCI+eyBrZXkgPyAnVXBkYXRlJyA6ICdBZGQnIH08L2J1dHRvbj5cbiAgICAgICAgICAgIHtrZXkgJiYgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17b25DYW5jZWx9PkNhbmNlbDwvYnV0dG9uPn1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9mb3JtPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2F0ZWdvcnlGb3JtO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuZXhwb3J0IGRlZmF1bHQgZnJlZUdsb2JhbDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgQXBwIGZyb20gJy4vY29tcG9uZW50cy9hcHAvQXBwJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHN0b3JlIGZyb20gJy4vc3RvcmUvc3RvcmUnO1xuaW1wb3J0ICcuL3N0eWxlcy9tYWluLmNzcyc7XG5cblxuUmVhY3RET00ucmVuZGVyKFxuICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICA8QXBwLz5cbiAgPC9Qcm92aWRlcj4sXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290Jylcbik7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi40LjJcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBrPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxwPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKSxxPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLHI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcix0PXI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdj1yP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx3PXI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHg9cj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQseT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx6PXI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsQT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLEI9XG5yP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMjtyJiZTeW1ib2wuZm9yKFwicmVhY3QudGltZW91dFwiKTt2YXIgQz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gRChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWUrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO24oITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixlKX1cbnZhciBFPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fTtmdW5jdGlvbiBGKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fEV9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/RChcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEcoKXt9XG5HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fEV9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2soSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGM9dm9pZCAwLGQ9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbY10mJihkW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjp0LHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09dH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixlLGMpe2lmKFAubGVuZ3RoKXt2YXIgZD1QLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19ZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixlLGMpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB0OmNhc2UgdTpnPSEwfX1pZihnKXJldHVybiBlKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2Q9YVtoXTt2YXIgZj1iK1QoZCxoKTtnKz1TKGQsZixlLGMpfWVsc2UgaWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYT9mPW51bGw6KGY9QyYmYVtDXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxcbmg9MDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVChkLGgrKyksZys9UyhkLGYsZSxjKTtlbHNlXCJvYmplY3RcIj09PWQmJihlPVwiXCIrYSxEKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjplLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBVKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIFYoYSxiLGUpe3ZhciBjPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VyhhLGMsZSxxLnRoYXRSZXR1cm5zQXJndW1lbnQpOm51bGwhPWEmJihOKGEpJiYoYj1kKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBXKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxkKTtudWxsPT1hfHxTKGEsXCJcIixWLGIpO1IoYil9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtXKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGUpO251bGw9PWF8fFMoYSxcIlwiLFUsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixxLnRoYXRSZXR1cm5zTnVsbCxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtXKGEsYixudWxsLHEudGhhdFJldHVybnNBcmd1bWVudCk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TihhKT92b2lkIDA6RChcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RixQdXJlQ29tcG9uZW50OkgsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnosXG5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfZGVmYXVsdFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX2NoYW5nZWRCaXRzOjAsX2NoYW5nZWRCaXRzMjowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6eSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpCLHJlbmRlcjphfX0sRnJhZ21lbnQ6dixTdHJpY3RNb2RlOncsdW5zdGFibGVfQXN5bmNNb2RlOkEsdW5zdGFibGVfUHJvZmlsZXI6eCxjcmVhdGVFbGVtZW50Ok0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixlKXtudWxsPT09YXx8dm9pZCAwPT09YT9EKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxkPWsoe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9Si5jdXJyZW50KTt2b2lkIDAhPT1cbmIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjp0LHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi40LjJcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6SixcbmFzc2lnbjprfX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0P1ouZGVmYXVsdDpaO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi40LjJcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLGJhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxwPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHY9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIiksZGE9cmVxdWlyZShcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIiksZWE9cmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSxmYT1yZXF1aXJlKFwiZmJqcy9saWIvY29udGFpbnNOb2RlXCIpLGhhPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKTtcbmZ1bmN0aW9uIEEoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTthYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWJhP3ZvaWQgMDpBKFwiMjI3XCIpO1xuZnVuY3Rpb24gaWEoYSxiLGMsZCxlLGYsZyxoLGspe3RoaXMuX2hhc0NhdWdodEVycm9yPSExO3RoaXMuX2NhdWdodEVycm9yPW51bGw7dmFyIG49QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbil9Y2F0Y2gocil7dGhpcy5fY2F1Z2h0RXJyb3I9cix0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMH19XG52YXIgQj17X2NhdWdodEVycm9yOm51bGwsX2hhc0NhdWdodEVycm9yOiExLF9yZXRocm93RXJyb3I6bnVsbCxfaGFzUmV0aHJvd0Vycm9yOiExLGludm9rZUd1YXJkZWRDYWxsYmFjazpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayl7aWEuYXBwbHkoQixhcmd1bWVudHMpfSxpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3I6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGspe0IuaW52b2tlR3VhcmRlZENhbGxiYWNrLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihCLmhhc0NhdWdodEVycm9yKCkpe3ZhciBuPUIuY2xlYXJDYXVnaHRFcnJvcigpO0IuX2hhc1JldGhyb3dFcnJvcnx8KEIuX2hhc1JldGhyb3dFcnJvcj0hMCxCLl9yZXRocm93RXJyb3I9bil9fSxyZXRocm93Q2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4ga2EuYXBwbHkoQixhcmd1bWVudHMpfSxoYXNDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBCLl9oYXNDYXVnaHRFcnJvcn0sY2xlYXJDYXVnaHRFcnJvcjpmdW5jdGlvbigpe2lmKEIuX2hhc0NhdWdodEVycm9yKXt2YXIgYT1cbkIuX2NhdWdodEVycm9yO0IuX2NhdWdodEVycm9yPW51bGw7Qi5faGFzQ2F1Z2h0RXJyb3I9ITE7cmV0dXJuIGF9QShcIjE5OFwiKX19O2Z1bmN0aW9uIGthKCl7aWYoQi5faGFzUmV0aHJvd0Vycm9yKXt2YXIgYT1CLl9yZXRocm93RXJyb3I7Qi5fcmV0aHJvd0Vycm9yPW51bGw7Qi5faGFzUmV0aHJvd0Vycm9yPSExO3Rocm93IGE7fX12YXIgbGE9bnVsbCxtYT17fTtcbmZ1bmN0aW9uIG5hKCl7aWYobGEpZm9yKHZhciBhIGluIG1hKXt2YXIgYj1tYVthXSxjPWxhLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6QShcIjk2XCIsYSk7aWYoIW9hW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOkEoXCI5N1wiLGEpO29hW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7cGEuaGFzT3duUHJvcGVydHkoaCk/QShcIjk5XCIsaCk6dm9pZCAwO3BhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnFhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyhxYShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2U/dm9pZCAwOkEoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiBxYShhLGIsYyl7cmFbYV0/QShcIjEwMFwiLGEpOnZvaWQgMDtyYVthXT1iO3NhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIG9hPVtdLHBhPXt9LHJhPXt9LHNhPXt9O2Z1bmN0aW9uIHRhKGEpe2xhP0EoXCIxMDFcIik6dm9pZCAwO2xhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO25hKCl9ZnVuY3Rpb24gdWEoYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107bWEuaGFzT3duUHJvcGVydHkoYykmJm1hW2NdPT09ZHx8KG1hW2NdP0EoXCIxMDJcIixjKTp2b2lkIDAsbWFbY109ZCxiPSEwKX1iJiZuYSgpfVxudmFyIHZhPXtwbHVnaW5zOm9hLGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczpwYSxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczpyYSxyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOnNhLHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6bnVsbCxpbmplY3RFdmVudFBsdWdpbk9yZGVyOnRhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp1YX0sd2E9bnVsbCx4YT1udWxsLHlhPW51bGw7ZnVuY3Rpb24gemEoYSxiLGMsZCl7Yj1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD15YShkKTtCLmludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcihiLGMsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gQWEoYSxiKXtudWxsPT1iP0EoXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIEJhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBDYT1udWxsO1xuZnVuY3Rpb24gRGEoYSxiKXtpZihhKXt2YXIgYz1hLl9kaXNwYXRjaExpc3RlbmVycyxkPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYykpZm9yKHZhciBlPTA7ZTxjLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtlKyspemEoYSxiLGNbZV0sZFtlXSk7ZWxzZSBjJiZ6YShhLGIsYyxkKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBFYShhKXtyZXR1cm4gRGEoYSwhMCl9ZnVuY3Rpb24gRmEoYSl7cmV0dXJuIERhKGEsITEpfXZhciBHYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp0YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6dWF9O1xuZnVuY3Rpb24gSGEoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD13YShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz9BKFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gSWEoYSxiKXtudWxsIT09YSYmKENhPUFhKENhLGEpKTthPUNhO0NhPW51bGw7YSYmKGI/QmEoYSxFYSk6QmEoYSxGYSksQ2E/QShcIjk1XCIpOnZvaWQgMCxCLnJldGhyb3dDYXVnaHRFcnJvcigpKX1mdW5jdGlvbiBKYShhLGIsYyxkKXtmb3IodmFyIGU9bnVsbCxmPTA7ZjxvYS5sZW5ndGg7ZisrKXt2YXIgZz1vYVtmXTtnJiYoZz1nLmV4dHJhY3RFdmVudHMoYSxiLGMsZCkpJiYoZT1BYShlLGcpKX1JYShlLCExKX12YXIgS2E9e2luamVjdGlvbjpHYSxnZXRMaXN0ZW5lcjpIYSxydW5FdmVudHNJbkJhdGNoOklhLHJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2g6SmF9LExhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEM9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitMYSxNYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0xhO1xuZnVuY3Rpb24gTmEoYSl7aWYoYVtDXSlyZXR1cm4gYVtDXTtmb3IoOyFhW0NdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbQ107cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBPYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7QShcIjMzXCIpfWZ1bmN0aW9uIFBhKGEpe3JldHVybiBhW01hXXx8bnVsbH12YXIgUWE9e3ByZWNhY2hlRmliZXJOb2RlOmZ1bmN0aW9uKGEsYil7YltDXT1hfSxnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZTpOYSxnZXRJbnN0YW5jZUZyb21Ob2RlOmZ1bmN0aW9uKGEpe2E9YVtDXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfSxnZXROb2RlRnJvbUluc3RhbmNlOk9hLGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU6UGEsdXBkYXRlRmliZXJQcm9wczpmdW5jdGlvbihhLGIpe2FbTWFdPWJ9fTtcbmZ1bmN0aW9uIEYoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBSYShhLGIsYyl7Zm9yKHZhciBkPVtdO2E7KWQucHVzaChhKSxhPUYoYSk7Zm9yKGE9ZC5sZW5ndGg7MDxhLS07KWIoZFthXSxcImNhcHR1cmVkXCIsYyk7Zm9yKGE9MDthPGQubGVuZ3RoO2ErKyliKGRbYV0sXCJidWJibGVkXCIsYyl9ZnVuY3Rpb24gU2EoYSxiLGMpe2lmKGI9SGEoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1BYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1BYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBUYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzJiZSYShhLl90YXJnZXRJbnN0LFNhLGEpfVxuZnVuY3Rpb24gVWEoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7dmFyIGI9YS5fdGFyZ2V0SW5zdDtiPWI/RihiKTpudWxsO1JhKGIsU2EsYSl9fWZ1bmN0aW9uIFZhKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPUhhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1BYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1BYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gWGEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWYShhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWWEoYSl7QmEoYSxUYSl9XG5mdW5jdGlvbiBaYShhLGIsYyxkKXtpZihjJiZkKWE6e3ZhciBlPWM7Zm9yKHZhciBmPWQsZz0wLGg9ZTtoO2g9RihoKSlnKys7aD0wO2Zvcih2YXIgaz1mO2s7az1GKGspKWgrKztmb3IoOzA8Zy1oOyllPUYoZSksZy0tO2Zvcig7MDxoLWc7KWY9RihmKSxoLS07Zm9yKDtnLS07KXtpZihlPT09Znx8ZT09PWYuYWx0ZXJuYXRlKWJyZWFrIGE7ZT1GKGUpO2Y9RihmKX1lPW51bGx9ZWxzZSBlPW51bGw7Zj1lO2ZvcihlPVtdO2MmJmMhPT1mOyl7Zz1jLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWYpYnJlYWs7ZS5wdXNoKGMpO2M9RihjKX1mb3IoYz1bXTtkJiZkIT09Zjspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1mKWJyZWFrO2MucHVzaChkKTtkPUYoZCl9Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrKylWYShlW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihhPWMubGVuZ3RoOzA8YS0tOylWYShjW2FdLFwiY2FwdHVyZWRcIixiKX1cbnZhciAkYT17YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczpZYSxhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDpmdW5jdGlvbihhKXtCYShhLFVhKX0sYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOlphLGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOmZ1bmN0aW9uKGEpe0JhKGEsWGEpfX07ZnVuY3Rpb24gYWIoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtjW1wibXNcIithXT1cIk1TXCIrYjtjW1wiT1wiK2FdPVwib1wiK2IudG9Mb3dlckNhc2UoKTtyZXR1cm4gY31cbnZhciBiYj17YW5pbWF0aW9uZW5kOmFiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOmFiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6YWIoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6YWIoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxjYj17fSxkYj17fTttLmNhblVzZURPTSYmKGRiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIGJiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIGJiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIGJiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIGJiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7XG5mdW5jdGlvbiBlYihhKXtpZihjYlthXSlyZXR1cm4gY2JbYV07aWYoIWJiW2FdKXJldHVybiBhO3ZhciBiPWJiW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIGRiKXJldHVybiBjYlthXT1iW2NdO3JldHVybiBhfXZhciBmYj1lYihcImFuaW1hdGlvbmVuZFwiKSxnYj1lYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxoYj1lYihcImFuaW1hdGlvbnN0YXJ0XCIpLGliPWViKFwidHJhbnNpdGlvbmVuZFwiKSxqYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksa2I9bnVsbDtcbmZ1bmN0aW9uIGxiKCl7IWtiJiZtLmNhblVzZURPTSYmKGtiPVwidGV4dENvbnRlbnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudD9cInRleHRDb250ZW50XCI6XCJpbm5lclRleHRcIik7cmV0dXJuIGtifXZhciBHPXtfcm9vdDpudWxsLF9zdGFydFRleHQ6bnVsbCxfZmFsbGJhY2tUZXh0Om51bGx9O2Z1bmN0aW9uIG1iKCl7aWYoRy5fZmFsbGJhY2tUZXh0KXJldHVybiBHLl9mYWxsYmFja1RleHQ7dmFyIGEsYj1HLl9zdGFydFRleHQsYz1iLmxlbmd0aCxkLGU9bmIoKSxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO0cuX2ZhbGxiYWNrVGV4dD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApO3JldHVybiBHLl9mYWxsYmFja1RleHR9ZnVuY3Rpb24gbmIoKXtyZXR1cm5cInZhbHVlXCJpbiBHLl9yb290P0cuX3Jvb3QudmFsdWU6Ry5fcm9vdFtsYigpXX1cbnZhciBvYj1cImRpc3BhdGNoQ29uZmlnIF90YXJnZXRJbnN0IG5hdGl2ZUV2ZW50IGlzRGVmYXVsdFByZXZlbnRlZCBpc1Byb3BhZ2F0aW9uU3RvcHBlZCBfZGlzcGF0Y2hMaXN0ZW5lcnMgX2Rpc3BhdGNoSW5zdGFuY2VzXCIuc3BsaXQoXCIgXCIpLHBiPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDp2LnRoYXRSZXR1cm5zTnVsbCxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuZnVuY3Rpb24gSChhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/di50aGF0UmV0dXJuc1RydWU6di50aGF0UmV0dXJuc0ZhbHNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9di50aGF0UmV0dXJuc0ZhbHNlO3JldHVybiB0aGlzfVxucChILnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXYudGhhdFJldHVybnNUcnVlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXYudGhhdFJldHVybnNUcnVlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PXYudGhhdFJldHVybnNUcnVlfSxpc1BlcnNpc3RlbnQ6di50aGF0UmV0dXJuc0ZhbHNlLFxuZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLGI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7Zm9yKGE9MDthPG9iLmxlbmd0aDthKyspdGhpc1tvYlthXV09bnVsbH19KTtILkludGVyZmFjZT1wYjtILmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtwKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1wKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO3FiKGMpO3JldHVybiBjfTtxYihIKTtcbmZ1bmN0aW9uIHJiKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfWZ1bmN0aW9uIHNiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDpBKFwiMjIzXCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBxYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1yYjthLnJlbGVhc2U9c2J9dmFyIHRiPUguZXh0ZW5kKHtkYXRhOm51bGx9KSx1Yj1ILmV4dGVuZCh7ZGF0YTpudWxsfSksdmI9WzksMTMsMjcsMzJdLHdiPW0uY2FuVXNlRE9NJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyx4Yj1udWxsO20uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJih4Yj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHliPW0uY2FuVXNlRE9NJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYheGIsemI9bS5jYW5Vc2VET00mJighd2J8fHhiJiY4PHhiJiYxMT49eGIpLEFiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLEJiPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LENiPSExO1xuZnVuY3Rpb24gRGIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT12Yi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIEViKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIEZiPSExO2Z1bmN0aW9uIEdiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBFYihiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7Q2I9ITA7cmV0dXJuIEFiO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PUFiJiZDYj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBIYihhLGIpe2lmKEZiKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCF3YiYmRGIoYSxiKT8oYT1tYigpLEcuX3Jvb3Q9bnVsbCxHLl9zdGFydFRleHQ9bnVsbCxHLl9mYWxsYmFja1RleHQ9bnVsbCxGYj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gemI/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgSWI9e2V2ZW50VHlwZXM6QmIsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKHdiKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmU9QmIuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmU9QmIuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjplPUJiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSBGYj9EYihhLGMpJiYoZT1CYi5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPUJiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KHpiJiYoRmJ8fGUhPT1CYi5jb21wb3NpdGlvblN0YXJ0P2U9PT1CYi5jb21wb3NpdGlvbkVuZCYmRmImJihmPW1iKCkpOihHLl9yb290PWQsRy5fc3RhcnRUZXh0PW5iKCksRmI9ITApKSxlPXRiLmdldFBvb2xlZChlLGIsYyxkKSxmP2UuZGF0YT1cbmY6KGY9RWIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLFlhKGUpLGY9ZSk6Zj1udWxsOyhhPXliP0diKGEsYyk6SGIoYSxjKSk/KGI9dWIuZ2V0UG9vbGVkKEJiLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxZYShiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxKYj1udWxsLEtiPXtpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe0piPWF9fSxMYj1udWxsLE1iPW51bGw7ZnVuY3Rpb24gTmIoYSl7aWYoYT14YShhKSl7SmImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBKYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlP3ZvaWQgMDpBKFwiMTk0XCIpO3ZhciBiPXdhKGEuc3RhdGVOb2RlKTtKYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gT2IoYSl7TGI/TWI/TWIucHVzaChhKTpNYj1bYV06TGI9YX1cbmZ1bmN0aW9uIFBiKCl7cmV0dXJuIG51bGwhPT1MYnx8bnVsbCE9PU1ifWZ1bmN0aW9uIFFiKCl7aWYoTGIpe3ZhciBhPUxiLGI9TWI7TWI9TGI9bnVsbDtOYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspTmIoYlthXSl9fXZhciBSYj17aW5qZWN0aW9uOktiLGVucXVldWVTdGF0ZVJlc3RvcmU6T2IsbmVlZHNTdGF0ZVJlc3RvcmU6UGIscmVzdG9yZVN0YXRlSWZOZWVkZWQ6UWJ9O2Z1bmN0aW9uIFNiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gVGIoYSxiLGMpe3JldHVybiBhKGIsYyl9ZnVuY3Rpb24gVWIoKXt9dmFyIFZiPSExO2Z1bmN0aW9uIFdiKGEsYil7aWYoVmIpcmV0dXJuIGEoYik7VmI9ITA7dHJ5e3JldHVybiBTYihhLGIpfWZpbmFsbHl7VmI9ITEsUGIoKSYmKFViKCksUWIoKSl9fVxudmFyIFhiPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIFliKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhWGJbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIFpiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1cbmZ1bmN0aW9uICRiKGEsYil7aWYoIW0uY2FuVXNlRE9NfHxiJiYhKFwiYWRkRXZlbnRMaXN0ZW5lclwiaW4gZG9jdW1lbnQpKXJldHVybiExO2E9XCJvblwiK2E7Yj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gYWMoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIGJjKGEpe3ZhciBiPWFjKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBjYyhhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9YmMoYSkpfWZ1bmN0aW9uIGRjKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1hYyhhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfVxudmFyIGVjPWJhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLGZjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsZ2M9ZmM/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsaGM9ZmM/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixpYz1mYz9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsamM9ZmM/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGtjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxsYz1mYz9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksbWM9ZmM/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAscGM9ZmM/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEscWM9ZmM/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHJjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC50aW1lb3V0XCIpOlxuNjAxMTMsc2M9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIHRjKGEpe2lmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1zYyYmYVtzY118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIHVjKGEpe3ZhciBiPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYi5kaXNwbGF5TmFtZXx8Yi5uYW1lO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYilyZXR1cm4gYjtzd2l0Y2goYil7Y2FzZSBwYzpyZXR1cm5cIkFzeW5jTW9kZVwiO2Nhc2UgbWM6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBpYzpyZXR1cm5cIlJlYWN0RnJhZ21lbnRcIjtjYXNlIGhjOnJldHVyblwiUmVhY3RQb3J0YWxcIjtjYXNlIGtjOnJldHVyblwiUHJvZmlsZXIoXCIrYS5wZW5kaW5nUHJvcHMuaWQrXCIpXCI7Y2FzZSBsYzpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGpjOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgcmM6cmV0dXJuXCJUaW1lb3V0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yilzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBxYzpyZXR1cm4gYT1iLnJlbmRlci5kaXNwbGF5TmFtZXx8Yi5yZW5kZXIubmFtZXx8XCJcIixcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrXG5hK1wiKVwiOlwiRm9yd2FyZFJlZlwifXJldHVybiBudWxsfWZ1bmN0aW9uIHZjKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDE6Y2FzZSAyOmNhc2UgNTp2YXIgYz1hLl9kZWJ1Z093bmVyLGQ9YS5fZGVidWdTb3VyY2U7dmFyIGU9dWMoYSk7dmFyIGY9bnVsbDtjJiYoZj11YyhjKSk7Yz1kO2U9XCJcXG4gICAgaW4gXCIrKGV8fFwiVW5rbm93blwiKSsoYz9cIiAoYXQgXCIrYy5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLFwiXCIpK1wiOlwiK2MubGluZU51bWJlcitcIilcIjpmP1wiIChjcmVhdGVkIGJ5IFwiK2YrXCIpXCI6XCJcIik7YnJlYWsgYTtkZWZhdWx0OmU9XCJcIn1iKz1lO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIgd2M9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLHhjPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksemM9e30sQWM9e307XG5mdW5jdGlvbiBCYyhhKXtpZih4Yy5jYWxsKEFjLGEpKXJldHVybiEwO2lmKHhjLmNhbGwoemMsYSkpcmV0dXJuITE7aWYod2MudGVzdChhKSlyZXR1cm4gQWNbYV09ITA7emNbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gQ2MoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBEYyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxDYyhhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEkoYSxiLGMsZCxlKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1ifXZhciBKPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsMCwhMSxhLG51bGwpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0pbYl09bmV3IEkoYiwxLCExLGFbMV0sbnVsbCl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7SlthXT1uZXcgSShhLDIsITEsYSxudWxsKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7SlthXT1uZXcgSShhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSwzLCEwLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsNCwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7SlthXT1uZXcgSShhLDYsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgRWM9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBGYyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShFYyxcbkZjKTtKW2JdPW5ldyBJKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShFYyxGYyk7SltiXT1uZXcgSShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShFYyxGYyk7SltiXT1uZXcgSShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO0oudGFiSW5kZXg9bmV3IEkoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24gR2MoYSxiLGMsZCl7dmFyIGU9Si5oYXNPd25Qcm9wZXJ0eShiKT9KW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoRGMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP0JjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiBIYyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gcCh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gSWMoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9SmMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBLYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJkdjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBMYyhhLGIpe0tjKGEsYik7dmFyIGM9SmMoYi52YWx1ZSk7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09Yi50eXBlKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2IuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9NYyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZNYyhhLGIudHlwZSxKYyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIE5jKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO3ZhciBkPWEudmFsdWU7Y3x8Yj09PWR8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfWZ1bmN0aW9uIE1jKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1cbmZ1bmN0aW9uIEpjKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX12YXIgT2M9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gUGMoYSxiLGMpe2E9SC5nZXRQb29sZWQoT2MuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtPYihjKTtZYShhKTtyZXR1cm4gYX12YXIgUWM9bnVsbCxSYz1udWxsO2Z1bmN0aW9uIFNjKGEpe0lhKGEsITEpfWZ1bmN0aW9uIFRjKGEpe3ZhciBiPU9hKGEpO2lmKGRjKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gVWMoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgVmM9ITE7bS5jYW5Vc2VET00mJihWYz0kYihcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBXYygpe1FjJiYoUWMuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsWGMpLFJjPVFjPW51bGwpfWZ1bmN0aW9uIFhjKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZUYyhSYykmJihhPVBjKFJjLGEsWmIoYSkpLFdiKFNjLGEpKX1mdW5jdGlvbiBZYyhhLGIsYyl7XCJmb2N1c1wiPT09YT8oV2MoKSxRYz1iLFJjPWMsUWMuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsWGMpKTpcImJsdXJcIj09PWEmJldjKCl9ZnVuY3Rpb24gWmMoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gVGMoUmMpfVxuZnVuY3Rpb24gJGMoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBUYyhiKX1mdW5jdGlvbiBhZChhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBUYyhiKX1cbnZhciBiZD17ZXZlbnRUeXBlczpPYyxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOlZjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9PYShiKTp3aW5kb3csZj12b2lkIDAsZz12b2lkIDAsaD1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWh8fFwiaW5wdXRcIj09PWgmJlwiZmlsZVwiPT09ZS50eXBlP2Y9VWM6WWIoZSk/VmM/Zj1hZDooZj1aYyxnPVljKTooaD1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09aC50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj0kYyk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gUGMoZixjLGQpO2cmJmcoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZNYyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxjZD1ILmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksZGQ9e0FsdDpcImFsdEtleVwiLFxuQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gZWQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1kZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIGZkKCl7cmV0dXJuIGVkfVxudmFyIGdkPWNkLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpmZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX19KSxoZD1nZC5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLGlkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LFxubW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxqZD17ZXZlbnRUeXBlczppZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fFxuZS5wYXJlbnRXaW5kb3c6d2luZG93O2Y/KGY9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP05hKGIpOm51bGwpOmY9bnVsbDtpZihmPT09YilyZXR1cm4gbnVsbDt2YXIgZz12b2lkIDAsaD12b2lkIDAsaz12b2lkIDAsbj12b2lkIDA7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpZz1nZCxoPWlkLm1vdXNlTGVhdmUsaz1pZC5tb3VzZUVudGVyLG49XCJtb3VzZVwiO2Vsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWc9aGQsaD1pZC5wb2ludGVyTGVhdmUsaz1pZC5wb2ludGVyRW50ZXIsbj1cInBvaW50ZXJcIjthPW51bGw9PWY/ZTpPYShmKTtlPW51bGw9PWI/ZTpPYShiKTtoPWcuZ2V0UG9vbGVkKGgsZixjLGQpO2gudHlwZT1uK1wibGVhdmVcIjtoLnRhcmdldD1hO2gucmVsYXRlZFRhcmdldD1lO2M9Zy5nZXRQb29sZWQoayxiLGMsZCk7Yy50eXBlPW4rXCJlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PWE7WmEoaCxcbmMsZixiKTtyZXR1cm5baCxjXX19O2Z1bmN0aW9uIGtkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiLnJldHVybjspaWYoYj1iLnJldHVybiwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIGxkKGEpezIhPT1rZChhKT9BKFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIG1kKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPWtkKGEpLDM9PT1iP0EoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm4sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIGxkKGUpLGE7aWYoZz09PWQpcmV0dXJuIGxkKGUpLGI7Zz1nLnNpYmxpbmd9QShcIjE4OFwiKX1pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31nP1xudm9pZCAwOkEoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD9BKFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/QShcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBuZChhKXthPW1kKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gb2QoYSl7YT1tZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkJiY0IT09Yi50YWcpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfXZhciBwZD1ILmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSkscWQ9SC5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxyZD1jZC5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gc2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgdGQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHVkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSx2ZD1jZC5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9dGRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9c2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3VkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpmZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9zZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9zZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHdkPWdkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx4ZD1jZC5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpmZH0pLHlkPUguZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHpkPWdkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksQWQ9W1tcImFib3J0XCIsXCJhYm9ydFwiXSxbZmIsXCJhbmltYXRpb25FbmRcIl0sW2diLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCJdLFtoYixcImFuaW1hdGlvblN0YXJ0XCJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCJdLFtcImRyYWdcIixcImRyYWdcIl0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIl0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCJdLFtcImRyYWdsZWF2ZVwiLFwiZHJhZ0xlYXZlXCJdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiXSxbXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiXSxcbltcImVuZGVkXCIsXCJlbmRlZFwiXSxbXCJlcnJvclwiLFwiZXJyb3JcIl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCJdLFtcImxvYWRcIixcImxvYWRcIl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIl0sW1wibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIl0sW1wibW91c2Vtb3ZlXCIsXCJtb3VzZU1vdmVcIl0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCJdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCJdLFtcInBsYXlpbmdcIixcInBsYXlpbmdcIl0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCJdLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJPdXRcIl0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCJdLFtcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiXSxbXCJzY3JvbGxcIixcInNjcm9sbFwiXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIl0sXG5bXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCJdLFtcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIl0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIl0sW1widG91Y2htb3ZlXCIsXCJ0b3VjaE1vdmVcIl0sW2liLFwidHJhbnNpdGlvbkVuZFwiXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdLFtcIndoZWVsXCIsXCJ3aGVlbFwiXV0sQmQ9e30sQ2Q9e307ZnVuY3Rpb24gRGQoYSxiKXt2YXIgYz1hWzBdO2E9YVsxXTt2YXIgZD1cIm9uXCIrKGFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpKTtiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTtCZFthXT1iO0NkW2NdPWJ9XG5bW1wiYmx1clwiLFwiYmx1clwiXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiXSxbXCJjbGlja1wiLFwiY2xpY2tcIl0sW1wiY2xvc2VcIixcImNsb3NlXCJdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiXSxbXCJjb3B5XCIsXCJjb3B5XCJdLFtcImN1dFwiLFwiY3V0XCJdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCJdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCJdLFtcImRyb3BcIixcImRyb3BcIl0sW1wiZm9jdXNcIixcImZvY3VzXCJdLFtcImlucHV0XCIsXCJpbnB1dFwiXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCJdLFtcImtleWRvd25cIixcImtleURvd25cIl0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCJdLFtcImtleXVwXCIsXCJrZXlVcFwiXSxbXCJtb3VzZWRvd25cIixcIm1vdXNlRG93blwiXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCJdLFtcInBhc3RlXCIsXCJwYXN0ZVwiXSxbXCJwYXVzZVwiLFwicGF1c2VcIl0sW1wicGxheVwiLFwicGxheVwiXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCJdLFtcInBvaW50ZXJkb3duXCIsXCJwb2ludGVyRG93blwiXSxcbltcInBvaW50ZXJ1cFwiLFwicG9pbnRlclVwXCJdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIl0sW1wicmVzZXRcIixcInJlc2V0XCJdLFtcInNlZWtlZFwiLFwic2Vla2VkXCJdLFtcInN1Ym1pdFwiLFwic3VibWl0XCJdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIl0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiXSxbXCJ2b2x1bWVjaGFuZ2VcIixcInZvbHVtZUNoYW5nZVwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXtEZChhLCEwKX0pO0FkLmZvckVhY2goZnVuY3Rpb24oYSl7RGQoYSwhMSl9KTtcbnZhciBFZD17ZXZlbnRUeXBlczpCZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT1DZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Q2RbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1zZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9dmQ7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPXJkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9Z2Q7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbndkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9eGQ7YnJlYWs7Y2FzZSBmYjpjYXNlIGdiOmNhc2UgaGI6YT1wZDticmVhaztjYXNlIGliOmE9eWQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9Y2Q7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT16ZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPXFkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9aGQ7YnJlYWs7ZGVmYXVsdDphPUh9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtZYShiKTtyZXR1cm4gYn19LEZkPUVkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxcbkdkPVtdO2Z1bmN0aW9uIEhkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdDtkb3tpZighYil7YS5hbmNlc3RvcnMucHVzaChiKTticmVha312YXIgYztmb3IoYz1iO2MucmV0dXJuOyljPWMucmV0dXJuO2M9MyE9PWMudGFnP251bGw6Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighYylicmVhazthLmFuY2VzdG9ycy5wdXNoKGIpO2I9TmEoYyl9d2hpbGUoYik7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspYj1hLmFuY2VzdG9yc1tjXSxKYShhLnRvcExldmVsVHlwZSxiLGEubmF0aXZlRXZlbnQsWmIoYS5uYXRpdmVFdmVudCkpfXZhciBJZD0hMDtmdW5jdGlvbiBLZChhKXtJZD0hIWF9ZnVuY3Rpb24gSyhhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPShGZChhKT9MZDpNZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITEpfVxuZnVuY3Rpb24gTmQoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oRmQoYSk/TGQ6TWQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKX1mdW5jdGlvbiBMZChhLGIpe1RiKE1kLGEsYil9ZnVuY3Rpb24gTWQoYSxiKXtpZihJZCl7dmFyIGM9WmIoYik7Yz1OYShjKTtudWxsPT09Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBjLnRhZ3x8Mj09PWtkKGMpfHwoYz1udWxsKTtpZihHZC5sZW5ndGgpe3ZhciBkPUdkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e1diKEhkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+R2QubGVuZ3RoJiZHZC5wdXNoKGEpfX19XG52YXIgT2Q9e2dldCBfZW5hYmxlZCgpe3JldHVybiBJZH0sc2V0RW5hYmxlZDpLZCxpc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gSWR9LHRyYXBCdWJibGVkRXZlbnQ6Syx0cmFwQ2FwdHVyZWRFdmVudDpOZCxkaXNwYXRjaEV2ZW50Ok1kfSxQZD17fSxRZD0wLFJkPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtmdW5jdGlvbiBTZChhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxSZCl8fChhW1JkXT1RZCsrLFBkW2FbUmRdXT17fSk7cmV0dXJuIFBkW2FbUmRdXX1mdW5jdGlvbiBUZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBVZChhLGIpe3ZhciBjPVRkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPVRkKGMpfX1mdW5jdGlvbiBWZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIFdkPW0uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsWGQ9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxZZD1udWxsLFpkPW51bGwsJGQ9bnVsbCxhZT0hMTtcbmZ1bmN0aW9uIGJlKGEsYil7aWYoYWV8fG51bGw9PVlkfHxZZCE9PWRhKCkpcmV0dXJuIG51bGw7dmFyIGM9WWQ7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmVmQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OndpbmRvdy5nZXRTZWxlY3Rpb24/KGM9d2luZG93LmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pOmM9dm9pZCAwO3JldHVybiAkZCYmZWEoJGQsYyk/bnVsbDooJGQ9YyxhPUguZ2V0UG9vbGVkKFhkLnNlbGVjdCxaZCxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PVlkLFlhKGEpLGEpfVxudmFyIGNlPXtldmVudFR5cGVzOlhkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPVNkKGUpO2Y9c2Eub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBoPWZbZ107aWYoIWUuaGFzT3duUHJvcGVydHkoaCl8fCFlW2hdKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9PYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKFliKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKVlkPWUsWmQ9YiwkZD1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6JGQ9WmQ9WWQ9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6YWU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpyZXR1cm4gYWU9ITEsYmUoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoV2QpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBiZShjLGQpfXJldHVybiBudWxsfX07R2EuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIFRhcEV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt3YT1RYS5nZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlO3hhPVFhLmdldEluc3RhbmNlRnJvbU5vZGU7eWE9UWEuZ2V0Tm9kZUZyb21JbnN0YW5jZTtHYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOkVkLEVudGVyTGVhdmVFdmVudFBsdWdpbjpqZCxDaGFuZ2VFdmVudFBsdWdpbjpiZCxTZWxlY3RFdmVudFBsdWdpbjpjZSxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOklifSk7XG52YXIgZGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZT9yZXF1ZXN0QW5pbWF0aW9uRnJhbWU6dm9pZCAwLGVlPURhdGUsZmU9c2V0VGltZW91dCxnZT1jbGVhclRpbWVvdXQsaGU9dm9pZCAwO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBpZT1wZXJmb3JtYW5jZTtoZT1mdW5jdGlvbigpe3JldHVybiBpZS5ub3coKX19ZWxzZSBoZT1mdW5jdGlvbigpe3JldHVybiBlZS5ub3coKX07dmFyIGplPXZvaWQgMCxrZT12b2lkIDA7XG5pZihtLmNhblVzZURPTSl7dmFyIGxlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBkZT9kZTpmdW5jdGlvbigpe0EoXCIyNzZcIil9LEw9bnVsbCxtZT1udWxsLG5lPS0xLG9lPSExLHBlPSExLHFlPTAscmU9MzMsc2U9MzMsdGU9e2RpZFRpbWVvdXQ6ITEsdGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3ZhciBhPXFlLWhlKCk7cmV0dXJuIDA8YT9hOjB9fSx2ZT1mdW5jdGlvbihhLGIpe3ZhciBjPWEuc2NoZWR1bGVkQ2FsbGJhY2ssZD0hMTt0cnl7YyhiKSxkPSEwfWZpbmFsbHl7a2UoYSksZHx8KG9lPSEwLHdpbmRvdy5wb3N0TWVzc2FnZSh1ZSxcIipcIikpfX0sdWU9XCJfX3JlYWN0SWRsZUNhbGxiYWNrJFwiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGZ1bmN0aW9uKGEpe2lmKGEuc291cmNlPT09d2luZG93JiZhLmRhdGE9PT11ZSYmKG9lPSExLG51bGwhPT1MKSl7aWYobnVsbCE9PUwpe3ZhciBiPWhlKCk7aWYoISgtMT09PVxubmV8fG5lPmIpKXthPS0xO2Zvcih2YXIgYz1bXSxkPUw7bnVsbCE9PWQ7KXt2YXIgZT1kLnRpbWVvdXRUaW1lOy0xIT09ZSYmZTw9Yj9jLnB1c2goZCk6LTEhPT1lJiYoLTE9PT1hfHxlPGEpJiYoYT1lKTtkPWQubmV4dH1pZigwPGMubGVuZ3RoKWZvcih0ZS5kaWRUaW1lb3V0PSEwLGI9MCxkPWMubGVuZ3RoO2I8ZDtiKyspdmUoY1tiXSx0ZSk7bmU9YX19Zm9yKGE9aGUoKTswPHFlLWEmJm51bGwhPT1MOylhPUwsdGUuZGlkVGltZW91dD0hMSx2ZShhLHRlKSxhPWhlKCk7bnVsbD09PUx8fHBlfHwocGU9ITAsbGUod2UpKX19LCExKTt2YXIgd2U9ZnVuY3Rpb24oYSl7cGU9ITE7dmFyIGI9YS1xZStzZTtiPHNlJiZyZTxzZT8oOD5iJiYoYj04KSxzZT1iPHJlP3JlOmIpOnJlPWI7cWU9YStzZTtvZXx8KG9lPSEwLHdpbmRvdy5wb3N0TWVzc2FnZSh1ZSxcIipcIikpfTtqZT1mdW5jdGlvbihhLGIpe3ZhciBjPS0xO251bGwhPWImJlwibnVtYmVyXCI9PT10eXBlb2YgYi50aW1lb3V0JiYoYz1oZSgpK1xuYi50aW1lb3V0KTtpZigtMT09PW5lfHwtMSE9PWMmJmM8bmUpbmU9YzthPXtzY2hlZHVsZWRDYWxsYmFjazphLHRpbWVvdXRUaW1lOmMscHJldjpudWxsLG5leHQ6bnVsbH07bnVsbD09PUw/TD1hOihiPWEucHJldj1tZSxudWxsIT09YiYmKGIubmV4dD1hKSk7bWU9YTtwZXx8KHBlPSEwLGxlKHdlKSk7cmV0dXJuIGF9O2tlPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1hLnByZXZ8fEw9PT1hKXt2YXIgYj1hLm5leHQsYz1hLnByZXY7YS5uZXh0PW51bGw7YS5wcmV2PW51bGw7bnVsbCE9PWI/bnVsbCE9PWM/KGMubmV4dD1iLGIucHJldj1jKTooYi5wcmV2PW51bGwsTD1iKTpudWxsIT09Yz8oYy5uZXh0PW51bGwsbWU9Yyk6bWU9TD1udWxsfX19ZWxzZXt2YXIgeGU9bmV3IE1hcDtqZT1mdW5jdGlvbihhKXt2YXIgYj17c2NoZWR1bGVkQ2FsbGJhY2s6YSx0aW1lb3V0VGltZTowLG5leHQ6bnVsbCxwcmV2Om51bGx9LGM9ZmUoZnVuY3Rpb24oKXthKHt0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIEluZmluaXR5fSxcbmRpZFRpbWVvdXQ6ITF9KX0pO3hlLnNldChhLGMpO3JldHVybiBifTtrZT1mdW5jdGlvbihhKXt2YXIgYj14ZS5nZXQoYS5zY2hlZHVsZWRDYWxsYmFjayk7eGUuZGVsZXRlKGEpO2dlKGIpfX1mdW5jdGlvbiB5ZShhKXt2YXIgYj1cIlwiO2JhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsPT1hfHxcInN0cmluZ1wiIT09dHlwZW9mIGEmJlwibnVtYmVyXCIhPT10eXBlb2YgYXx8KGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gemUoYSxiKXthPXAoe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj15ZShiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBBZShhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrYztiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gQmUoYSxiKXt2YXIgYz1iLnZhbHVlO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOm51bGwhPWM/YzpiLmRlZmF1bHRWYWx1ZSx3YXNNdWx0aXBsZTohIWIubXVsdGlwbGV9fWZ1bmN0aW9uIENlKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9BKFwiOTFcIik6dm9pZCAwO3JldHVybiBwKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIERlKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/QShcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOkEoXCI5M1wiKSxiPWJbMF0pLGM9XCJcIitiKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6XCJcIitjfX1cbmZ1bmN0aW9uIEVlKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9Yi5kZWZhdWx0VmFsdWUpfWZ1bmN0aW9uIEZlKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBHZT17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBIZShhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIEllKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9IZShiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBKZT12b2lkIDAsS2U9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09R2Uuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7SmU9SmV8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7SmUuaW5uZXJIVE1MPVwiPHN2Zz5cIitiK1wiPC9zdmc+XCI7Zm9yKGI9SmUuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gTGUoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBNZT17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLFxuc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxOZT1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoTWUpLmZvckVhY2goZnVuY3Rpb24oYSl7TmUuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtNZVtiXT1NZVthXX0pfSk7XG5mdW5jdGlvbiBPZShhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIik7dmFyIGU9Yzt2YXIgZj1iW2NdO2U9bnVsbD09Znx8XCJib29sZWFuXCI9PT10eXBlb2YgZnx8XCJcIj09PWY/XCJcIjpkfHxcIm51bWJlclwiIT09dHlwZW9mIGZ8fDA9PT1mfHxNZS5oYXNPd25Qcm9wZXJ0eShlKSYmTWVbZV0/KFwiXCIrZikudHJpbSgpOmYrXCJweFwiO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgUGU9cCh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIFFlKGEsYixjKXtiJiYoUGVbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0EoXCIxMzdcIixhLGMoKSk6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj9BKFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOkEoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP0EoXCI2MlwiLGMoKSk6dm9pZCAwKX1cbmZ1bmN0aW9uIFJlKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgU2U9di50aGF0UmV0dXJucyhcIlwiKTtcbmZ1bmN0aW9uIFRlKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPVNkKGEpO2I9c2FbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF07aWYoIWMuaGFzT3duUHJvcGVydHkoZSl8fCFjW2VdKXtzd2l0Y2goZSl7Y2FzZSBcInNjcm9sbFwiOk5kKFwic2Nyb2xsXCIsYSk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpOZChcImZvY3VzXCIsYSk7TmQoXCJibHVyXCIsYSk7Yy5ibHVyPSEwO2MuZm9jdXM9ITA7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOiRiKGUsITApJiZOZChlLGEpO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1qYi5pbmRleE9mKGUpJiZLKGUsYSl9Y1tlXT0hMH19fVxuZnVuY3Rpb24gVWUoYSxiLGMsZCl7Yz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtkPT09R2UuaHRtbCYmKGQ9SGUoYSkpO2Q9PT1HZS5odG1sP1wic2NyaXB0XCI9PT1hPyhhPWMuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTphPVwic3RyaW5nXCI9PT10eXBlb2YgYi5pcz9jLmNyZWF0ZUVsZW1lbnQoYSx7aXM6Yi5pc30pOmMuY3JlYXRlRWxlbWVudChhKTphPWMuY3JlYXRlRWxlbWVudE5TKGQsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gVmUoYSxiKXtyZXR1cm4oOT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGEpfVxuZnVuY3Rpb24gV2UoYSxiLGMsZCl7dmFyIGU9UmUoYixjKTtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpLKFwibG9hZFwiLGEpO3ZhciBmPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGY9MDtmPGpiLmxlbmd0aDtmKyspSyhqYltmXSxhKTtmPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOksoXCJlcnJvclwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpLKFwiZXJyb3JcIixhKTtLKFwibG9hZFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZm9ybVwiOksoXCJyZXNldFwiLGEpO0soXCJzdWJtaXRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpLKFwidG9nZ2xlXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkljKGEsYyk7Zj1IYyhhLGMpO0soXCJpbnZhbGlkXCIsYSk7VGUoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPXplKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOkJlKGEsYyk7Zj1wKHt9LGMse3ZhbHVlOnZvaWQgMH0pO1xuSyhcImludmFsaWRcIixhKTtUZShkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6RGUoYSxjKTtmPUNlKGEsYyk7SyhcImludmFsaWRcIixhKTtUZShkLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpmPWN9UWUoYixmLFNlKTt2YXIgZz1mLGg7Zm9yKGggaW4gZylpZihnLmhhc093blByb3BlcnR5KGgpKXt2YXIgaz1nW2hdO1wic3R5bGVcIj09PWg/T2UoYSxrLFNlKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJktlKGEsaykpOlwiY2hpbGRyZW5cIj09PWg/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1ifHxcIlwiIT09aykmJkxlKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZMZShhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiZcImF1dG9Gb2N1c1wiIT09aCYmKHJhLmhhc093blByb3BlcnR5KGgpP251bGwhPWsmJlRlKGQsXG5oKTpudWxsIT1rJiZHYyhhLGgsayxlKSl9c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmNjKGEpO05jKGEsYywhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Y2MoYSk7RmUoYSxjKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9Yy52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLGMudmFsdWUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhYy5tdWx0aXBsZTtiPWMudmFsdWU7bnVsbCE9Yj9BZShhLCEhYy5tdWx0aXBsZSxiLCExKTpudWxsIT1jLmRlZmF1bHRWYWx1ZSYmQWUoYSwhIWMubXVsdGlwbGUsYy5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGEub25jbGljaz12KX19XG5mdW5jdGlvbiBYZShhLGIsYyxkLGUpe3ZhciBmPW51bGw7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmM9SGMoYSxjKTtkPUhjKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Yz16ZShhLGMpO2Q9emUoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjPXAoe30sYyx7dmFsdWU6dm9pZCAwfSk7ZD1wKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Yz1DZShhLGMpO2Q9Q2UoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGMub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz12KX1RZShiLGQsU2UpO2I9YT12b2lkIDA7dmFyIGc9bnVsbDtmb3IoYSBpbiBjKWlmKCFkLmhhc093blByb3BlcnR5KGEpJiZjLmhhc093blByb3BlcnR5KGEpJiZudWxsIT1jW2FdKWlmKFwic3R5bGVcIj09PWEpe3ZhciBoPWNbYV07Zm9yKGIgaW4gaCloLmhhc093blByb3BlcnR5KGIpJiYoZ3x8XG4oZz17fSksZ1tiXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YSYmXCJjaGlsZHJlblwiIT09YSYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiZcImF1dG9Gb2N1c1wiIT09YSYmKHJhLmhhc093blByb3BlcnR5KGEpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChhLG51bGwpKTtmb3IoYSBpbiBkKXt2YXIgaz1kW2FdO2g9bnVsbCE9Yz9jW2FdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGEpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWEpaWYoaCl7Zm9yKGIgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShiKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShiKXx8KGd8fChnPXt9KSxnW2JdPVwiXCIpO2ZvcihiIGluIGspay5oYXNPd25Qcm9wZXJ0eShiKSYmaFtiXSE9PWtbYl0mJihnfHwoZz17fSksZ1tiXT1rW2JdKX1lbHNlIGd8fChmfHwoZj1bXSksZi5wdXNoKGEsZykpLFxuZz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1hPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGEsXCJcIitrKSk6XCJjaGlsZHJlblwiPT09YT9oPT09a3x8XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWEmJihyYS5oYXNPd25Qcm9wZXJ0eShhKT8obnVsbCE9ayYmVGUoZSxhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChhLGspKX1nJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsZyk7cmV0dXJuIGZ9XG5mdW5jdGlvbiBZZShhLGIsYyxkLGUpe1wiaW5wdXRcIj09PWMmJlwicmFkaW9cIj09PWUudHlwZSYmbnVsbCE9ZS5uYW1lJiZLYyhhLGUpO1JlKGMsZCk7ZD1SZShjLGUpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7Zis9Mil7dmFyIGc9YltmXSxoPWJbZisxXTtcInN0eWxlXCI9PT1nP09lKGEsaCxTZSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9LZShhLGgpOlwiY2hpbGRyZW5cIj09PWc/TGUoYSxoKTpHYyhhLGcsaCxkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6TGMoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpFZShhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlPXZvaWQgMCxiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP0FlKGEsISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9cbkFlKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLCEwKTpBZShhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19XG5mdW5jdGlvbiBaZShhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOksoXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGQ9MDtkPGpiLmxlbmd0aDtkKyspSyhqYltkXSxhKTticmVhaztjYXNlIFwic291cmNlXCI6SyhcImVycm9yXCIsYSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6SyhcImVycm9yXCIsYSk7SyhcImxvYWRcIixhKTticmVhaztjYXNlIFwiZm9ybVwiOksoXCJyZXNldFwiLGEpO0soXCJzdWJtaXRcIixhKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOksoXCJ0b2dnbGVcIixhKTticmVhaztjYXNlIFwiaW5wdXRcIjpJYyhhLGMpO0soXCJpbnZhbGlkXCIsYSk7VGUoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpCZShhLGMpO0soXCJpbnZhbGlkXCIsYSk7VGUoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkRlKGEsYyksSyhcImludmFsaWRcIixhKSxUZShlLFwib25DaGFuZ2VcIil9UWUoYixcbmMsU2UpO2Q9bnVsbDtmb3IodmFyIGYgaW4gYylpZihjLmhhc093blByb3BlcnR5KGYpKXt2YXIgZz1jW2ZdO1wiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBnP2EudGV4dENvbnRlbnQhPT1nJiYoZD1bXCJjaGlsZHJlblwiLGddKTpcIm51bWJlclwiPT09dHlwZW9mIGcmJmEudGV4dENvbnRlbnQhPT1cIlwiK2cmJihkPVtcImNoaWxkcmVuXCIsXCJcIitnXSk6cmEuaGFzT3duUHJvcGVydHkoZikmJm51bGwhPWcmJlRlKGUsZil9c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmNjKGEpO05jKGEsYywhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Y2MoYSk7RmUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGMub25DbGljayYmKGEub25jbGljaz12KX1yZXR1cm4gZH1mdW5jdGlvbiAkZShhLGIpe3JldHVybiBhLm5vZGVWYWx1ZSE9PWJ9XG52YXIgYWY9e2NyZWF0ZUVsZW1lbnQ6VWUsY3JlYXRlVGV4dE5vZGU6VmUsc2V0SW5pdGlhbFByb3BlcnRpZXM6V2UsZGlmZlByb3BlcnRpZXM6WGUsdXBkYXRlUHJvcGVydGllczpZZSxkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzOlplLGRpZmZIeWRyYXRlZFRleHQ6JGUsd2FybkZvclVubWF0Y2hlZFRleHQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0OmZ1bmN0aW9uKCl7fSxyZXN0b3JlQ29udHJvbGxlZFN0YXRlOmZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6TGMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtcbmM9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9UGEoZCk7ZT92b2lkIDA6QShcIjkwXCIpO2RjKGQpO0xjKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpFZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmQWUoYSwhIWMubXVsdGlwbGUsYiwhMSl9fX0sYmY9bnVsbCxjZj1udWxsO2Z1bmN0aW9uIGRmKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIGVmKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwic3RyaW5nXCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIGZmPWhlLGdmPWplLGhmPWtlO2Z1bmN0aW9uIGpmKGEpe2ZvcihhPWEubmV4dFNpYmxpbmc7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24ga2YoYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfW5ldyBTZXQ7dmFyIGxmPVtdLG1mPS0xO2Z1bmN0aW9uIG5mKGEpe3JldHVybntjdXJyZW50OmF9fVxuZnVuY3Rpb24gTShhKXswPm1mfHwoYS5jdXJyZW50PWxmW21mXSxsZlttZl09bnVsbCxtZi0tKX1mdW5jdGlvbiBOKGEsYil7bWYrKztsZlttZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBvZj1uZihoYSksTz1uZighMSkscGY9aGE7ZnVuY3Rpb24gcWYoYSl7cmV0dXJuIHJmKGEpP3BmOm9mLmN1cnJlbnR9XG5mdW5jdGlvbiBzZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIGhhO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIHJmKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jaGlsZENvbnRleHRUeXBlc31mdW5jdGlvbiB0ZihhKXtyZihhKSYmKE0oTyxhKSxNKG9mLGEpKX1mdW5jdGlvbiB1ZihhKXtNKE8sYSk7TShvZixhKX1cbmZ1bmN0aW9uIHZmKGEsYixjKXtvZi5jdXJyZW50IT09aGE/QShcIjE2OFwiKTp2b2lkIDA7TihvZixiLGEpO04oTyxjLGEpfWZ1bmN0aW9uIHdmKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGUsZD1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBiO2M9Yy5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gYyllIGluIGQ/dm9pZCAwOkEoXCIxMDhcIix1YyhhKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIHAoe30sYixjKX1mdW5jdGlvbiB4ZihhKXtpZighcmYoYSkpcmV0dXJuITE7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxoYTtwZj1vZi5jdXJyZW50O04ob2YsYixhKTtOKE8sTy5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24geWYoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtjP3ZvaWQgMDpBKFwiMTY5XCIpO2lmKGIpe3ZhciBkPXdmKGEscGYpO2MuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9ZDtNKE8sYSk7TShvZixhKTtOKG9mLGQsYSl9ZWxzZSBNKE8sYSk7TihPLGIsYSl9XG5mdW5jdGlvbiB6ZihhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfVxuZnVuY3Rpb24gQWYoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO251bGw9PT1kPyhkPW5ldyB6ZihhLnRhZyxiLGEua2V5LGEubW9kZSksZC50eXBlPWEudHlwZSxkLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxkLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWQpOihkLnBlbmRpbmdQcm9wcz1iLGQuZWZmZWN0VGFnPTAsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsKTtkLmV4cGlyYXRpb25UaW1lPWM7ZC5jaGlsZD1hLmNoaWxkO2QubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7ZC5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7ZC5zaWJsaW5nPWEuc2libGluZztkLmluZGV4PWEuaW5kZXg7ZC5yZWY9YS5yZWY7cmV0dXJuIGR9XG5mdW5jdGlvbiBCZihhLGIsYyl7dmFyIGQ9YS50eXBlLGU9YS5rZXk7YT1hLnByb3BzO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXZhciBmPWQucHJvdG90eXBlJiZkLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PzI6MDtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgZClmPTU7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBpYzpyZXR1cm4gQ2YoYS5jaGlsZHJlbixiLGMsZSk7Y2FzZSBwYzpmPTExO2J8PTM7YnJlYWs7Y2FzZSBqYzpmPTExO2J8PTI7YnJlYWs7Y2FzZSBrYzpyZXR1cm4gZD1uZXcgemYoMTUsYSxlLGJ8NCksZC50eXBlPWtjLGQuZXhwaXJhdGlvblRpbWU9YyxkO2Nhc2UgcmM6Zj0xNjtifD0yO2JyZWFrO2RlZmF1bHQ6YTp7c3dpdGNoKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQ/ZC4kJHR5cGVvZjpudWxsKXtjYXNlIGxjOmY9MTM7YnJlYWsgYTtjYXNlIG1jOmY9MTI7YnJlYWsgYTtjYXNlIHFjOmY9MTQ7YnJlYWsgYTtkZWZhdWx0OkEoXCIxMzBcIixudWxsPT1kP1xuZDp0eXBlb2YgZCxcIlwiKX1mPXZvaWQgMH19Yj1uZXcgemYoZixhLGUsYik7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIENmKGEsYixjLGQpe2E9bmV3IHpmKDEwLGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gRGYoYSxiLGMpe2E9bmV3IHpmKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBFZihhLGIsYyl7Yj1uZXcgemYoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBGZihhLGIsYyl7Yj1uZXcgemYoMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwsZWFybGllc3RQZW5kaW5nVGltZTowLGxhdGVzdFBlbmRpbmdUaW1lOjAsZWFybGllc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFBpbmdlZFRpbWU6MCxwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6MCxmaW5pc2hlZFdvcms6bnVsbCxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMscmVtYWluaW5nRXhwaXJhdGlvblRpbWU6MCxmaXJzdEJhdGNoOm51bGwsbmV4dFNjaGVkdWxlZFJvb3Q6bnVsbH07cmV0dXJuIGIuc3RhdGVOb2RlPWF9dmFyIEdmPW51bGwsSGY9bnVsbDtmdW5jdGlvbiBJZihhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fVxuZnVuY3Rpb24gSmYoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7R2Y9SWYoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO0hmPUlmKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEdmJiZHZihhKX1mdW5jdGlvbiBMZihhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgSGYmJkhmKGEpfXZhciBNZj0hMTtcbmZ1bmN0aW9uIE5mKGEpe3JldHVybntleHBpcmF0aW9uVGltZTowLGJhc2VTdGF0ZTphLGZpcnN0VXBkYXRlOm51bGwsbGFzdFVwZGF0ZTpudWxsLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fWZ1bmN0aW9uIE9mKGEpe3JldHVybntleHBpcmF0aW9uVGltZTphLmV4cGlyYXRpb25UaW1lLGJhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdFVwZGF0ZTphLmZpcnN0VXBkYXRlLGxhc3RVcGRhdGU6YS5sYXN0VXBkYXRlLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fVxuZnVuY3Rpb24gUGYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gUWYoYSxiLGMpe251bGw9PT1hLmxhc3RVcGRhdGU/YS5maXJzdFVwZGF0ZT1hLmxhc3RVcGRhdGU9YjooYS5sYXN0VXBkYXRlLm5leHQ9YixhLmxhc3RVcGRhdGU9Yik7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+YylhLmV4cGlyYXRpb25UaW1lPWN9XG5mdW5jdGlvbiBSZihhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7aWYobnVsbD09PWQpe3ZhciBlPWEudXBkYXRlUXVldWU7dmFyIGY9bnVsbDtudWxsPT09ZSYmKGU9YS51cGRhdGVRdWV1ZT1OZihhLm1lbW9pemVkU3RhdGUpKX1lbHNlIGU9YS51cGRhdGVRdWV1ZSxmPWQudXBkYXRlUXVldWUsbnVsbD09PWU/bnVsbD09PWY/KGU9YS51cGRhdGVRdWV1ZT1OZihhLm1lbW9pemVkU3RhdGUpLGY9ZC51cGRhdGVRdWV1ZT1OZihkLm1lbW9pemVkU3RhdGUpKTplPWEudXBkYXRlUXVldWU9T2YoZik6bnVsbD09PWYmJihmPWQudXBkYXRlUXVldWU9T2YoZSkpO251bGw9PT1mfHxlPT09Zj9RZihlLGIsYyk6bnVsbD09PWUubGFzdFVwZGF0ZXx8bnVsbD09PWYubGFzdFVwZGF0ZT8oUWYoZSxiLGMpLFFmKGYsYixjKSk6KFFmKGUsYixjKSxmLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBTZihhLGIsYyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTtkPW51bGw9PT1kP2EudXBkYXRlUXVldWU9TmYoYS5tZW1vaXplZFN0YXRlKTpUZihhLGQpO251bGw9PT1kLmxhc3RDYXB0dXJlZFVwZGF0ZT9kLmZpcnN0Q2FwdHVyZWRVcGRhdGU9ZC5sYXN0Q2FwdHVyZWRVcGRhdGU9YjooZC5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dD1iLGQubGFzdENhcHR1cmVkVXBkYXRlPWIpO2lmKDA9PT1kLmV4cGlyYXRpb25UaW1lfHxkLmV4cGlyYXRpb25UaW1lPmMpZC5leHBpcmF0aW9uVGltZT1jfWZ1bmN0aW9uIFRmKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmI9PT1jLnVwZGF0ZVF1ZXVlJiYoYj1hLnVwZGF0ZVF1ZXVlPU9mKGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFVmKGEsYixjLGQsZSxmKXtzd2l0Y2goYy50YWcpe2Nhc2UgMTpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgMzphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXw2NDtjYXNlIDA6YT1jLnBheWxvYWQ7ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpYnJlYWs7cmV0dXJuIHAoe30sZCxlKTtjYXNlIDI6TWY9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiBWZihhLGIsYyxkLGUpe01mPSExO2lmKCEoMD09PWIuZXhwaXJhdGlvblRpbWV8fGIuZXhwaXJhdGlvblRpbWU+ZSkpe2I9VGYoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsZz1udWxsLGg9MCxrPWIuZmlyc3RVcGRhdGUsbj1mO251bGwhPT1rOyl7dmFyIHI9ay5leHBpcmF0aW9uVGltZTtpZihyPmUpe2lmKG51bGw9PT1nJiYoZz1rLGY9biksMD09PWh8fGg+ciloPXJ9ZWxzZSBuPVVmKGEsYixrLG4sYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWs6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0RWZmZWN0PWspKTtrPWsubmV4dH1yPW51bGw7Zm9yKGs9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1rOyl7dmFyIHc9ay5leHBpcmF0aW9uVGltZTtpZih3PmUpe2lmKG51bGw9PT1yJiYocj1rLG51bGw9PT1cbmcmJihmPW4pKSwwPT09aHx8aD53KWg9d31lbHNlIG49VWYoYSxiLGssbixjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9azooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdENhcHR1cmVkRWZmZWN0PWspKTtrPWsubmV4dH1udWxsPT09ZyYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09cj9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09ZyYmbnVsbD09PXImJihmPW4pO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1nO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1yO2IuZXhwaXJhdGlvblRpbWU9aDthLm1lbW9pemVkU3RhdGU9bn19XG5mdW5jdGlvbiBXZihhLGIpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBhP0EoXCIxOTFcIixhKTp2b2lkIDA7YS5jYWxsKGIpfVxuZnVuY3Rpb24gWGYoYSxiLGMpe251bGwhPT1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUmJihudWxsIT09Yi5sYXN0VXBkYXRlJiYoYi5sYXN0VXBkYXRlLm5leHQ9Yi5maXJzdENhcHR1cmVkVXBkYXRlLGIubGFzdFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZSksYi5maXJzdENhcHR1cmVkVXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlPW51bGwpO2E9Yi5maXJzdEVmZmVjdDtmb3IoYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtudWxsIT09YTspe3ZhciBkPWEuY2FsbGJhY2s7bnVsbCE9PWQmJihhLmNhbGxiYWNrPW51bGwsV2YoZCxjKSk7YT1hLm5leHRFZmZlY3R9YT1iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q7Zm9yKGIuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsO251bGwhPT1hOyliPWEuY2FsbGJhY2ssbnVsbCE9PWImJihhLmNhbGxiYWNrPW51bGwsV2YoYixjKSksYT1hLm5leHRFZmZlY3R9XG5mdW5jdGlvbiBZZihhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOnZjKGIpfX12YXIgWmY9bmYobnVsbCksJGY9bmYobnVsbCksYWc9bmYoMCk7ZnVuY3Rpb24gYmcoYSl7dmFyIGI9YS50eXBlLl9jb250ZXh0O04oYWcsYi5fY2hhbmdlZEJpdHMsYSk7TigkZixiLl9jdXJyZW50VmFsdWUsYSk7TihaZixhLGEpO2IuX2N1cnJlbnRWYWx1ZT1hLnBlbmRpbmdQcm9wcy52YWx1ZTtiLl9jaGFuZ2VkQml0cz1hLnN0YXRlTm9kZX1mdW5jdGlvbiBjZyhhKXt2YXIgYj1hZy5jdXJyZW50LGM9JGYuY3VycmVudDtNKFpmLGEpO00oJGYsYSk7TShhZyxhKTthPWEudHlwZS5fY29udGV4dDthLl9jdXJyZW50VmFsdWU9YzthLl9jaGFuZ2VkQml0cz1ifXZhciBkZz17fSxlZz1uZihkZyksZmc9bmYoZGcpLGdnPW5mKGRnKTtmdW5jdGlvbiBoZyhhKXthPT09ZGc/QShcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9XG5mdW5jdGlvbiBqZyhhLGIpe04oZ2csYixhKTtOKGZnLGEsYSk7TihlZyxkZyxhKTt2YXIgYz1iLm5vZGVUeXBlO3N3aXRjaChjKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpJZShudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yz04PT09Yz9iLnBhcmVudE5vZGU6YixiPWMubmFtZXNwYWNlVVJJfHxudWxsLGM9Yy50YWdOYW1lLGI9SWUoYixjKX1NKGVnLGEpO04oZWcsYixhKX1mdW5jdGlvbiBrZyhhKXtNKGVnLGEpO00oZmcsYSk7TShnZyxhKX1mdW5jdGlvbiBsZyhhKXtmZy5jdXJyZW50PT09YSYmKE0oZWcsYSksTShmZyxhKSl9ZnVuY3Rpb24gbWcoYSxiLGMpe3ZhciBkPWEubWVtb2l6ZWRTdGF0ZTtiPWIoYyxkKTtkPW51bGw9PT1ifHx2b2lkIDA9PT1iP2Q6cCh7fSxkLGIpO2EubWVtb2l6ZWRTdGF0ZT1kO2E9YS51cGRhdGVRdWV1ZTtudWxsIT09YSYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihhLmJhc2VTdGF0ZT1kKX1cbnZhciBxZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PWtkKGEpOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPW5nKCk7ZD1vZyhkLGEpO3ZhciBlPVBmKGQpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtSZihhLGUsZCk7cGcoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9bmcoKTtkPW9nKGQsYSk7dmFyIGU9UGYoZCk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7UmYoYSxlLGQpO3BnKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPW5nKCk7Yz1vZyhjLGEpO3ZhciBkPVBmKGMpO2QudGFnPTI7dm9pZCAwIT09XG5iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7UmYoYSxkLGMpO3BnKGEsYyl9fTtmdW5jdGlvbiByZyhhLGIsYyxkLGUsZil7dmFyIGc9YS5zdGF0ZU5vZGU7YT1hLnR5cGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2cuc2hvdWxkQ29tcG9uZW50VXBkYXRlKGMsZSxmKTphLnByb3RvdHlwZSYmYS5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWVhKGIsYyl8fCFlYShkLGUpOiEwfVxuZnVuY3Rpb24gc2coYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJnFnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gdGcoYSxiKXt2YXIgYz1hLnR5cGUsZD1hLnN0YXRlTm9kZSxlPWEucGVuZGluZ1Byb3BzLGY9cWYoYSk7ZC5wcm9wcz1lO2Quc3RhdGU9YS5tZW1vaXplZFN0YXRlO2QucmVmcz1oYTtkLmNvbnRleHQ9c2YoYSxmKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJihWZihhLGYsZSxkLGIpLGQuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihtZyhhLGYsZSksZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxNb3VudHx8KGM9ZC5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnQmJlxuZC5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxjIT09ZC5zdGF0ZSYmcWcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShkLGQuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYoVmYoYSxmLGUsZCxiKSxkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciB1Zz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gdmcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtjJiYoMiE9PWMudGFnP0EoXCIxMTBcIik6dm9pZCAwLGQ9Yy5zdGF0ZU5vZGUpO2Q/dm9pZCAwOkEoXCIxNDdcIixhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM9PT1oYT9kLnJlZnM9e306ZC5yZWZzO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP0EoXCIxNDhcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDpBKFwiMjU0XCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiB3ZyhhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmQShcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24geGcoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT1BZihhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPURmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi50eXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPXZnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1CZihjLGEubW9kZSxkKTtkLnJlZj12ZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBuKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbkVmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHIoYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8MTAhPT1iLnRhZylyZXR1cm4gYj1DZihjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gdyhhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9RGYoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgZ2M6cmV0dXJuIGM9QmYoYixhLm1vZGUsYyksYy5yZWY9dmcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIGhjOnJldHVybiBiPUVmKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZih1ZyhiKXx8dGMoYikpcmV0dXJuIGI9Q2YoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1cbmEsYjt3ZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIFAoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgZ2M6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1pYz9yKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgaGM6cmV0dXJuIGMua2V5PT09ZT9uKGEsYixjLGQpOm51bGx9aWYodWcoYyl8fHRjKGMpKXJldHVybiBudWxsIT09ZT9udWxsOnIoYSxiLGMsZCxudWxsKTt3ZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIG5jKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO1xuaWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgZ2M6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWljP3IoYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIGhjOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxuKGIsYSxkLGUpfWlmKHVnKGQpfHx0YyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxyKGIsYSxkLGUsbnVsbCk7d2coYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBKZChlLGcsaCxrKXtmb3IodmFyIHU9bnVsbCx4PW51bGwsdD1nLHE9Zz0wLG49bnVsbDtudWxsIT09dCYmcTxoLmxlbmd0aDtxKyspe3QuaW5kZXg+cT8obj10LHQ9bnVsbCk6bj10LnNpYmxpbmc7dmFyIGw9UChlLHQsaFtxXSxrKTtpZihudWxsPT09bCl7bnVsbD09PXQmJih0PW4pO2JyZWFrfWEmJnQmJm51bGw9PT1sLmFsdGVybmF0ZSYmYihlLFxudCk7Zz1mKGwsZyxxKTtudWxsPT09eD91PWw6eC5zaWJsaW5nPWw7eD1sO3Q9bn1pZihxPT09aC5sZW5ndGgpcmV0dXJuIGMoZSx0KSx1O2lmKG51bGw9PT10KXtmb3IoO3E8aC5sZW5ndGg7cSsrKWlmKHQ9dyhlLGhbcV0saykpZz1mKHQsZyxxKSxudWxsPT09eD91PXQ6eC5zaWJsaW5nPXQseD10O3JldHVybiB1fWZvcih0PWQoZSx0KTtxPGgubGVuZ3RoO3ErKylpZihuPW5jKHQsZSxxLGhbcV0saykpYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZ0LmRlbGV0ZShudWxsPT09bi5rZXk/cTpuLmtleSksZz1mKG4sZyxxKSxudWxsPT09eD91PW46eC5zaWJsaW5nPW4seD1uO2EmJnQuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIHV9ZnVuY3Rpb24gRShlLGcsaCxrKXt2YXIgdT10YyhoKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgdT9BKFwiMTUwXCIpOnZvaWQgMDtoPXUuY2FsbChoKTtudWxsPT1oP0EoXCIxNTFcIik6dm9pZCAwO2Zvcih2YXIgdD11PW51bGwsbj1nLHg9XG5nPTAseT1udWxsLGw9aC5uZXh0KCk7bnVsbCE9PW4mJiFsLmRvbmU7eCsrLGw9aC5uZXh0KCkpe24uaW5kZXg+eD8oeT1uLG49bnVsbCk6eT1uLnNpYmxpbmc7dmFyIHI9UChlLG4sbC52YWx1ZSxrKTtpZihudWxsPT09cil7bnx8KG49eSk7YnJlYWt9YSYmbiYmbnVsbD09PXIuYWx0ZXJuYXRlJiZiKGUsbik7Zz1mKHIsZyx4KTtudWxsPT09dD91PXI6dC5zaWJsaW5nPXI7dD1yO249eX1pZihsLmRvbmUpcmV0dXJuIGMoZSxuKSx1O2lmKG51bGw9PT1uKXtmb3IoOyFsLmRvbmU7eCsrLGw9aC5uZXh0KCkpbD13KGUsbC52YWx1ZSxrKSxudWxsIT09bCYmKGc9ZihsLGcseCksbnVsbD09PXQ/dT1sOnQuc2libGluZz1sLHQ9bCk7cmV0dXJuIHV9Zm9yKG49ZChlLG4pOyFsLmRvbmU7eCsrLGw9aC5uZXh0KCkpbD1uYyhuLGUseCxsLnZhbHVlLGspLG51bGwhPT1sJiYoYSYmbnVsbCE9PWwuYWx0ZXJuYXRlJiZuLmRlbGV0ZShudWxsPT09bC5rZXk/eDpsLmtleSksZz1mKGwsZyx4KSxudWxsPT09XG50P3U9bDp0LnNpYmxpbmc9bCx0PWwpO2EmJm4uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIHV9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWljJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIG49XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihuKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIGdjOmE6e249Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bilpZigxMD09PWsudGFnP2YudHlwZT09PWljOmsudHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09aWM/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPXZnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWljPyhkPUNmKGYucHJvcHMuY2hpbGRyZW4sXG5hLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPUJmKGYsYS5tb2RlLGgpLGgucmVmPXZnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSBoYzphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPUVmKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGgpLGQucmV0dXJuPVxuYSxhPWQpOihjKGEsZCksZD1EZihmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZih1ZyhmKSlyZXR1cm4gSmQoYSxkLGYsaCk7aWYodGMoZikpcmV0dXJuIEUoYSxkLGYsaCk7biYmd2coYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAyOmNhc2UgMTpoPWEudHlwZSxBKFwiMTUyXCIsaC5kaXNwbGF5TmFtZXx8aC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgeWc9eGcoITApLHpnPXhnKCExKSxBZz1udWxsLEJnPW51bGwsQ2c9ITE7ZnVuY3Rpb24gRGcoYSxiKXt2YXIgYz1uZXcgemYoNSxudWxsLG51bGwsMCk7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBFZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBGZyhhKXtpZihDZyl7dmFyIGI9Qmc7aWYoYil7dmFyIGM9YjtpZighRWcoYSxiKSl7Yj1qZihjKTtpZighYnx8IUVnKGEsYikpe2EuZWZmZWN0VGFnfD0yO0NnPSExO0FnPWE7cmV0dXJufURnKEFnLGMpfUFnPWE7Qmc9a2YoYil9ZWxzZSBhLmVmZmVjdFRhZ3w9MixDZz0hMSxBZz1hfX1cbmZ1bmN0aW9uIEdnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hLnJldHVybjtBZz1hfWZ1bmN0aW9uIEhnKGEpe2lmKGEhPT1BZylyZXR1cm4hMTtpZighQ2cpcmV0dXJuIEdnKGEpLENnPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhZWYoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPUJnO2I7KURnKGEsYiksYj1qZihiKTtHZyhhKTtCZz1BZz9qZihhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBJZygpe0JnPUFnPW51bGw7Q2c9ITF9ZnVuY3Rpb24gUShhLGIsYyl7SmcoYSxiLGMsYi5leHBpcmF0aW9uVGltZSl9ZnVuY3Rpb24gSmcoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT96ZyhiLG51bGwsYyxkKTp5ZyhiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIEtnKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gTGcoYSxiLGMsZCxlKXtLZyhhLGIpO3ZhciBmPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFjJiYhZilyZXR1cm4gZCYmeWYoYiwhMSksUihhLGIpO2M9Yi5zdGF0ZU5vZGU7ZWMuY3VycmVudD1iO3ZhciBnPWY/bnVsbDpjLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO2YmJihKZyhhLGIsbnVsbCxlKSxiLmNoaWxkPW51bGwpO0pnKGEsYixnLGUpO2IubWVtb2l6ZWRTdGF0ZT1jLnN0YXRlO2IubWVtb2l6ZWRQcm9wcz1jLnByb3BzO2QmJnlmKGIsITApO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gTWcoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD92ZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZ2ZihhLGIuY29udGV4dCwhMSk7amcoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDtudWxsIT09ZSYmKGUucmV0dXJuPWEpO2Zvcig7bnVsbCE9PWU7KXtzd2l0Y2goZS50YWcpe2Nhc2UgMTI6dmFyIGY9ZS5zdGF0ZU5vZGV8MDtpZihlLnR5cGU9PT1iJiYwIT09KGYmYykpe2ZvcihmPWU7bnVsbCE9PWY7KXt2YXIgZz1mLmFsdGVybmF0ZTtpZigwPT09Zi5leHBpcmF0aW9uVGltZXx8Zi5leHBpcmF0aW9uVGltZT5kKWYuZXhwaXJhdGlvblRpbWU9ZCxudWxsIT09ZyYmKDA9PT1nLmV4cGlyYXRpb25UaW1lfHxnLmV4cGlyYXRpb25UaW1lPmQpJiYoZy5leHBpcmF0aW9uVGltZT1kKTtlbHNlIGlmKG51bGwhPT1nJiYoMD09PWcuZXhwaXJhdGlvblRpbWV8fGcuZXhwaXJhdGlvblRpbWU+ZCkpZy5leHBpcmF0aW9uVGltZT1kO2Vsc2UgYnJlYWs7Zj1mLnJldHVybn1mPW51bGx9ZWxzZSBmPWUuY2hpbGQ7YnJlYWs7Y2FzZSAxMzpmPWUudHlwZT09PWEudHlwZT9udWxsOmUuY2hpbGQ7YnJlYWs7ZGVmYXVsdDpmPVxuZS5jaGlsZH1pZihudWxsIT09ZilmLnJldHVybj1lO2Vsc2UgZm9yKGY9ZTtudWxsIT09Zjspe2lmKGY9PT1hKXtmPW51bGw7YnJlYWt9ZT1mLnNpYmxpbmc7aWYobnVsbCE9PWUpe2UucmV0dXJuPWYucmV0dXJuO2Y9ZTticmVha31mPWYucmV0dXJufWU9Zn19XG5mdW5jdGlvbiBSZyhhLGIsYyl7dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkUHJvcHMsZz0hMDtpZihPLmN1cnJlbnQpZz0hMTtlbHNlIGlmKGY9PT1lKXJldHVybiBiLnN0YXRlTm9kZT0wLGJnKGIpLFIoYSxiKTt2YXIgaD1lLnZhbHVlO2IubWVtb2l6ZWRQcm9wcz1lO2lmKG51bGw9PT1mKWg9MTA3Mzc0MTgyMztlbHNlIGlmKGYudmFsdWU9PT1lLnZhbHVlKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmZylyZXR1cm4gYi5zdGF0ZU5vZGU9MCxiZyhiKSxSKGEsYik7aD0wfWVsc2V7dmFyIGs9Zi52YWx1ZTtpZihrPT09aCYmKDAhPT1rfHwxL2s9PT0xL2gpfHxrIT09ayYmaCE9PWgpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiZnKXJldHVybiBiLnN0YXRlTm9kZT0wLGJnKGIpLFIoYSxiKTtoPTB9ZWxzZSBpZihoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhrLFxuaCk6MTA3Mzc0MTgyMyxofD0wLDA9PT1oKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmZylyZXR1cm4gYi5zdGF0ZU5vZGU9MCxiZyhiKSxSKGEsYil9ZWxzZSBOZyhiLGQsaCxjKX1iLnN0YXRlTm9kZT1oO2JnKGIpO1EoYSxiLGUuY2hpbGRyZW4pO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIFIoYSxiKXtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/QShcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDt2YXIgYz1BZihhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1BZihhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBTZyhhLGIsYyl7aWYoMD09PWIuZXhwaXJhdGlvblRpbWV8fGIuZXhwaXJhdGlvblRpbWU+Yyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6TWcoYik7YnJlYWs7Y2FzZSAyOnhmKGIpO2JyZWFrO2Nhc2UgNDpqZyhiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTM6YmcoYil9cmV0dXJuIG51bGx9c3dpdGNoKGIudGFnKXtjYXNlIDA6bnVsbCE9PWE/QShcIjE1NVwiKTp2b2lkIDA7dmFyIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1xZihiKTtmPXNmKGIsZik7ZD1kKGUsZik7Yi5lZmZlY3RUYWd8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQucmVuZGVyJiZ2b2lkIDA9PT1kLiQkdHlwZW9mPyhmPWIudHlwZSxiLnRhZz0yLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZC5zdGF0ZSYmdm9pZCAwIT09ZC5zdGF0ZT9kLnN0YXRlOm51bGwsZj1mLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBmJiZtZyhiLGYsZSksZT14ZihiKSxkLnVwZGF0ZXI9cWcsYi5zdGF0ZU5vZGU9ZCxkLl9yZWFjdEludGVybmFsRmliZXI9Yix0ZyhiLGMpLGE9TGcoYSxiLCEwLGUsYykpOihiLnRhZz0xLFEoYSxiLGQpLGIubWVtb2l6ZWRQcm9wcz1lLGE9Yi5jaGlsZCk7cmV0dXJuIGE7Y2FzZSAxOnJldHVybiBlPWIudHlwZSxjPWIucGVuZGluZ1Byb3BzLE8uY3VycmVudHx8Yi5tZW1vaXplZFByb3BzIT09Yz8oZD1xZihiKSxkPXNmKGIsZCksZT1lKGMsZCksYi5lZmZlY3RUYWd8PTEsUShhLGIsZSksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMjplPXhmKGIpO2lmKG51bGw9PT1hKWlmKG51bGw9PT1iLnN0YXRlTm9kZSl7dmFyIGc9Yi5wZW5kaW5nUHJvcHMsaD1iLnR5cGU7ZD1xZihiKTt2YXIgaz0yPT09Yi50YWcmJm51bGwhPWIudHlwZS5jb250ZXh0VHlwZXM7Zj1rP3NmKGIsZCk6aGE7Zz1uZXcgaChnLGYpO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09XG5nLnN0YXRlJiZ2b2lkIDAhPT1nLnN0YXRlP2cuc3RhdGU6bnVsbDtnLnVwZGF0ZXI9cWc7Yi5zdGF0ZU5vZGU9ZztnLl9yZWFjdEludGVybmFsRmliZXI9YjtrJiYoaz1iLnN0YXRlTm9kZSxrLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZCxrLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3RnKGIsYyk7ZD0hMH1lbHNle2g9Yi50eXBlO2Q9Yi5zdGF0ZU5vZGU7az1iLm1lbW9pemVkUHJvcHM7Zj1iLnBlbmRpbmdQcm9wcztkLnByb3BzPWs7dmFyIG49ZC5jb250ZXh0O2c9cWYoYik7Zz1zZihiLGcpO3ZhciByPWguZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihrIT09Znx8biE9PWcpJiZzZyhiLGQsZixnKTtNZj0hMTt2YXIgdz1iLm1lbW9pemVkU3RhdGU7bj1kLnN0YXRlPXc7dmFyIFA9Yi51cGRhdGVRdWV1ZTtudWxsIT09UCYmKFZmKGIsUCxmLGQsYyksbj1iLm1lbW9pemVkU3RhdGUpO2shPT1mfHx3IT09bnx8Ty5jdXJyZW50fHxNZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHImJihtZyhiLHIsZiksbj1iLm1lbW9pemVkU3RhdGUpLChrPU1mfHxyZyhiLGssZix3LG4sZykpPyhofHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnQmJmQuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50JiZcbihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZixiLm1lbW9pemVkU3RhdGU9biksZC5wcm9wcz1mLGQuc3RhdGU9bixkLmNvbnRleHQ9ZyxkPWspOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGg9Yi50eXBlLGQ9Yi5zdGF0ZU5vZGUsZj1iLm1lbW9pemVkUHJvcHMsaz1iLnBlbmRpbmdQcm9wcyxkLnByb3BzPWYsbj1kLmNvbnRleHQsZz1xZihiKSxnPXNmKGIsZykscj1oLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywoaD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oZiE9PWt8fG4hPT1nKSYmc2coYixkLGssZyksTWY9ITEsbj1iLm1lbW9pemVkU3RhdGUsdz1kLnN0YXRlPW4sUD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1QJiYoVmYoYixQLGssZCxjKSx3PWIubWVtb2l6ZWRTdGF0ZSksZiE9PWt8fG4hPT13fHxPLmN1cnJlbnR8fE1mPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgciYmKG1nKGIscixrKSx3PWIubWVtb2l6ZWRTdGF0ZSksKHI9TWZ8fHJnKGIsZixrLG4sdyxnKSk/KGh8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVwZGF0ZSYmZC5jb21wb25lbnRXaWxsVXBkYXRlKGssdyxnKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShrLHcsZykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZFVwZGF0ZSYmXG4oYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnREaWRVcGRhdGV8fGY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ayxiLm1lbW9pemVkU3RhdGU9dyksZC5wcm9wcz1rLGQuc3RhdGU9dyxkLmNvbnRleHQ9ZyxkPXIpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnREaWRVcGRhdGV8fGY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFxuZj09PWEubWVtb2l6ZWRQcm9wcyYmbj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBMZyhhLGIsZCxlLGMpO2Nhc2UgMzpNZyhiKTtlPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWUpaWYoZD1iLm1lbW9pemVkU3RhdGUsZD1udWxsIT09ZD9kLmVsZW1lbnQ6bnVsbCxWZihiLGUsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKSxlPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50LGU9PT1kKUlnKCksYT1SKGEsYik7ZWxzZXtkPWIuc3RhdGVOb2RlO2lmKGQ9KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmQuaHlkcmF0ZSlCZz1rZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxBZz1iLGQ9Q2c9ITA7ZD8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD16ZyhiLG51bGwsZSxjKSk6KElnKCksUShhLGIsZSkpO2E9Yi5jaGlsZH1lbHNlIElnKCksYT1SKGEsYik7cmV0dXJuIGE7Y2FzZSA1OmE6e2hnKGdnLmN1cnJlbnQpO2U9aGcoZWcuY3VycmVudCk7ZD1JZShlLFxuYi50eXBlKTtlIT09ZCYmKE4oZmcsYixiKSxOKGVnLGQsYikpO251bGw9PT1hJiZGZyhiKTtlPWIudHlwZTtrPWIubWVtb2l6ZWRQcm9wcztkPWIucGVuZGluZ1Byb3BzO2Y9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGw7aWYoIU8uY3VycmVudCYmaz09PWQpe2lmKGs9Yi5tb2RlJjEmJiEhZC5oaWRkZW4pYi5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2lmKCFrfHwxMDczNzQxODIzIT09Yyl7YT1SKGEsYik7YnJlYWsgYX19az1kLmNoaWxkcmVuO2VmKGUsZCk/az1udWxsOmYmJmVmKGUsZikmJihiLmVmZmVjdFRhZ3w9MTYpO0tnKGEsYik7MTA3Mzc0MTgyMyE9PWMmJmIubW9kZSYxJiZkLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzLGIubWVtb2l6ZWRQcm9wcz1kLGE9bnVsbCk6KFEoYSxiLGspLGIubWVtb2l6ZWRQcm9wcz1kLGE9Yi5jaGlsZCl9cmV0dXJuIGE7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmRmcoYiksYi5tZW1vaXplZFByb3BzPWIucGVuZGluZ1Byb3BzLFxubnVsbDtjYXNlIDE2OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gamcoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxlPWIucGVuZGluZ1Byb3BzLE8uY3VycmVudHx8Yi5tZW1vaXplZFByb3BzIT09ZT8obnVsbD09PWE/Yi5jaGlsZD15ZyhiLG51bGwsZSxjKTpRKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9ZSxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUucmVuZGVyLGM9Yi5wZW5kaW5nUHJvcHMsZD1iLnJlZixPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWN8fGQhPT0obnVsbCE9PWE/YS5yZWY6bnVsbCk/KGU9ZShjLGQpLFEoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDEwOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLE8uY3VycmVudHx8Yi5tZW1vaXplZFByb3BzIT09Yz8oUShhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMTE6cmV0dXJuIGM9XG5iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixPLmN1cnJlbnR8fG51bGwhPT1jJiZiLm1lbW9pemVkUHJvcHMhPT1jPyhRKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAxNTpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcyxiLm1lbW9pemVkUHJvcHM9PT1jP2E9UihhLGIpOihRKGEsYixjLmNoaWxkcmVuKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpLGE7Y2FzZSAxMzpyZXR1cm4gUmcoYSxiLGMpO2Nhc2UgMTI6YTppZihkPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGs9Yi5tZW1vaXplZFByb3BzLGU9ZC5fY3VycmVudFZhbHVlLGc9ZC5fY2hhbmdlZEJpdHMsTy5jdXJyZW50fHwwIT09Z3x8ayE9PWYpe2IubWVtb2l6ZWRQcm9wcz1mO2g9Zi51bnN0YWJsZV9vYnNlcnZlZEJpdHM7aWYodm9pZCAwPT09aHx8bnVsbD09PWgpaD0xMDczNzQxODIzO2Iuc3RhdGVOb2RlPWg7aWYoMCE9PShnJmgpKU5nKGIsZCxnLGMpO2Vsc2UgaWYoaz09PWYpe2E9XG5SKGEsYik7YnJlYWsgYX1jPWYuY2hpbGRyZW47Yz1jKGUpO2IuZWZmZWN0VGFnfD0xO1EoYSxiLGMpO2E9Yi5jaGlsZH1lbHNlIGE9UihhLGIpO3JldHVybiBhO2RlZmF1bHQ6QShcIjE1NlwiKX19ZnVuY3Rpb24gVGcoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIFVnPXZvaWQgMCxWZz12b2lkIDAsV2c9dm9pZCAwO1VnPWZ1bmN0aW9uKCl7fTtWZz1mdW5jdGlvbihhLGIsYyl7KGIudXBkYXRlUXVldWU9YykmJlRnKGIpfTtXZz1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmVGcoYil9O1xuZnVuY3Rpb24gWGcoYSxiKXt2YXIgYz1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gbnVsbDtjYXNlIDI6cmV0dXJuIHRmKGIpLG51bGw7Y2FzZSAzOmtnKGIpO3VmKGIpO3ZhciBkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClIZyhiKSxiLmVmZmVjdFRhZyY9LTM7VWcoYik7cmV0dXJuIG51bGw7Y2FzZSA1OmxnKGIpO2Q9aGcoZ2cuY3VycmVudCk7dmFyIGU9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9Yi5zdGF0ZU5vZGUsaD1oZyhlZy5jdXJyZW50KTtnPVhlKGcsZSxmLGMsZCk7VmcoYSxiLGcsZSxmLGMsZCxoKTthLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZXtpZighYylyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP1xuQShcIjE2NlwiKTp2b2lkIDAsbnVsbDthPWhnKGVnLmN1cnJlbnQpO2lmKEhnKGIpKWM9Yi5zdGF0ZU5vZGUsZT1iLnR5cGUsZj1iLm1lbW9pemVkUHJvcHMsY1tDXT1iLGNbTWFdPWYsZD1aZShjLGUsZixhLGQpLGIudXBkYXRlUXVldWU9ZCxudWxsIT09ZCYmVGcoYik7ZWxzZXthPVVlKGUsYyxkLGEpO2FbQ109YjthW01hXT1jO2E6Zm9yKGY9Yi5jaGlsZDtudWxsIT09Zjspe2lmKDU9PT1mLnRhZ3x8Nj09PWYudGFnKWEuYXBwZW5kQ2hpbGQoZi5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWYudGFnJiZudWxsIT09Zi5jaGlsZCl7Zi5jaGlsZC5yZXR1cm49ZjtmPWYuY2hpbGQ7Y29udGludWV9aWYoZj09PWIpYnJlYWs7Zm9yKDtudWxsPT09Zi5zaWJsaW5nOyl7aWYobnVsbD09PWYucmV0dXJufHxmLnJldHVybj09PWIpYnJlYWsgYTtmPWYucmV0dXJufWYuc2libGluZy5yZXR1cm49Zi5yZXR1cm47Zj1mLnNpYmxpbmd9V2UoYSxlLGMsZCk7ZGYoZSxjKSYmVGcoYik7Yi5zdGF0ZU5vZGU9XG5hfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlXZyhhLGIsYS5tZW1vaXplZFByb3BzLGMpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBjKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/QShcIjE2NlwiKTp2b2lkIDAsbnVsbDtkPWhnKGdnLmN1cnJlbnQpO2hnKGVnLmN1cnJlbnQpO0hnKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbQ109YiwkZShkLGMpJiZUZyhiKSk6KGQ9VmUoYyxkKSxkW0NdPWIsYi5zdGF0ZU5vZGU9ZCl9cmV0dXJuIG51bGw7Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE2OnJldHVybiBudWxsO2Nhc2UgMTA6cmV0dXJuIG51bGw7Y2FzZSAxMTpyZXR1cm4gbnVsbDtjYXNlIDE1OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4ga2coYiksVWcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBjZyhiKSxudWxsO2Nhc2UgMTI6cmV0dXJuIG51bGw7Y2FzZSAwOkEoXCIxNjdcIik7XG5kZWZhdWx0OkEoXCIxNTZcIil9fWZ1bmN0aW9uIFlnKGEsYil7dmFyIGM9Yi5zb3VyY2U7bnVsbD09PWIuc3RhY2smJm51bGwhPT1jJiZ2YyhjKTtudWxsIT09YyYmdWMoYyk7Yj1iLnZhbHVlO251bGwhPT1hJiYyPT09YS50YWcmJnVjKGEpO3RyeXtiJiZiLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZCl7ZCYmZC5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGQpfX1mdW5jdGlvbiBaZyhhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXskZyhhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBhaChhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgTGYmJkxmKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAyOlpnKGEpO3ZhciBiPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goYyl7JGcoYSxjKX1icmVhaztjYXNlIDU6WmcoYSk7YnJlYWs7Y2FzZSA0OmJoKGEpfX1mdW5jdGlvbiBjaChhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIGRoKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKGNoKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn1BKFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6QShcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKExlKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjaChjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWlmKGMpaWYoZCl7dmFyIGY9YixnPWUuc3RhdGVOb2RlLGg9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsaCk6Zi5pbnNlcnRCZWZvcmUoZyxoKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGUuc3RhdGVOb2RlLGMpO2Vsc2UgZD8oZj1iLGc9ZS5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGYpOmYuYXBwZW5kQ2hpbGQoZykpOmIuYXBwZW5kQ2hpbGQoZS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09XG5lLnNpYmxpbmc7KXtpZihudWxsPT09ZS5yZXR1cm58fGUucmV0dXJuPT09YSlyZXR1cm47ZT1lLnJldHVybn1lLnNpYmxpbmcucmV0dXJuPWUucmV0dXJuO2U9ZS5zaWJsaW5nfX1cbmZ1bmN0aW9uIGJoKGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9Yi5yZXR1cm47YTpmb3IoOzspe251bGw9PT1jP0EoXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Yy5yZXR1cm59Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyl7YTpmb3IodmFyIGY9YixnPWY7OylpZihhaChnKSxudWxsIT09Zy5jaGlsZCYmNCE9PWcudGFnKWcuY2hpbGQucmV0dXJuPWcsZz1nLmNoaWxkO2Vsc2V7aWYoZz09PWYpYnJlYWs7Zm9yKDtudWxsPT09Zy5zaWJsaW5nOyl7aWYobnVsbD09PWcucmV0dXJufHxnLnJldHVybj09PWYpYnJlYWsgYTtnPWcucmV0dXJufWcuc2libGluZy5yZXR1cm49Zy5yZXR1cm47Zz1nLnNpYmxpbmd9ZT9cbihmPWQsZz1iLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6Zi5yZW1vdmVDaGlsZChnKSk6ZC5yZW1vdmVDaGlsZChiLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yi50YWc/ZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOmFoKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm47Yj1iLnJldHVybjs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1cbmZ1bmN0aW9uIGVoKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiYoY1tNYV09ZCxZZShjLGYsZSxhLGQpKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP0EoXCIxNjJcIik6dm9pZCAwO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7YnJlYWs7Y2FzZSAzOmJyZWFrO2Nhc2UgMTU6YnJlYWs7Y2FzZSAxNjpicmVhaztkZWZhdWx0OkEoXCIxNjNcIil9fWZ1bmN0aW9uIGZoKGEsYixjKXtjPVBmKGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe2doKGQpO1lnKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gaGgoYSxiLGMpe2M9UGYoYyk7Yy50YWc9Mzt2YXIgZD1hLnN0YXRlTm9kZTtudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7bnVsbD09PWloP2loPW5ldyBTZXQoW3RoaXNdKTppaC5hZGQodGhpcyk7dmFyIGM9Yi52YWx1ZSxkPWIuc3RhY2s7WWcoYSxiKTt0aGlzLmNvbXBvbmVudERpZENhdGNoKGMse2NvbXBvbmVudFN0YWNrOm51bGwhPT1kP2Q6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBqaChhLGIsYyxkLGUsZil7Yy5lZmZlY3RUYWd8PTUxMjtjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsO2Q9WWYoZCxjKTthPWI7ZG97c3dpdGNoKGEudGFnKXtjYXNlIDM6YS5lZmZlY3RUYWd8PTEwMjQ7ZD1maChhLGQsZik7U2YoYSxkLGYpO3JldHVybjtjYXNlIDI6aWYoYj1kLGM9YS5zdGF0ZU5vZGUsMD09PShhLmVmZmVjdFRhZyY2NCkmJm51bGwhPT1jJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1paHx8IWloLmhhcyhjKSkpe2EuZWZmZWN0VGFnfD0xMDI0O2Q9aGgoYSxiLGYpO1NmKGEsZCxmKTtyZXR1cm59fWE9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpfVxuZnVuY3Rpb24ga2goYSl7c3dpdGNoKGEudGFnKXtjYXNlIDI6dGYoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4ga2coYSksdWYoYSksYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDU6cmV0dXJuIGxnKGEpLG51bGw7Y2FzZSAxNjpyZXR1cm4gYj1hLmVmZmVjdFRhZyxiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDQ6cmV0dXJuIGtnKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gY2coYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgbGg9ZmYoKSxtaD0yLG5oPWxoLG9oPTAscGg9MCxxaD0hMSxTPW51bGwscmg9bnVsbCxUPTAsc2g9LTEsdGg9ITEsVT1udWxsLHVoPSExLHZoPSExLGloPW51bGw7XG5mdW5jdGlvbiB3aCgpe2lmKG51bGwhPT1TKWZvcih2YXIgYT1TLnJldHVybjtudWxsIT09YTspe3ZhciBiPWE7c3dpdGNoKGIudGFnKXtjYXNlIDI6dGYoYik7YnJlYWs7Y2FzZSAzOmtnKGIpO3VmKGIpO2JyZWFrO2Nhc2UgNTpsZyhiKTticmVhaztjYXNlIDQ6a2coYik7YnJlYWs7Y2FzZSAxMzpjZyhiKX1hPWEucmV0dXJufXJoPW51bGw7VD0wO3NoPS0xO3RoPSExO1M9bnVsbDt2aD0hMX1cbmZ1bmN0aW9uIHhoKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnJldHVybixkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjUxMikpe2I9WGcoYixhLFQpO3ZhciBlPWE7aWYoMTA3Mzc0MTgyMz09PVR8fDEwNzM3NDE4MjMhPT1lLmV4cGlyYXRpb25UaW1lKXt2YXIgZj0wO3N3aXRjaChlLnRhZyl7Y2FzZSAzOmNhc2UgMjp2YXIgZz1lLnVwZGF0ZVF1ZXVlO251bGwhPT1nJiYoZj1nLmV4cGlyYXRpb25UaW1lKX1mb3IoZz1lLmNoaWxkO251bGwhPT1nOykwIT09Zy5leHBpcmF0aW9uVGltZSYmKDA9PT1mfHxmPmcuZXhwaXJhdGlvblRpbWUpJiYoZj1nLmV4cGlyYXRpb25UaW1lKSxnPWcuc2libGluZztlLmV4cGlyYXRpb25UaW1lPWZ9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmNTEyKSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiZcbihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZXt2aD0hMDticmVha319ZWxzZXthPWtoKGEsdGgsVCk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj01MTEsYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGwsYy5lZmZlY3RUYWd8PTUxMik7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2UgYnJlYWt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24geWgoYSl7dmFyIGI9U2coYS5hbHRlcm5hdGUsYSxUKTtudWxsPT09YiYmKGI9eGgoYSkpO2VjLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIHpoKGEsYixjKXtxaD9BKFwiMjQzXCIpOnZvaWQgMDtxaD0hMDtpZihiIT09VHx8YSE9PXJofHxudWxsPT09Uyl3aCgpLHJoPWEsVD1iLHNoPS0xLFM9QWYocmguY3VycmVudCxudWxsLFQpLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGQ9ITE7dGg9IWN8fFQ8PW1oO2Rve3RyeXtpZihjKWZvcig7bnVsbCE9PVMmJiFBaCgpOylTPXloKFMpO2Vsc2UgZm9yKDtudWxsIT09UzspUz15aChTKX1jYXRjaChmKXtpZihudWxsPT09UylkPSEwLGdoKGYpO2Vsc2V7bnVsbD09PVM/QShcIjI3MVwiKTp2b2lkIDA7Yz1TO3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKXtkPSEwO2doKGYpO2JyZWFrfWpoKGEsZSxjLGYsdGgsVCxuaCk7Uz14aChjKX19YnJlYWt9d2hpbGUoMSk7cWg9ITE7aWYoZClyZXR1cm4gbnVsbDtpZihudWxsPT09Uyl7aWYodmgpcmV0dXJuIGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWIsYS5jdXJyZW50LmFsdGVybmF0ZTt0aD9BKFwiMjYyXCIpOlxudm9pZCAwOzA8PXNoJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIGI9YS5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzAhPT1iJiYoMD09PWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWV8fGEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU8YikmJkJoKGEsYil9LHNoKTtDaChhLmN1cnJlbnQuZXhwaXJhdGlvblRpbWUpfXJldHVybiBudWxsfVxuZnVuY3Rpb24gJGcoYSxiKXt2YXIgYzthOntxaCYmIXVoP0EoXCIyNjNcIik6dm9pZCAwO2ZvcihjPWEucmV0dXJuO251bGwhPT1jOyl7c3dpdGNoKGMudGFnKXtjYXNlIDI6dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2h8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWlofHwhaWguaGFzKGQpKSl7YT1ZZihiLGEpO2E9aGgoYyxhLDEpO1JmKGMsYSwxKTtwZyhjLDEpO2M9dm9pZCAwO2JyZWFrIGF9YnJlYWs7Y2FzZSAzOmE9WWYoYixhKTthPWZoKGMsYSwxKTtSZihjLGEsMSk7cGcoYywxKTtjPXZvaWQgMDticmVhayBhfWM9Yy5yZXR1cm59Mz09PWEudGFnJiYoYz1ZZihiLGEpLGM9ZmgoYSxjLDEpLFJmKGEsYywxKSxwZyhhLDEpKTtjPXZvaWQgMH1yZXR1cm4gY31cbmZ1bmN0aW9uIERoKCl7dmFyIGE9MisyNSooKChuZygpLTIrNTAwKS8yNXwwKSsxKTthPD1vaCYmKGE9b2grMSk7cmV0dXJuIG9oPWF9ZnVuY3Rpb24gb2coYSxiKXthPTAhPT1waD9waDpxaD91aD8xOlQ6Yi5tb2RlJjE/RWg/MisxMCooKChhLTIrMTUpLzEwfDApKzEpOjIrMjUqKCgoYS0yKzUwMCkvMjV8MCkrMSk6MTtFaCYmKDA9PT1GaHx8YT5GaCkmJihGaD1hKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHBnKGEsYil7Zm9yKDtudWxsIT09YTspe2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmIpYS5leHBpcmF0aW9uVGltZT1iO251bGwhPT1hLmFsdGVybmF0ZSYmKDA9PT1hLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZXx8YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU+YikmJihhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09YS5yZXR1cm4paWYoMz09PWEudGFnKXt2YXIgYz1hLnN0YXRlTm9kZTshcWgmJjAhPT1UJiZiPFQmJndoKCk7dmFyIGQ9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lO3FoJiYhdWgmJnJoPT09Y3x8QmgoYyxkKTtHaD5IaCYmQShcIjE4NVwiKX1lbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIG5nKCl7bmg9ZmYoKS1saDtyZXR1cm4gbWg9KG5oLzEwfDApKzJ9XG5mdW5jdGlvbiBJaChhKXt2YXIgYj1waDtwaD0yKzI1KigoKG5nKCktMis1MDApLzI1fDApKzEpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7cGg9Yn19ZnVuY3Rpb24gSmgoYSxiLGMsZCxlKXt2YXIgZj1waDtwaD0xO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e3BoPWZ9fXZhciBLaD1udWxsLFY9bnVsbCxMaD0wLE1oPXZvaWQgMCxXPSExLFg9bnVsbCxZPTAsRmg9MCxOaD0hMSxPaD0hMSxQaD1udWxsLFFoPW51bGwsWj0hMSxSaD0hMSxFaD0hMSxTaD1udWxsLEhoPTFFMyxHaD0wLFRoPTE7ZnVuY3Rpb24gVWgoYSl7aWYoMCE9PUxoKXtpZihhPkxoKXJldHVybjtudWxsIT09TWgmJmhmKE1oKX12YXIgYj1mZigpLWxoO0xoPWE7TWg9Z2YoVmgse3RpbWVvdXQ6MTAqKGEtMiktYn0pfVxuZnVuY3Rpb24gQmgoYSxiKXtpZihudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdClhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIsbnVsbD09PVY/KEtoPVY9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihWPVYubmV4dFNjaGVkdWxlZFJvb3Q9YSxWLm5leHRTY2hlZHVsZWRSb290PUtoKTtlbHNle3ZhciBjPWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWN8fGI8YylhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9V3x8KFo/UmgmJihYPWEsWT0xLFdoKGEsMSwhMSkpOjE9PT1iP1hoKCk6VWgoYikpfVxuZnVuY3Rpb24gWWgoKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Vilmb3IodmFyIGM9VixkPUtoO251bGwhPT1kOyl7dmFyIGU9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1WP0EoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtLaD1WPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1LaClLaD1lPWQubmV4dFNjaGVkdWxlZFJvb3QsVi5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1WKXtWPWM7Vi5uZXh0U2NoZWR1bGVkUm9vdD1LaDtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PWQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2lmKDA9PT1hfHxlPGEpYT1lLGI9ZDtpZihkPT09VilicmVhaztcbmM9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9WDtudWxsIT09YyYmYz09PWImJjE9PT1hP0doKys6R2g9MDtYPWI7WT1hfWZ1bmN0aW9uIFZoKGEpe1poKDAsITAsYSl9ZnVuY3Rpb24gWGgoKXtaaCgxLCExLG51bGwpfWZ1bmN0aW9uIFpoKGEsYixjKXtRaD1jO1loKCk7aWYoYilmb3IoO251bGwhPT1YJiYwIT09WSYmKDA9PT1hfHxhPj1ZKSYmKCFOaHx8bmcoKT49WSk7KW5nKCksV2goWCxZLCFOaCksWWgoKTtlbHNlIGZvcig7bnVsbCE9PVgmJjAhPT1ZJiYoMD09PWF8fGE+PVkpOylXaChYLFksITEpLFloKCk7bnVsbCE9PVFoJiYoTGg9MCxNaD1udWxsKTswIT09WSYmVWgoWSk7UWg9bnVsbDtOaD0hMTskaCgpfWZ1bmN0aW9uIGFpKGEsYil7Vz9BKFwiMjUzXCIpOnZvaWQgMDtYPWE7WT1iO1doKGEsYiwhMSk7WGgoKTskaCgpfVxuZnVuY3Rpb24gJGgoKXtHaD0wO2lmKG51bGwhPT1TaCl7dmFyIGE9U2g7U2g9bnVsbDtmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKGQpe09ofHwoT2g9ITAsUGg9ZCl9fX1pZihPaCl0aHJvdyBhPVBoLFBoPW51bGwsT2g9ITEsYTt9ZnVuY3Rpb24gV2goYSxiLGMpe1c/QShcIjI0NVwiKTp2b2lkIDA7Vz0hMDtjPyhjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP2JpKGEsYyxiKTooYz16aChhLGIsITApLG51bGwhPT1jJiYoQWgoKT9hLmZpbmlzaGVkV29yaz1jOmJpKGEsYyxiKSkpKTooYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9iaShhLGMsYik6KGM9emgoYSxiLCExKSxudWxsIT09YyYmYmkoYSxjLGIpKSk7Vz0hMX1cbmZ1bmN0aW9uIGJpKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPD1jJiYobnVsbD09PVNoP1NoPVtkXTpTaC5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPTA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7dWg9cWg9ITA7Yz1iLnN0YXRlTm9kZTtjLmN1cnJlbnQ9PT1iP0EoXCIxNzdcIik6dm9pZCAwO2Q9Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWQ/QShcIjI2MVwiKTp2b2lkIDA7Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDtuZygpO2VjLmN1cnJlbnQ9bnVsbDtpZigxPGIuZWZmZWN0VGFnKWlmKG51bGwhPT1iLmxhc3RFZmZlY3Qpe2IubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI7dmFyIGU9Yi5maXJzdEVmZmVjdH1lbHNlIGU9YjtlbHNlIGU9Yi5maXJzdEVmZmVjdDtiZj1JZDt2YXIgZj1kYSgpO2lmKFZkKGYpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpblxuZil2YXIgZz17c3RhcnQ6Zi5zZWxlY3Rpb25TdGFydCxlbmQ6Zi5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7dmFyIGg9d2luZG93LmdldFNlbGVjdGlvbiYmd2luZG93LmdldFNlbGVjdGlvbigpO2lmKGgmJjAhPT1oLnJhbmdlQ291bnQpe2c9aC5hbmNob3JOb2RlO3ZhciBrPWguYW5jaG9yT2Zmc2V0LG49aC5mb2N1c05vZGU7aD1oLmZvY3VzT2Zmc2V0O3RyeXtnLm5vZGVUeXBlLG4ubm9kZVR5cGV9Y2F0Y2goV2Epe2c9bnVsbDticmVhayBhfXZhciByPTAsdz0tMSxQPS0xLG5jPTAsSmQ9MCxFPWYsdD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHg7Oyl7RSE9PWd8fDAhPT1rJiYzIT09RS5ub2RlVHlwZXx8KHc9citrKTtFIT09bnx8MCE9PWgmJjMhPT1FLm5vZGVUeXBlfHwoUD1yK2gpOzM9PT1FLm5vZGVUeXBlJiYocis9RS5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHg9RS5maXJzdENoaWxkKSlicmVhazt0PUU7RT14fWZvcig7Oyl7aWYoRT09PWYpYnJlYWsgYjt0PT09ZyYmXG4rK25jPT09ayYmKHc9cik7dD09PW4mJisrSmQ9PT1oJiYoUD1yKTtpZihudWxsIT09KHg9RS5uZXh0U2libGluZykpYnJlYWs7RT10O3Q9RS5wYXJlbnROb2RlfUU9eH1nPS0xPT09d3x8LTE9PT1QP251bGw6e3N0YXJ0OncsZW5kOlB9fWVsc2UgZz1udWxsfWc9Z3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgZz1udWxsO2NmPXtmb2N1c2VkRWxlbTpmLHNlbGVjdGlvblJhbmdlOmd9O0tkKCExKTtmb3IoVT1lO251bGwhPT1VOyl7Zj0hMTtnPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09VTspe2lmKFUuZWZmZWN0VGFnJjI1Nil7dmFyIHU9VS5hbHRlcm5hdGU7az1VO3N3aXRjaChrLnRhZyl7Y2FzZSAyOmlmKGsuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PXUpe3ZhciB5PXUubWVtb2l6ZWRQcm9wcyxEPXUubWVtb2l6ZWRTdGF0ZSxqYT1rLnN0YXRlTm9kZTtqYS5wcm9wcz1rLm1lbW9pemVkUHJvcHM7amEuc3RhdGU9ay5tZW1vaXplZFN0YXRlO3ZhciBuaT1qYS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSh5LFxuRCk7amEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9bml9YnJlYWs7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmJyZWFrO2RlZmF1bHQ6QShcIjE2M1wiKX19VT1VLm5leHRFZmZlY3R9fWNhdGNoKFdhKXtmPSEwLGc9V2F9ZiYmKG51bGw9PT1VP0EoXCIxNzhcIik6dm9pZCAwLCRnKFUsZyksbnVsbCE9PVUmJihVPVUubmV4dEVmZmVjdCkpfWZvcihVPWU7bnVsbCE9PVU7KXt1PSExO3k9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1VOyl7dmFyIHE9VS5lZmZlY3RUYWc7cSYxNiYmTGUoVS5zdGF0ZU5vZGUsXCJcIik7aWYocSYxMjgpe3ZhciB6PVUuYWx0ZXJuYXRlO2lmKG51bGwhPT16KXt2YXIgbD16LnJlZjtudWxsIT09bCYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBsP2wobnVsbCk6bC5jdXJyZW50PW51bGwpfX1zd2l0Y2gocSYxNCl7Y2FzZSAyOmRoKFUpO1UuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6ZGgoVSk7VS5lZmZlY3RUYWcmPS0zO2VoKFUuYWx0ZXJuYXRlLFxuVSk7YnJlYWs7Y2FzZSA0OmVoKFUuYWx0ZXJuYXRlLFUpO2JyZWFrO2Nhc2UgODpEPVUsYmgoRCksRC5yZXR1cm49bnVsbCxELmNoaWxkPW51bGwsRC5hbHRlcm5hdGUmJihELmFsdGVybmF0ZS5jaGlsZD1udWxsLEQuYWx0ZXJuYXRlLnJldHVybj1udWxsKX1VPVUubmV4dEVmZmVjdH19Y2F0Y2goV2Epe3U9ITAseT1XYX11JiYobnVsbD09PVU/QShcIjE3OFwiKTp2b2lkIDAsJGcoVSx5KSxudWxsIT09VSYmKFU9VS5uZXh0RWZmZWN0KSl9bD1jZjt6PWRhKCk7cT1sLmZvY3VzZWRFbGVtO3U9bC5zZWxlY3Rpb25SYW5nZTtpZih6IT09cSYmZmEoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHEpKXtudWxsIT09dSYmVmQocSkmJih6PXUuc3RhcnQsbD11LmVuZCx2b2lkIDA9PT1sJiYobD16KSxcInNlbGVjdGlvblN0YXJ0XCJpbiBxPyhxLnNlbGVjdGlvblN0YXJ0PXoscS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4obCxxLnZhbHVlLmxlbmd0aCkpOndpbmRvdy5nZXRTZWxlY3Rpb24mJih6PXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxcbnk9cVtsYigpXS5sZW5ndGgsbD1NYXRoLm1pbih1LnN0YXJ0LHkpLHU9dm9pZCAwPT09dS5lbmQ/bDpNYXRoLm1pbih1LmVuZCx5KSwhei5leHRlbmQmJmw+dSYmKHk9dSx1PWwsbD15KSx5PVVkKHEsbCksRD1VZChxLHUpLHkmJkQmJigxIT09ei5yYW5nZUNvdW50fHx6LmFuY2hvck5vZGUhPT15Lm5vZGV8fHouYW5jaG9yT2Zmc2V0IT09eS5vZmZzZXR8fHouZm9jdXNOb2RlIT09RC5ub2RlfHx6LmZvY3VzT2Zmc2V0IT09RC5vZmZzZXQpJiYoamE9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKSxqYS5zZXRTdGFydCh5Lm5vZGUseS5vZmZzZXQpLHoucmVtb3ZlQWxsUmFuZ2VzKCksbD51Pyh6LmFkZFJhbmdlKGphKSx6LmV4dGVuZChELm5vZGUsRC5vZmZzZXQpKTooamEuc2V0RW5kKEQubm9kZSxELm9mZnNldCksei5hZGRSYW5nZShqYSkpKSkpO3o9W107Zm9yKGw9cTtsPWwucGFyZW50Tm9kZTspMT09PWwubm9kZVR5cGUmJnoucHVzaCh7ZWxlbWVudDpsLGxlZnQ6bC5zY3JvbGxMZWZ0LFxudG9wOmwuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHEuZm9jdXMmJnEuZm9jdXMoKTtmb3IocT0wO3E8ei5sZW5ndGg7cSsrKWw9eltxXSxsLmVsZW1lbnQuc2Nyb2xsTGVmdD1sLmxlZnQsbC5lbGVtZW50LnNjcm9sbFRvcD1sLnRvcH1jZj1udWxsO0tkKGJmKTtiZj1udWxsO2MuY3VycmVudD1iO2ZvcihVPWU7bnVsbCE9PVU7KXtlPSExO3E9dm9pZCAwO3RyeXtmb3Ioej1kO251bGwhPT1VOyl7dmFyIGlnPVUuZWZmZWN0VGFnO2lmKGlnJjM2KXt2YXIgb2M9VS5hbHRlcm5hdGU7bD1VO3U9ejtzd2l0Y2gobC50YWcpe2Nhc2UgMjp2YXIgY2E9bC5zdGF0ZU5vZGU7aWYobC5lZmZlY3RUYWcmNClpZihudWxsPT09b2MpY2EucHJvcHM9bC5tZW1vaXplZFByb3BzLGNhLnN0YXRlPWwubWVtb2l6ZWRTdGF0ZSxjYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIHhpPW9jLm1lbW9pemVkUHJvcHMseWk9b2MubWVtb2l6ZWRTdGF0ZTtjYS5wcm9wcz1sLm1lbW9pemVkUHJvcHM7XG5jYS5zdGF0ZT1sLm1lbW9pemVkU3RhdGU7Y2EuY29tcG9uZW50RGlkVXBkYXRlKHhpLHlpLGNhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgT2c9bC51cGRhdGVRdWV1ZTtudWxsIT09T2cmJihjYS5wcm9wcz1sLm1lbW9pemVkUHJvcHMsY2Euc3RhdGU9bC5tZW1vaXplZFN0YXRlLFhmKGwsT2csY2EsdSkpO2JyZWFrO2Nhc2UgMzp2YXIgUGc9bC51cGRhdGVRdWV1ZTtpZihudWxsIT09UGcpe3k9bnVsbDtpZihudWxsIT09bC5jaGlsZClzd2l0Y2gobC5jaGlsZC50YWcpe2Nhc2UgNTp5PWwuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMjp5PWwuY2hpbGQuc3RhdGVOb2RlfVhmKGwsUGcseSx1KX1icmVhaztjYXNlIDU6dmFyIHppPWwuc3RhdGVOb2RlO251bGw9PT1vYyYmbC5lZmZlY3RUYWcmNCYmZGYobC50eXBlLGwubWVtb2l6ZWRQcm9wcykmJnppLmZvY3VzKCk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDE1OmJyZWFrO2Nhc2UgMTY6YnJlYWs7XG5kZWZhdWx0OkEoXCIxNjNcIil9fWlmKGlnJjEyOCl7bD12b2lkIDA7dmFyIHljPVUucmVmO2lmKG51bGwhPT15Yyl7dmFyIFFnPVUuc3RhdGVOb2RlO3N3aXRjaChVLnRhZyl7Y2FzZSA1Omw9UWc7YnJlYWs7ZGVmYXVsdDpsPVFnfVwiZnVuY3Rpb25cIj09PXR5cGVvZiB5Yz95YyhsKTp5Yy5jdXJyZW50PWx9fXZhciBBaT1VLm5leHRFZmZlY3Q7VS5uZXh0RWZmZWN0PW51bGw7VT1BaX19Y2F0Y2goV2Epe2U9ITAscT1XYX1lJiYobnVsbD09PVU/QShcIjE3OFwiKTp2b2lkIDAsJGcoVSxxKSxudWxsIT09VSYmKFU9VS5uZXh0RWZmZWN0KSl9cWg9dWg9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIEtmJiZLZihiLnN0YXRlTm9kZSk7Yj1jLmN1cnJlbnQuZXhwaXJhdGlvblRpbWU7MD09PWImJihpaD1udWxsKTthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9ZnVuY3Rpb24gQWgoKXtyZXR1cm4gbnVsbD09PVFofHxRaC50aW1lUmVtYWluaW5nKCk+VGg/ITE6Tmg9ITB9XG5mdW5jdGlvbiBnaChhKXtudWxsPT09WD9BKFwiMjQ2XCIpOnZvaWQgMDtYLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPTA7T2h8fChPaD0hMCxQaD1hKX1mdW5jdGlvbiBDaChhKXtudWxsPT09WD9BKFwiMjQ2XCIpOnZvaWQgMDtYLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWF9ZnVuY3Rpb24gY2koYSxiKXt2YXIgYz1aO1o9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KFo9Yyl8fFd8fFhoKCl9fWZ1bmN0aW9uIGRpKGEsYil7aWYoWiYmIVJoKXtSaD0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtSaD0hMX19cmV0dXJuIGEoYil9ZnVuY3Rpb24gZWkoYSxiKXtXP0EoXCIxODdcIik6dm9pZCAwO3ZhciBjPVo7Wj0hMDt0cnl7cmV0dXJuIEpoKGEsYil9ZmluYWxseXtaPWMsWGgoKX19XG5mdW5jdGlvbiBmaShhLGIsYyl7aWYoRWgpcmV0dXJuIGEoYixjKTtafHxXfHwwPT09Rmh8fChaaChGaCwhMSxudWxsKSxGaD0wKTt2YXIgZD1FaCxlPVo7Wj1FaD0hMDt0cnl7cmV0dXJuIGEoYixjKX1maW5hbGx5e0VoPWQsKFo9ZSl8fFd8fFhoKCl9fWZ1bmN0aW9uIGdpKGEpe3ZhciBiPVo7Wj0hMDt0cnl7SmgoYSl9ZmluYWxseXsoWj1iKXx8V3x8WmgoMSwhMSxudWxsKX19XG5mdW5jdGlvbiBoaShhLGIsYyxkLGUpe3ZhciBmPWIuY3VycmVudDtpZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZztiOnsyPT09a2QoYykmJjI9PT1jLnRhZz92b2lkIDA6QShcIjE3MFwiKTtmb3IoZz1jOzMhPT1nLnRhZzspe2lmKHJmKGcpKXtnPWcuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9KGc9Zy5yZXR1cm4pP3ZvaWQgMDpBKFwiMTcxXCIpfWc9Zy5zdGF0ZU5vZGUuY29udGV4dH1jPXJmKGMpP3dmKGMsZyk6Z31lbHNlIGM9aGE7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1lO2U9UGYoZCk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO1JmKGYsZSxkKTtwZyhmLGQpO3JldHVybiBkfVxuZnVuY3Rpb24gaWkoYSl7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/QShcIjE4OFwiKTpBKFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPW5kKGIpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfWZ1bmN0aW9uIGppKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPW5nKCk7ZT1vZyhmLGUpO3JldHVybiBoaShhLGIsYyxlLGQpfWZ1bmN0aW9uIGtpKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBsaShhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBKZihwKHt9LGEse2ZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9bmQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9XG52YXIgbWk9e3VwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWU6aGksY3JlYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gRmYoYSxiLGMpfSx1cGRhdGVDb250YWluZXI6amksZmx1c2hSb290OmFpLHJlcXVlc3RXb3JrOkJoLGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb246RGgsYmF0Y2hlZFVwZGF0ZXM6Y2ksdW5iYXRjaGVkVXBkYXRlczpkaSxkZWZlcnJlZFVwZGF0ZXM6SWgsc3luY1VwZGF0ZXM6SmgsaW50ZXJhY3RpdmVVcGRhdGVzOmZpLGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKCl7V3x8MD09PUZofHwoWmgoRmgsITEsbnVsbCksRmg9MCl9LGZsdXNoQ29udHJvbGxlZDpnaSxmbHVzaFN5bmM6ZWksZ2V0UHVibGljUm9vdEluc3RhbmNlOmtpLGZpbmRIb3N0SW5zdGFuY2U6aWksZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHM6ZnVuY3Rpb24oYSl7YT1vZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0saW5qZWN0SW50b0RldlRvb2xzOmxpfTtcbmZ1bmN0aW9uIG9pKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6aGMsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319S2IuaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudChhZik7ZnVuY3Rpb24gcGkoYSl7dGhpcy5fZXhwaXJhdGlvblRpbWU9RGgoKTt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfVxucGkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt0aGlzLl9kZWZlcj92b2lkIDA6QShcIjI1MFwiKTt0aGlzLl9oYXNDaGlsZHJlbj0hMDt0aGlzLl9jaGlsZHJlbj1hO3ZhciBiPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxjPXRoaXMuX2V4cGlyYXRpb25UaW1lLGQ9bmV3IHFpO2hpKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtwaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5waS5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO3RoaXMuX2RlZmVyJiZudWxsIT09Yj92b2lkIDA6QShcIjI1MVwiKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtudWxsPT09ZD9BKFwiMjUxXCIpOnZvaWQgMDtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO2FpKGEsYyk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1cbm51bGwsdGhpcy5fZGVmZXI9ITF9O3BpLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBxaSgpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfXFpLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5xaS5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz9BKFwiMTkxXCIsYyk6dm9pZCAwO2MoKX19fTtmdW5jdGlvbiByaShhLGIsYyl7dGhpcy5faW50ZXJuYWxSb290PUZmKGEsYixjKX1yaS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IHFpO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTtqaShhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xucmkucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IHFpO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtqaShudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O3JpLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBxaTtjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7amkoYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcbnJpLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBwaSh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPD1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIHNpKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1TYj1taS5iYXRjaGVkVXBkYXRlcztUYj1taS5pbnRlcmFjdGl2ZVVwZGF0ZXM7VWI9bWkuZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM7XG5mdW5jdGlvbiB0aShhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHJpKGEsITEsYil9XG5mdW5jdGlvbiB1aShhLGIsYyxkLGUpe3NpKGMpP3ZvaWQgMDpBKFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9a2koZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj10aShjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1raShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19ZGkoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIGtpKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiB2aShhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO3NpKGIpP3ZvaWQgMDpBKFwiMjAwXCIpO3JldHVybiBvaShhLGIsbnVsbCxjKX1cbnZhciB3aT17Y3JlYXRlUG9ydGFsOnZpLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP251bGw6MT09PWEubm9kZVR5cGU/YTppaShhKX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHVpKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB1aShudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP0EoXCIzOFwiKTp2b2lkIDA7cmV0dXJuIHVpKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe3NpKGEpP3ZvaWQgMDpBKFwiNDBcIik7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oZGkoZnVuY3Rpb24oKXt1aShudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiB2aS5hcHBseSh2b2lkIDAsXG5hcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpjaSx1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXM6SWgsdW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzOmZpLGZsdXNoU3luYzplaSx1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6Z2ksX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50UGx1Z2luSHViOkthLEV2ZW50UGx1Z2luUmVnaXN0cnk6dmEsRXZlbnRQcm9wYWdhdG9yczokYSxSZWFjdENvbnRyb2xsZWRDb21wb25lbnQ6UmIsUmVhY3RET01Db21wb25lbnRUcmVlOlFhLFJlYWN0RE9NRXZlbnRMaXN0ZW5lcjpPZH0sdW5zdGFibGVfY3JlYXRlUm9vdDpmdW5jdGlvbihhLGIpe3JldHVybiBuZXcgcmkoYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9fTtsaSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6TmEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi40LjJcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTtcbnZhciBCaT17ZGVmYXVsdDp3aX0sQ2k9QmkmJndpfHxCaTttb2R1bGUuZXhwb3J0cz1DaS5kZWZhdWx0P0NpLmRlZmF1bHQ6Q2k7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RPTURvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykgLyo/RE9NRWxlbWVudCove1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gU2FtZVZhbHVlIGFsZ29yaXRobVxuICBpZiAoeCA9PT0geSkge1xuICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG4gICAgLy8gQWRkZWQgdGhlIG5vbnplcm8geSBjaGVjayB0byBtYWtlIEZsb3cgaGFwcHksIGJ1dCBpdCBpcyByZWR1bmRhbnRcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBlcXVhbGl0eSBieSBpdGVyYXRpbmcgdGhyb3VnaCBrZXlzIG9uIGFuIG9iamVjdCBhbmQgcmV0dXJuaW5nIGZhbHNlXG4gKiB3aGVuIGFueSBrZXkgaGFzIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmljdGx5IGVxdWFsIGJldHdlZW4gdGhlIGFyZ3VtZW50cy5cbiAqIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSB2YWx1ZXMgb2YgYWxsIGtleXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuICovXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxudmFyIGlzVGV4dE5vZGUgPSByZXF1aXJlKCcuL2lzVGV4dE5vZGUnKTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcbiAgfSBlbHNlIGlmICgnY29udGFpbnMnIGluIG91dGVyTm9kZSkge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL2lzTm9kZScpO1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIHRleHQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Tm9kZShvYmplY3QpIHtcbiAgcmV0dXJuIGlzTm9kZShvYmplY3QpICYmIG9iamVjdC5ub2RlVHlwZSA9PSAzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dE5vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHZhciBkb2MgPSBvYmplY3QgPyBvYmplY3Qub3duZXJEb2N1bWVudCB8fCBvYmplY3QgOiBkb2N1bWVudDtcbiAgdmFyIGRlZmF1bHRWaWV3ID0gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgcmV0dXJuICEhKG9iamVjdCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBTd2l0Y2gsIFJvdXRlLCBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL0hlYWRlcic7XG5pbXBvcnQgSG9tZSBmcm9tICcuL0hvbWUnO1xuaW1wb3J0IERhc2hib2FyZCBmcm9tICcuLi9jYXRlZ29yaWVzL0Rhc2hib2FyZCc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vQXBwLmNzcyc7XG5cbmNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgcmVuZGVyKCkge1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuYXBwfT5cbiAgICAgICAgICA8aGVhZGVyPlxuICAgICAgICAgICAgPEhlYWRlci8+XG4gICAgICAgICAgPC9oZWFkZXI+XG5cbiAgICAgICAgICA8bWFpbj5cbiAgICAgICAgICAgIDxTd2l0Y2g+XG4gICAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL1wiIGNvbXBvbmVudD17SG9tZX0vPlxuICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9jYXRlZ29yaWVzXCIgY29tcG9uZW50PXtEYXNoYm9hcmR9Lz5cbiAgICAgICAgICAgICAgPFJlZGlyZWN0IHRvPVwiL1wiLz5cbiAgICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICAgIDwvbWFpbj5cbiAgICAgICAgICBcbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1JvdXRlcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgRXJyb3IgZnJvbSAnLi9FcnJvcic7XG5pbXBvcnQgbG9nbyBmcm9tICcuLi8uLi9hc3NldHMvbG9nby5wbmcnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0hlYWRlci5jc3MnO1xuXG5jbGFzcyBIZWFkZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgXG4gIH07XG5cbiAgaGFuZGxlU3BlY2lhbCA9IGV2ZW50ID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGFsZXJ0KCd0aGF0IGlzIGEgY29vbCBsaW5rIScpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmhlYWRlcn0+XG5cbiAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiaGVhZGVyLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9nb1wiPlxuICAgICAgICAgICAgPGltZyBzcmM9e2xvZ299Lz5cbiAgICAgICAgICAgIDxoMT5CdWRnZXQgVHJhY2tlcjwvaDE+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPG5hdj5cbiAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxOYXZMaW5rIGV4YWN0IGFjdGl2ZUNsYXNzTmFtZT1cImFjdGl2ZVwiIHRvPVwiL1wiPkhvbWU8L05hdkxpbms+XG4gICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICA8TmF2TGluayBleGFjdCBhY3RpdmVDbGFzc05hbWU9XCJhY3RpdmVcIiB0bz1cIi9jYXRlZ29yaWVzXCI+TXkgQnVkZ2V0PC9OYXZMaW5rPlxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPC91bD4gXG4gICAgICAgICAgPC9uYXY+XG4gICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICA8RXJyb3IvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIZWFkZXI7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBnZXRFcnJvciB9IGZyb20gJy4vZXJyb3ItcmVkdWNlcnMnO1xuaW1wb3J0IHsgY2xlYXJFcnJvciB9IGZyb20gJy4vZXJyb3ItYWN0aW9ucyc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vRXJyb3IuY3NzJztcblxuZXhwb3J0IGNsYXNzIEVycm9yIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGVycm9yOiBQcm9wVHlwZXMuYW55LFxuICAgIGNsZWFyRXJyb3I6IFByb3BUeXBlcy5mdW5jXG4gIH07XG4gIFxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgY29uc3QgeyBlcnJvciwgY2xlYXJFcnJvciB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmKGVycm9yKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY2xlYXJFcnJvcigpO1xuICAgICAgfSwgNjAwMCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZXJyb3IgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYoIWVycm9yKSByZXR1cm4gbnVsbDtcblxuICAgIHJldHVybiAoXG4gICAgICA8cHJlIGNsYXNzTmFtZT17c3R5bGVzLmVycm9yfT57ZXJyb3J9PC9wcmU+XG4gICAgKTtcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgc3RhdGUgPT4gKHtcbiAgICBlcnJvcjogZ2V0RXJyb3Ioc3RhdGUpXG4gIH0pLFxuICB7IGNsZWFyRXJyb3IgfVxuKShFcnJvcik7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsImltcG9ydCB7IEVSUk9SX0NMRUFSIH0gZnJvbSAnLi9lcnJvci1yZWR1Y2Vycyc7XG5cbmV4cG9ydCBjb25zdCBjbGVhckVycm9yID0gKCkgPT4gKHsgdHlwZTogRVJST1JfQ0xFQVIgfSk7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMiEuL0Vycm9yLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wic291cmNlTWFwXCI6dHJ1ZSxcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMiEuL0Vycm9yLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMiEuL0Vycm9yLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodHJ1ZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W10sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIlwiLFwiZmlsZVwiOlwiRXJyb3IuY3NzXCIsXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI4YzA2MDM2ZjBiNWUwNzRmMDljNTMwZDEwNjEwNGNmZC5wbmdcIjsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNS0yIS4vSGVhZGVyLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wic291cmNlTWFwXCI6dHJ1ZSxcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMiEuL0hlYWRlci5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTIhLi9IZWFkZXIuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh0cnVlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5fM0FHbHQtR2czY0p3akVsYk5oSHZ4WiB7XFxuICBiYWNrZ3JvdW5kOiByZ2IoMTA5LCAyNTUsIDQ3KTtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICB0ZXh0LXNoYWRvdzogMXB4IDFweCAxcHggYmxhY2s7XFxufVxcblxcbiAgLl8zQUdsdC1HZzNjSndqRWxiTmhIdnhaIC5oZWFkZXItY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgfVxcblxcbiAgLl8zQUdsdC1HZzNjSndqRWxiTmhIdnhaIC5oZWFkZXItY29udGFpbmVyIC5sb2dvIHtcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIH1cXG5cXG4gIC5fM0FHbHQtR2czY0p3akVsYk5oSHZ4WiAuaGVhZGVyLWNvbnRhaW5lciBoMSB7XFxuICAgICAgZm9udC1zaXplOiAyNnB0O1xcbiAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgICBwYWRkaW5nLWJvdHRvbTogN3B4O1xcbiAgICB9XFxuXFxuICAuXzNBR2x0LUdnM2NKd2pFbGJOaEh2eFogLnNlYXJjaC1jb250YWluZXIge1xcbiAgICBwYWRkaW5nOiA1cHggMDtcXG4gIH1cXG5cXG4gIC5fM0FHbHQtR2czY0p3akVsYk5oSHZ4WiBuYXYgdWwge1xcbiAgICAgIG1hcmdpbjogMDtcXG4gICAgICBwYWRkaW5nOiAwO1xcbiAgICB9XFxuXFxuICAuXzNBR2x0LUdnM2NKd2pFbGJOaEh2eFogbmF2IGxpIHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgbWFyZ2luLWxlZnQ6IDE1cHg7XFxuICAgIH1cXG5cXG4gIC5fM0FHbHQtR2czY0p3akVsYk5oSHZ4WiBuYXYgYSB7XFxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgICAgIGZvbnQtc2l6ZTogMThweDs7XFxuICAgICAgY29sb3I6IGJsYWNrO1xcbiAgICAgIHBhZGRpbmc6IDNweDtcXG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgICAgIG1hcmdpbi1yaWdodDogNTBweFxcbiAgICB9XFxuXFxuICAuXzNBR2x0LUdnM2NKd2pFbGJOaEh2eFogbmF2IGEuYWN0aXZlIHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGZsb3JhbHdoaXRlO1xcbn1cXG5cXG4gIC5fM0FHbHQtR2czY0p3akVsYk5oSHZ4WiBuYXYgYTpub3QoLmFjdGl2ZSk6aG92ZXIge1xcbiAgY29sb3I6IGRhcmtvcmNoaWQ7XFxuICBib3JkZXI6IDFweCBzb2xpZCBncmVlbnllbGxvdztcXG59XFxuXCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIi9Vc2Vycy9hbnRyZW9wdWtheS9jb2RpbmctcHJvamVjdHMvYnVkZ2V0LXRyYWNrZXIvc3JjL2NvbXBvbmVudHMvYXBwL0hlYWRlci5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSw4QkFBOEI7RUFDOUIsY0FBYztFQUNkLCtCQUErQjtDQXNEaEM7O0VBcERDO0lBQ0UsY0FBYztJQUNkLG9CQUFvQjtJQUNwQiwrQkFBK0I7R0FZaEM7O0VBVkM7TUFDRSxjQUFjO01BQ2Qsb0JBQW9CO0tBQ3JCOztFQUVEO01BQ0UsZ0JBQWdCO01BQ2hCLGFBQWE7TUFDYixvQkFBb0I7S0FDckI7O0VBR0g7SUFDRSxlQUFlO0dBQ2hCOztFQUdDO01BQ0UsVUFBVTtNQUNWLFdBQVc7S0FDWjs7RUFFRDtNQUNFLHNCQUFzQjtNQUN0QixrQkFBa0I7S0FDbkI7O0VBRUQ7TUFDRSxzQkFBc0I7TUFDdEIsZ0JBQWdCO01BQ2hCLGFBQWE7TUFDYixhQUFhO01BQ2IsdUJBQXVCO01BQ3ZCLDhCQUE4QjtNQUM5QixrQkFBbUI7S0FXcEI7O0VBVEM7RUFDRSxhQUFhO0VBQ2IsOEJBQThCO0NBQy9COztFQUVEO0VBQ0Usa0JBQWtCO0VBQ2xCLDhCQUE4QjtDQUMvQlwiLFwiZmlsZVwiOlwiSGVhZGVyLmNzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6bG9jYWwoLmhlYWRlcikge1xcbiAgYmFja2dyb3VuZDogcmdiKDEwOSwgMjU1LCA0Nyk7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgdGV4dC1zaGFkb3c6IDFweCAxcHggMXB4IGJsYWNrO1xcblxcbiAgLmhlYWRlci1jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuXFxuICAgIC5sb2dvIHtcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIH1cXG4gIFxcbiAgICBoMSB7XFxuICAgICAgZm9udC1zaXplOiAyNnB0O1xcbiAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgICBwYWRkaW5nLWJvdHRvbTogN3B4O1xcbiAgICB9XFxuICB9XFxuXFxuICAuc2VhcmNoLWNvbnRhaW5lciB7XFxuICAgIHBhZGRpbmc6IDVweCAwO1xcbiAgfVxcbiAgXFxuICBuYXYge1xcbiAgICB1bCB7XFxuICAgICAgbWFyZ2luOiAwO1xcbiAgICAgIHBhZGRpbmc6IDA7XFxuICAgIH1cXG4gICAgXFxuICAgIGxpIHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgbWFyZ2luLWxlZnQ6IDE1cHg7XFxuICAgIH1cXG4gICAgXFxuICAgIGEge1xcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gICAgICBmb250LXNpemU6IDE4cHg7O1xcbiAgICAgIGNvbG9yOiBibGFjaztcXG4gICAgICBwYWRkaW5nOiAzcHg7XFxuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgICBtYXJnaW4tcmlnaHQ6IDUwcHg7XFxuICAgICAgXFxuICAgICAgJi5hY3RpdmUge1xcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgZmxvcmFsd2hpdGU7XFxuICAgICAgfVxcbiAgICAgIFxcbiAgICAgICY6bm90KC5hY3RpdmUpOmhvdmVyIHtcXG4gICAgICAgIGNvbG9yOiBkYXJrb3JjaGlkO1xcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgZ3JlZW55ZWxsb3c7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJoZWFkZXJcIjogXCJfM0FHbHQtR2czY0p3akVsYk5oSHZ4WlwiXG59OyIsIiAgXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IGJ1ZGdldEltYWdlIGZyb20gJy4uLy4uL2Fzc2V0cy9idWRnZXQtaW1hZ2UucG5nJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0hvbWUuY3NzJztcblxuY2xhc3MgSG9tZSBleHRlbmRzIENvbXBvbmVudCB7XG4gIHJlbmRlcigpIHsgXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuaG9tZX0+XG4gICAgICAgIDxoMj5JdHMgYnVkZ2V0IHRpbWUhPC9oMj5cbiAgICAgICAgPHNlY3Rpb24+XG4gICAgICAgICAgPGg1PkNsaW5rIGJlbG93IHRvIGJlZ2luPC9oNT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnN0YXJ0SW1hZ2V9PlxuICAgICAgICAgICAgPE5hdkxpbmsgZXhhY3QgYWN0aXZlQ2xhc3NOYW1lPVwiYWN0aXZlXCIgdG89XCIvY2F0ZWdvcmllc1wiPlxuICAgICAgICAgICAgICA8aW1nIHNyYz17YnVkZ2V0SW1hZ2V9PjwvaW1nPlxuICAgICAgICAgICAgPC9OYXZMaW5rPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4gXG5leHBvcnQgZGVmYXVsdCBIb21lO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZDRkOTUyMmIyNGIyYjA3YTAzY2E0N2VjMjEyNjc5NTkucG5nXCI7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMiEuL0hvbWUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJzb3VyY2VNYXBcIjp0cnVlLFwiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNS0yIS4vSG9tZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTIhLi9Ib21lLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodHJ1ZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuXzJfLXFjZEFGaUw4Q3BPTWZTYVRiOTMgaDUge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogMTVweDtcXG4gIH1cXG4gIFxcbiAgLl8yXy1xY2RBRmlMOENwT01mU2FUYjkzIGRpdiB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgfVxcblwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvVXNlcnMvYW50cmVvcHVrYXkvY29kaW5nLXByb2plY3RzL2J1ZGdldC10cmFja2VyL3NyYy9jb21wb25lbnRzL2FwcC9Ib21lLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFRTtJQUNFLG1CQUFtQjtJQUNuQixnQkFBZ0I7R0FDakI7O0VBRUQ7SUFDRSxjQUFjO0lBQ2Qsd0JBQXdCO0dBQ3pCXCIsXCJmaWxlXCI6XCJIb21lLmNzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6bG9jYWwoLmhvbWUpIHtcXG4gIFxcbiAgaDUge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogMTVweDtcXG4gIH1cXG5cXG4gIGRpdiB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuZXhwb3J0cy5sb2NhbHMgPSB7XG5cdFwiaG9tZVwiOiBcIl8yXy1xY2RBRmlMOENwT01mU2FUYjkzXCJcbn07IiwiXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgQ2F0ZWdvcmllcyBmcm9tICcuL0NhdGVnb3JpZXMnO1xuaW1wb3J0IENhdGVnb3J5Rm9ybSBmcm9tICcuL0NhdGVnb3J5Rm9ybSc7XG5pbXBvcnQgeyBsb2FkLCBhZGQsIHVwZGF0ZSB9IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgeyBnZXRDYXRlZ29yaWVzIH0gZnJvbSAnLi9yZWR1Y2Vycyc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9EYXNoYm9hcmQuY3NzJztcblxuXG5jbGFzcyBEYXNoYm9hcmQgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2F0ZWdvcmllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGFkZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBsb2FkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMubG9hZCgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2F0ZWdvcmllcywgYWRkIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZGFzaGJvYXJkfT5cbiAgICAgICAgPGgzPkFkZCBCdWRnZXQgQ2F0ZWdvcnk8L2gzPlxuICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJjYXRlZ29yeS13cmFwcGVyXCI+XG4gICAgICAgICAgPENhdGVnb3J5Rm9ybSBvbkNvbXBsZXRlPXthZGR9Lz5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICBcbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICA8aHIvPlxuICAgICAgICB7Y2F0ZWdvcmllcyAmJiBcbiAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJjYXRlZ29yeS13cmFwcGVyXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8aDM+QnVkZ2V0IENhdGVnb3JpZXM8L2gzPlxuICAgICAgICAgICAgICA8Q2F0ZWdvcmllc1xuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM9e2NhdGVnb3JpZXN9XG4gICAgICAgICAgICAgICAgb25VcGRhdGU9e3VwZGF0ZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBzdGF0ZSA9PiAoe1xuICAgIGNhdGVnb3JpZXM6IGdldENhdGVnb3JpZXMoc3RhdGUpXG4gIH0pLFxuICB7IGxvYWQsIGFkZCB9XG4pKERhc2hib2FyZCk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBDYXRlZ29yeSBmcm9tICcuL0NhdGVnb3J5JztcblxuXG5leHBvcnQgY2xhc3MgQ2F0ZWdvcmllcyBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9e1xuICAgIGNhdGVnb3JpZXM6IFByb3BUeXBlcy5hcnJheVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNhdGVnb3JpZXMgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYoIWNhdGVnb3JpZXMpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8dWw+XG4gICAgICAgICAge2NhdGVnb3JpZXMubWFwKGNhdGVnb3J5ID0+IChcbiAgICAgICAgICAgIDxDYXRlZ29yeVxuICAgICAgICAgICAgICBrZXk9e2NhdGVnb3J5LmtleX1cbiAgICAgICAgICAgICAgY2F0ZWdvcnk9e2NhdGVnb3J5fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC91bD5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhdGVnb3JpZXM7XG4iLCJcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBDYXRlZ29yeURpc3BsYXkgZnJvbSAnLi9DYXRlZ29yeURpc3BsYXknO1xuaW1wb3J0IENhdGVnb3J5Rm9ybSBmcm9tICcuL0NhdGVnb3J5Rm9ybSc7XG5pbXBvcnQgeyB1cGRhdGUgfSBmcm9tICcuL2FjdGlvbnMnO1xuXG5leHBvcnQgY2xhc3MgQ2F0ZWdvcnkgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIHN0YXRlID0ge1xuICAgIGVkaXRpbmc6IGZhbHNlXG4gIH07XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjYXRlZ29yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHVwZGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICB9O1xuXG4gIGhhbmRsZUVkaXQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGVkaXRpbmc6IHRydWUgfSk7XG4gIH07XG5cbiAgaGFuZGxlQ29tcGxldGUgPSBjYXRlZ29yeSA9PiB7XG4gICAgY29uc3QgeyB1cGRhdGUgfSA9IHRoaXMucHJvcHM7XG4gICAgdXBkYXRlKGNhdGVnb3J5KTtcbiAgICB0aGlzLmhhbmRsZUVuZEVkaXQoKTtcbiAgfTtcblxuICBoYW5kbGVFbmRFZGl0ID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0aW5nOiBmYWxzZSB9KTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBlZGl0aW5nIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgY2F0ZWdvcnkgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGxpPlxuICAgICAgICB7ZWRpdGluZ1xuICAgICAgICAgID8gPENhdGVnb3J5Rm9ybVxuICAgICAgICAgICAgY2F0ZWdvcnk9e2NhdGVnb3J5fVxuICAgICAgICAgICAgb25Db21wbGV0ZT17dGhpcy5oYW5kbGVDb21wbGV0ZX1cbiAgICAgICAgICAgIG9uQ2FuY2VsPXt0aGlzLmhhbmRsZUVuZEVkaXR9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA6IDxDYXRlZ29yeURpc3BsYXlcbiAgICAgICAgICAgIGNhdGVnb3J5PXtjYXRlZ29yeX1cbiAgICAgICAgICAgIG9uRWRpdD17dGhpcy5oYW5kbGVFZGl0fVxuICAgICAgICAgICAgb25EZWxldGU9e3RoaXMuaGFuZGxlRGVsZXRlfVxuICAgICAgICAgIC8+XG4gICAgICAgIH1cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBudWxsLFxuICB7IHVwZGF0ZSB9XG4pKENhdGVnb3J5KTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IHJlbW92ZSB9IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgRXhwZW5zZXMgZnJvbSAnLi4vZXhwZW5zZXMvRXhwZW5zZXMnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vQ2F0ZWdvcnlEaXNwbGF5LmNzcyc7XG5cblxuZXhwb3J0IGNsYXNzIENhdGVnb3J5RGlzcGxheSBleHRlbmRzIENvbXBvbmVudCB7XG4gIFxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNhdGVnb3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgb25FZGl0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHJlbW92ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICB9O1xuICBcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2F0ZWdvcnksIG9uRWRpdCwgcmVtb3ZlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuY2F0ZWdvcnlkaXNwbGF5fT5cbiAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiY2F0ZWdvcnktbGlzdFwiPlxuICAgICAgICAgIHsvKiA8cCBzdHlsZT17eyBjb2xvcjogJ2JsdWUnIH19PlxuICAgICAgICAgICAgQ0FUIERJU1BMQVlcbiAgICAgICAgICA8L3A+ICovfVxuICAgICAgICAgIDxzZWN0aW9uPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICA8c3Ryb25nPntjYXRlZ29yeS5uYW1lfSA9ICR7Y2F0ZWdvcnkuYnVkZ2V0fTwvc3Ryb25nPlxuICAgICAgICAgICAgICA8YnV0dG9uIG5hbWU9XCJFZGl0XCIgb25DbGljaz17b25FZGl0fT7inI48L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBuYW1lPVwiUmVtb3ZlXCIgb25DbGljaz17KCkgPT4gcmVtb3ZlKGNhdGVnb3J5LmtleSl9PvCfl5E8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgIHsvKiA8YnI+PC9icj4gKi99XG4gICAgICAgICAgey8qIDxwPlxuICAgICAgICAgICAgRU5EIENBVCBESVNQTEFZXG4gICAgICAgICAgPC9wPiAqL31cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICBcbiAgICAgICAgPHNlY3Rpb24+XG4gICAgICAgICAgPEV4cGVuc2VzIGNhdGVnb3J5SWQ9e2NhdGVnb3J5LmtleX0vPlxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG51bGwsXG4gIHsgcmVtb3ZlIH1cbikoQ2F0ZWdvcnlEaXNwbGF5KTtcbiIsImZ1bmN0aW9uIHJlcXVlc3QodXJsLCBvcHRpb25zID0ge30sIGRhdGEpIHtcbiAgaWYoZGF0YSkgb3B0aW9ucy5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gIFxuICByZXR1cm4gZmV0Y2godXJsLCBvcHRpb25zKVxuICAgIC50aGVuKHJlc3BvbnNlID0+IFtyZXNwb25zZS5vaywgcmVzcG9uc2UuanNvbigpXSlcbiAgICAudGhlbigoW29rLCBqc29uXSkgPT4ge1xuICAgICAgaWYob2spIHJldHVybiBqc29uO1xuICAgICAgdGhyb3cganNvbi5tZXNzYWdlIHx8IGpzb24uZXJyb3IgfHwganNvbi5lcnJvcnMgfHwganNvbjtcbiAgICB9KTtcbn1cblxuY29uc3QgaGVhZGVycyA9IHtcbiAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xufTtcblxuZXhwb3J0IGNvbnN0IGdldCA9IHVybCA9PiByZXF1ZXN0KHVybCk7XG5leHBvcnQgY29uc3QgcG9zdCA9ICh1cmwsIGRhdGEpID0+IHJlcXVlc3QodXJsLCB7IG1ldGhvZDogJ1BPU1QnLCBoZWFkZXJzIH0sIGRhdGEpO1xuZXhwb3J0IGNvbnN0IHB1dCA9ICh1cmwsIGRhdGEpID0+IHJlcXVlc3QodXJsLCB7IG1ldGhvZDogJ1BVVCcsIGhlYWRlcnMgfSwgZGF0YSk7XG5leHBvcnQgY29uc3QgZGVsID0gKHVybCwgZGF0YSkgPT4gcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAnREVMRVRFJyB9LCBkYXRhKTsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBhZGRFeHBlbnNlIH0gZnJvbSAnLi9leHBlbnNlQWN0aW9ucyc7XG5pbXBvcnQgeyBnZXRFeHBlbnNlc0J5Q2F0ZWdvcnkgfSBmcm9tICcuL2V4cGVuc2VSZWR1Y2Vycyc7XG5pbXBvcnQgRXhwZW5zZSBmcm9tICcuL0V4cGVuc2UnO1xuaW1wb3J0IEV4cGVuc2VGb3JtIGZyb20gJy4vRXhwZW5zZUZvcm0nO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vRXhwZW5zZXMuY3NzJztcblxuY2xhc3MgRXhwZW5zZXMgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZXhwZW5zZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBjYXRlZ29yeUlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFkZEV4cGVuc2U6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIGhhbmRsZUFkZEV4cGVuc2UgPSBleHBlbnNlID0+IHtcbiAgICBjb25zdCB7IGFkZEV4cGVuc2UsIGNhdGVnb3J5SWQgfSA9IHRoaXMucHJvcHM7XG4gICAgYWRkRXhwZW5zZShjYXRlZ29yeUlkLCBleHBlbnNlKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBleHBlbnNlcywgY2F0ZWdvcnlJZCB9ID0gdGhpcy5wcm9wcztcbiAgICBpZighZXhwZW5zZXMpIHJldHVybiBudWxsO1xuICAgIFxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmV4cGVuc2VzfSA+XG4gICAgICAgIDxzZWN0aW9uPlxuICAgICAgICAgIDxoMz5BZGQgRXhwZW5zZTwvaDM+XG4gICAgICAgICAgPEV4cGVuc2VGb3JtIG9uQ29tcGxldGU9e3RoaXMuaGFuZGxlQWRkRXhwZW5zZX0gY2F0ZWdvcnlJZD17Y2F0ZWdvcnlJZH0vPlxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgIHsvKiBleHBlbnNlcyAmJiAqL31cblxuICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJleHBlbnNlcy1saXN0XCI+XG4gICAgICAgICAgPGgzPkV4cGVuc2VzOjwvaDM+XG4gICAgICAgICAgXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXhwZW5zZXMubWFwKGV4cGVuc2UgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gPEV4cGVuc2Uga2V5PXtleHBlbnNlLmtleX0gZXhwZW5zZT17ZXhwZW5zZX0vPjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIChzdGF0ZSwgeyBjYXRlZ29yeUlkIH0pID0+ICh7XG4gICAgZXhwZW5zZXM6IGdldEV4cGVuc2VzQnlDYXRlZ29yeShzdGF0ZSwgY2F0ZWdvcnlJZClcbiAgfSksXG4gIHsgYWRkRXhwZW5zZSB9XG4pKEV4cGVuc2VzKTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBFeHBlbnNlRGlzcGxheSBmcm9tICcuL0V4cGVuc2VEaXNwbGF5JztcbmltcG9ydCBFeHBlbnNlRm9ybSBmcm9tICcuL0V4cGVuc2VGb3JtJztcbmltcG9ydCB7IHVwZGF0ZUV4cGVuc2UgfSBmcm9tICcuL2V4cGVuc2VBY3Rpb25zJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0V4cGVuc2UuY3NzJztcblxuY2xhc3MgRXhwZW5zZSBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgc3RhdGUgPSB7XG4gICAgZWRpdGluZzogZmFsc2VcbiAgfTtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGV4cGVuc2U6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgdXBkYXRlRXhwZW5zZTogUHJvcFR5cGVzLmZ1bmNcbiAgfTtcbiAgXG4gIGhhbmRsZUVkaXQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGVkaXRpbmc6IHRydWUgfSk7XG4gIH07XG4gIFxuICBoYW5kbGVDb21wbGV0ZSA9IGV4cGVuc2UgPT4ge1xuICAgIGNvbnN0IHsgdXBkYXRlRXhwZW5zZSB9ID0gdGhpcy5wcm9wcztcbiAgICB1cGRhdGVFeHBlbnNlKGV4cGVuc2UpO1xuICAgIHRoaXMuaGFuZGxlRW5kRWRpdCgpO1xuICB9O1xuICBcbiAgaGFuZGxlRW5kRWRpdCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZWRpdGluZzogZmFsc2UgfSk7XG4gIH07XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGVkaXRpbmcgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBleHBlbnNlIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8c2VjdGlvbiBjbGFzc05hbWU9e3N0eWxlcy5leHBlbnNlfT5cbiAgICAgICAgPGxpPlxuICAgICAgICAgIHtlZGl0aW5nIFxuICAgICAgICAgICAgPyA8RXhwZW5zZUZvcm1cbiAgICAgICAgICAgICAgZXhwZW5zZT17ZXhwZW5zZX1cbiAgICAgICAgICAgICAgY2F0ZWdvcnlJZD17ZXhwZW5zZS5jYXRlZ29yeUlkfVxuICAgICAgICAgICAgICBvbkNvbXBsZXRlPXt0aGlzLmhhbmRsZUNvbXBsZXRlfVxuICAgICAgICAgICAgICBvbkNhbmNlbD17dGhpcy5oYW5kbGVFbmRFZGl0fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDogICBcbiAgICAgICAgICAgIDxFeHBlbnNlRGlzcGxheVxuICAgICAgICAgICAgICBleHBlbnNlPXtleHBlbnNlfVxuICAgICAgICAgICAgICBvbkVkaXQ9e3RoaXMuaGFuZGxlRWRpdH1cbiAgICAgICAgICAgIC8+ICBcbiAgICAgICAgICB9XG4gICAgICAgIDwvbGk+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBudWxsLFxuICB7IHVwZGF0ZUV4cGVuc2UgfVxuKShFeHBlbnNlKTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IHJlbW92ZUV4cGVuc2UsIH0gZnJvbSAnLi9leHBlbnNlQWN0aW9ucyc7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9FeHBlbnNlRGlzcGxheS5jc3MnO1xuXG5jbGFzcyBFeHBlbnNlRGlzcGxheSBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBleHBlbnNlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgb25FZGl0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHJlbW92ZUV4cGVuc2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG4gIFxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBleHBlbnNlLCBvbkVkaXQsIHJlbW92ZUV4cGVuc2UgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtzdHlsZXMuZXhwZW5zZWRpc3BsYXl9PlxuICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICA8bGk+XG4gICAgICAgICAgICB7ZXhwZW5zZS5uYW1lfSA9ICR7ZXhwZW5zZS5wcmljZX1cbiAgICAgICAgICAgIDxidXR0b24gbmFtZT1cIkVkaXRcIiBvbkNsaWNrPXtvbkVkaXR9PuKcjjwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiBuYW1lPVwiRGVsZXRlXCIgb25DbGljaz17KCkgPT4gcmVtb3ZlRXhwZW5zZShleHBlbnNlKX0+8J+XkTwvYnV0dG9uPlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG51bGwsXG4gIHsgcmVtb3ZlRXhwZW5zZSB9XG4pKEV4cGVuc2VEaXNwbGF5KTtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTIhLi9FeHBlbnNlRGlzcGxheS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcInNvdXJjZU1hcFwiOnRydWUsXCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTIhLi9FeHBlbnNlRGlzcGxheS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTIhLi9FeHBlbnNlRGlzcGxheS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLl8zeV85YUEydnZIaktSc09rdmxuMDlvIHNlY3Rpb24ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgLy8gcGFkZGluZy10b3A6IDEwcHg7XFxuICAgIC8vIHBhZGRpbmctYm90dG9tOiAxMHB4O1xcbiAgICBsaXN0LXN0eWxlLXR5cGU6IGNpcmNsZTtcXG4gICAgY29sb3I6IHJnYigxOTgsIDQsIDQpO1xcbiAgfVxcblwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvVXNlcnMvYW50cmVvcHVrYXkvY29kaW5nLXByb2plY3RzL2J1ZGdldC10cmFja2VyL3NyYy9jb21wb25lbnRzL2V4cGVuc2VzL0V4cGVuc2VEaXNwbGF5LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDRTtJQUNFLGNBQWM7SUFDZCx3QkFBd0I7SUFDeEIscUJBQXFCO0lBQ3JCLHdCQUF3QjtJQUN4Qix3QkFBd0I7SUFDeEIsc0JBQXNCO0dBQ3ZCXCIsXCJmaWxlXCI6XCJFeHBlbnNlRGlzcGxheS5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOmxvY2FsKC5leHBlbnNlZGlzcGxheSkge1xcbiAgc2VjdGlvbiB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICAvLyBwYWRkaW5nLXRvcDogMTBweDtcXG4gICAgLy8gcGFkZGluZy1ib3R0b206IDEwcHg7XFxuICAgIGxpc3Qtc3R5bGUtdHlwZTogY2lyY2xlO1xcbiAgICBjb2xvcjogcmdiKDE5OCwgNCwgNCk7XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJleHBlbnNlZGlzcGxheVwiOiBcIl8zeV85YUEydnZIaktSc09rdmxuMDlvXCJcbn07IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMiEuL0V4cGVuc2VGb3JtLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wic291cmNlTWFwXCI6dHJ1ZSxcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMiEuL0V4cGVuc2VGb3JtLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMiEuL0V4cGVuc2VGb3JtLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodHJ1ZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIua2YyRlRLX0g2SW5qVENFS0l1Nk1TIHtcXG4gIGJvcmRlci1zdHlsZTogbm9uZTtcXG59XFxuICBcXG4gIC5rZjJGVEtfSDZJbmpUQ0VLSXU2TVMgLmZvcm1CdXR0b25zIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAvLyBtYXJnaW46IGF1dG87XFxuICB9XFxuXCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIi9Vc2Vycy9hbnRyZW9wdWtheS9jb2RpbmctcHJvamVjdHMvYnVkZ2V0LXRyYWNrZXIvc3JjL2NvbXBvbmVudHMvZXhwZW5zZXMvRXhwZW5zZUZvcm0uY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsbUJBQW1CO0NBTXBCOztFQUpDO0lBQ0UsbUJBQW1CO0lBQ25CLGdCQUFnQjtHQUNqQlwiLFwiZmlsZVwiOlwiRXhwZW5zZUZvcm0uY3NzXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjpsb2NhbCguZXhwZW5zZWZvcm0pIHtcXG4gIGJvcmRlci1zdHlsZTogbm9uZTtcXG4gIFxcbiAgLmZvcm1CdXR0b25zIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAvLyBtYXJnaW46IGF1dG87XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJleHBlbnNlZm9ybVwiOiBcImtmMkZUS19INklualRDRUtJdTZNU1wiXG59OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTIhLi9FeHBlbnNlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wic291cmNlTWFwXCI6dHJ1ZSxcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMiEuL0V4cGVuc2UuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNS0yIS4vRXhwZW5zZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnFtc2JpeHBfb2h0MlVXZl9HcG5hNSB7XFxuICAvLyBkaXNwbGF5OiBmbGV4O1xcbiAgLy8ganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblxcbiAgLnFtc2JpeHBfb2h0MlVXZl9HcG5hNSBsaSB7XFxuICAgIGxpc3Qtc3R5bGUtdHlwZTogY2lyY2xlO1xcbiAgfVxcblwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvVXNlcnMvYW50cmVvcHVrYXkvY29kaW5nLXByb2plY3RzL2J1ZGdldC10cmFja2VyL3NyYy9jb21wb25lbnRzL2V4cGVuc2VzL0V4cGVuc2UuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsaUJBQWlCO0VBQ2pCLDJCQUEyQjtDQUs1Qjs7RUFIQztJQUNFLHdCQUF3QjtHQUN6QlwiLFwiZmlsZVwiOlwiRXhwZW5zZS5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOmxvY2FsKC5leHBlbnNlKSB7XFxuICAvLyBkaXNwbGF5OiBmbGV4O1xcbiAgLy8ganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFxuICBsaSB7XFxuICAgIGxpc3Qtc3R5bGUtdHlwZTogY2lyY2xlO1xcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuZXhwb3J0cy5sb2NhbHMgPSB7XG5cdFwiZXhwZW5zZVwiOiBcInFtc2JpeHBfb2h0MlVXZl9HcG5hNVwiXG59OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTIhLi9FeHBlbnNlcy5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcInNvdXJjZU1hcFwiOnRydWUsXCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTIhLi9FeHBlbnNlcy5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTIhLi9FeHBlbnNlcy5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLl8xX1NhWVBBbER4TEhyYjBlVXNPQU5wIHtcXG4gIC8vIGJvcmRlci1jb2xvcjogZ3JlZW47XFxuICBib3JkZXItd2lkdGg6IC41cHg7XFxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgcGFkZGluZzogMjBweDtcXG59XFxuXCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIi9Vc2Vycy9hbnRyZW9wdWtheS9jb2RpbmctcHJvamVjdHMvYnVkZ2V0LXRyYWNrZXIvc3JjL2NvbXBvbmVudHMvZXhwZW5zZXMvRXhwZW5zZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUFDQTtFQUNFLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsb0JBQW9CO0VBQ3BCLGNBQWM7Q0FDZlwiLFwiZmlsZVwiOlwiRXhwZW5zZXMuY3NzXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIlxcbjpsb2NhbCguZXhwZW5zZXMpIHtcXG4gIC8vIGJvcmRlci1jb2xvcjogZ3JlZW47XFxuICBib3JkZXItd2lkdGg6IC41cHg7XFxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgcGFkZGluZzogMjBweDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbi8vIGV4cG9ydHNcbmV4cG9ydHMubG9jYWxzID0ge1xuXHRcImV4cGVuc2VzXCI6IFwiXzFfU2FZUEFsRHhMSHJiMGVVc09BTnBcIlxufTsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNS0yIS4vQ2F0ZWdvcnlEaXNwbGF5LmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wic291cmNlTWFwXCI6dHJ1ZSxcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMiEuL0NhdGVnb3J5RGlzcGxheS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTIhLi9DYXRlZ29yeURpc3BsYXkuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh0cnVlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbi5fMmdYNmJ1NzV1ZWd1aDZjYlBZSFc4cCB7XFxuICBkaXNwbGF5OiBpbmxpbmU7XFxufVxcblxcbiAgLl8yZ1g2YnU3NXVlZ3VoNmNiUFlIVzhwIC5jYXRlZ29yeS1saXN0IHtcXG4gICAgcGFkZGluZzogMTVweDtcXG4gICAgYm9yZGVyLXN0eWxlOiBub25lOyAgIFxcbiAgfVxcblwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvVXNlcnMvYW50cmVvcHVrYXkvY29kaW5nLXByb2plY3RzL2J1ZGdldC10cmFja2VyL3NyYy9jb21wb25lbnRzL2NhdGVnb3JpZXMvQ2F0ZWdvcnlEaXNwbGF5LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBQ0E7RUFDRSxnQkFBZ0I7Q0FNakI7O0VBSkM7SUFDRSxjQUFjO0lBQ2QsbUJBQW1CO0dBQ3BCXCIsXCJmaWxlXCI6XCJDYXRlZ29yeURpc3BsYXkuY3NzXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIlxcbjpsb2NhbCguY2F0ZWdvcnlkaXNwbGF5KSB7XFxuICBkaXNwbGF5OiBpbmxpbmU7XFxuXFxuICAuY2F0ZWdvcnktbGlzdCB7XFxuICAgIHBhZGRpbmc6IDE1cHg7XFxuICAgIGJvcmRlci1zdHlsZTogbm9uZTsgICBcXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbi8vIGV4cG9ydHNcbmV4cG9ydHMubG9jYWxzID0ge1xuXHRcImNhdGVnb3J5ZGlzcGxheVwiOiBcIl8yZ1g2YnU3NXVlZ3VoNmNiUFlIVzhwXCJcbn07IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMiEuL0Rhc2hib2FyZC5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcInNvdXJjZU1hcFwiOnRydWUsXCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTIhLi9EYXNoYm9hcmQuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNS0yIS4vRGFzaGJvYXJkLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodHJ1ZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4uXzE1TTU4dlRVR1JPVzNpSnREUEVDalMge1xcbiAgLy8gZGlzcGxheTogZmxleDtcXG4gIC8vIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgLy8gZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIC8vIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICAvLyBib3JkZXItY29sb3I6IHJlZDtcXG4gIC8vIGJvcmRlci13aWR0aDogMnB4O1xcbn1cXG5cXG4gIC5fMTVNNTh2VFVHUk9XM2lKdERQRUNqUyBoMyB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIH1cXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL1VzZXJzL2FudHJlb3B1a2F5L2NvZGluZy1wcm9qZWN0cy9idWRnZXQtdHJhY2tlci9zcmMvY29tcG9uZW50cy9jYXRlZ29yaWVzL0Rhc2hib2FyZC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQUNBO0VBQ0UsaUJBQWlCO0VBQ2pCLDJCQUEyQjtFQUMzQiwwQkFBMEI7RUFDMUIsdUJBQXVCO0VBQ3ZCLHFCQUFxQjtFQUNyQixxQkFBcUI7Q0FLdEI7O0VBSEM7SUFDRSxtQkFBbUI7R0FDcEJcIixcImZpbGVcIjpcIkRhc2hib2FyZC5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiXFxuOmxvY2FsKC5kYXNoYm9hcmQpIHtcXG4gIC8vIGRpc3BsYXk6IGZsZXg7XFxuICAvLyBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIC8vIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAvLyBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgLy8gYm9yZGVyLWNvbG9yOiByZWQ7XFxuICAvLyBib3JkZXItd2lkdGg6IDJweDtcXG5cXG4gIGgzIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuZXhwb3J0cy5sb2NhbHMgPSB7XG5cdFwiZGFzaGJvYXJkXCI6IFwiXzE1TTU4dlRVR1JPVzNpSnREUEVDalNcIlxufTsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNS0yIS4vQXBwLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wic291cmNlTWFwXCI6dHJ1ZSxcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMiEuL0FwcC5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTIhLi9BcHAuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh0cnVlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi52QXNyU1VYSEx6X25aUFhvVnoteWgge1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG59XFxuICBcXG4gIC52QXNyU1VYSEx6X25aUFhvVnoteWggbWFpbiB7XFxuICAgIGJvcmRlci1zdHlsZTogbm9uZTtcXG4gIH1cXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL1VzZXJzL2FudHJlb3B1a2F5L2NvZGluZy1wcm9qZWN0cy9idWRnZXQtdHJhY2tlci9zcmMvY29tcG9uZW50cy9hcHAvQXBwLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGNBQWM7Q0FLZjs7RUFIQztJQUNFLG1CQUFtQjtHQUNwQlwiLFwiZmlsZVwiOlwiQXBwLmNzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6bG9jYWwoLmFwcCkge1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIFxcbiAgbWFpbiB7XFxuICAgIGJvcmRlci1zdHlsZTogbm9uZTtcXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbi8vIGV4cG9ydHNcbmV4cG9ydHMubG9jYWxzID0ge1xuXHRcImFwcFwiOiBcInZBc3JTVVhITHpfblpQWG9Wei15aFwiXG59OyIsImltcG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB0aHVuayBmcm9tICdyZWR1eC10aHVuayc7XG5pbXBvcnQgcHJvbWlzZU1pZGRsZXdhcmUgZnJvbSAnLi9wcm9taXNlLW1pZGRsZXdhcmUnO1xuaW1wb3J0IHsgZXJyb3IsIGxvYWRpbmcgfSBmcm9tICcuLi9jb21wb25lbnRzL2FwcC9lcnJvci1yZWR1Y2Vycyc7XG5pbXBvcnQgeyBjYXRlZ29yaWVzIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jYXRlZ29yaWVzL3JlZHVjZXJzJztcbmltcG9ydCB7IGV4cGVuc2VzQnlDYXRlZ29yeSB9IGZyb20gJy4uL2NvbXBvbmVudHMvZXhwZW5zZXMvZXhwZW5zZVJlZHVjZXJzJztcblxuY29uc3Qgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMoe1xuICBjYXRlZ29yaWVzLFxuICBleHBlbnNlc0J5Q2F0ZWdvcnksXG4gIGVycm9yLFxuICBsb2FkaW5nIFxufSk7XG5cbmNvbnN0IGNvbXBvc2VFbmhhbmNlcnMgPSB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIHx8IGNvbXBvc2U7XG5cbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXG4gIHJvb3RSZWR1Y2VyLFxuICBjb21wb3NlRW5oYW5jZXJzKFxuICAgIGFwcGx5TWlkZGxld2FyZShcbiAgICAgIHRodW5rLFxuICAgICAgcHJvbWlzZU1pZGRsZXdhcmVcbiAgICApXG4gIClcbik7XG5cbmV4cG9ydCBkZWZhdWx0IHN0b3JlOyIsImZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsXG4gICAgICAgIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIHRodW5rID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKCk7XG50aHVuay53aXRoRXh0cmFBcmd1bWVudCA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZTtcblxuZXhwb3J0IGRlZmF1bHQgdGh1bms7IiwiaW1wb3J0IHsgTE9BRF9TVEFSVCwgTE9BRF9FTkQsIEVSUk9SIH0gZnJvbSAnLi4vY29tcG9uZW50cy9hcHAvZXJyb3ItcmVkdWNlcnMnO1xuXG5jb25zdCBpc1Byb21pc2UgPSB2YWwgPT4gdmFsICYmIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgKHsgZGlzcGF0Y2ggfSkgPT4gbmV4dCA9PiBhY3Rpb24gPT4ge1xuXG4gIGNvbnN0IHsgdHlwZSwgcGF5bG9hZCB9ID0gYWN0aW9uO1xuICBpZighaXNQcm9taXNlKHBheWxvYWQpKSByZXR1cm4gbmV4dChhY3Rpb24pO1xuXG4gIGRpc3BhdGNoKHsgdHlwZTogTE9BRF9TVEFSVCB9KTsgXG5cbiAgcmV0dXJuIHBheWxvYWRcbiAgICAudGhlbihcbiAgICAgIHJlc3VsdCA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogTE9BRF9FTkQgfSk7XG5cbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIHBheWxvYWQ6IHJlc3VsdFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBlcnIgPT4geyAgXG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogTE9BRF9FTkQgfSk7XG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogRVJST1IsIHBheWxvYWQ6IGVyciB9KTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgICk7XG59OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTIhLi9tYWluLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wic291cmNlTWFwXCI6dHJ1ZSxcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTUtMiEuL21haW4uY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNS0yIS4vbWFpbi5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuKiB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5ib2R5IHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiQ29taWMgU2FucyBNU1xcXCIsIGN1cnNpdmUsIHNhbnMtc2VyaWY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjMyLCAyNDMsIDIwMik7IFxcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG5tYWluIHtcXG4gIC8vIGRpc3BsYXk6IGZsZXg7XFxuICAvLyBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIGhlaWdodDogMTAwdmg7XFxufVxcblxcbmgyLCBoNSB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbnAge1xcbiAgY29sb3I6IGJsdWU7XFxufVxcblxcbnN0cm9uZyB7XFxuICBwYWRkaW5nOiAxMHB4O1xcbn1cXG5cXG5mb3JtIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuXFxudWwge1xcbiAgbWFyZ2luOiAgMHB4O1xcbiAgbGlzdC1zdHlsZS10eXBlOiBjaXJjbGU7XFxuICAvLyBsaXN0LXN0eWxlLXBvc2l0aW9uOiBpbnNpZGU7XFxuICBwYWRkaW5nLWxlZnQ6IDc1cHg7XFxuICBwYWRkaW5nLXJpZ2h0OiA3NXB4O1xcbn1cXG5cXG5saSB7XFxuICBkaXNwbGF5OiBpbmxpbmU7XFxuICBsaXN0LXN0eWxlLXR5cGU6IGNpcmNsZTtcXG59XFxuXFxuYnV0dG9uIHtcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgcGFkZGluZzogM3B4O1xcbiAgbWFyZ2luOiAzcHg7XFxufVxcblxcbmhyIHtcXG4gIGhlaWdodDogMTVweDtcXG4gIG1hcmdpbjogMzBweCAtMjBweCAyMHB4O1xcbiAgYm9yZGVyOiAwO1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAxMnB4IDEycHggLTEycHggcmdiYSgwLCAwLCAwLCAwLjUpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE1NiwgMjU1LCAxMDcpO1xcbn1cXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL1VzZXJzL2FudHJlb3B1a2F5L2NvZGluZy1wcm9qZWN0cy9idWRnZXQtdHJhY2tlci9zcmMvc3R5bGVzL21haW4uY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUFDQTtFQUNFLHVCQUF1QjtDQUN4Qjs7QUFFRDtFQUNFLGtEQUFrRDtFQUNsRCxxQ0FBcUM7RUFDckMsVUFBVTtDQUNYOztBQUVEO0VBQ0UsaUJBQWlCO0VBQ2pCLDJCQUEyQjtFQUMzQixhQUFhO0VBQ2IsY0FBYztDQUNmOztBQUVEO0VBQ0UsbUJBQW1CO0NBQ3BCOztBQUVEO0VBQ0UsWUFBWTtDQUNiOztBQUVEO0VBQ0UsY0FBYztDQUNmOztBQUVEO0VBQ0UsY0FBYztFQUNkLHdCQUF3QjtDQUN6Qjs7QUFFRDtFQUNFLGFBQWE7RUFDYix3QkFBd0I7RUFDeEIsK0JBQStCO0VBQy9CLG1CQUFtQjtFQUNuQixvQkFBb0I7Q0FDckI7O0FBRUQ7RUFDRSxnQkFBZ0I7RUFDaEIsd0JBQXdCO0NBQ3pCOztBQUVEO0VBQ0UscUJBQXFCO0VBQ3JCLGFBQWE7RUFDYixZQUFZO0NBQ2I7O0FBRUQ7RUFDRSxhQUFhO0VBQ2Isd0JBQXdCO0VBQ3hCLFVBQVU7RUFDVix1REFBdUQ7RUFDdkQscUNBQXFDO0NBQ3RDXCIsXCJmaWxlXCI6XCJtYWluLmNzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXG4qIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbmJvZHkge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJDb21pYyBTYW5zIE1TXFxcIiwgY3Vyc2l2ZSwgc2Fucy1zZXJpZjtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzIsIDI0MywgMjAyKTsgXFxuICBtYXJnaW46IDA7XFxufVxcblxcbm1haW4ge1xcbiAgLy8gZGlzcGxheTogZmxleDtcXG4gIC8vIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgcGFkZGluZzogOHB4O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG59XFxuXFxuaDIsIGg1IHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxucCB7XFxuICBjb2xvcjogYmx1ZTtcXG59XFxuXFxuc3Ryb25nIHtcXG4gIHBhZGRpbmc6IDEwcHg7XFxufVxcblxcbmZvcm0ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG51bCB7XFxuICBtYXJnaW46ICAwcHg7XFxuICBsaXN0LXN0eWxlLXR5cGU6IGNpcmNsZTtcXG4gIC8vIGxpc3Qtc3R5bGUtcG9zaXRpb246IGluc2lkZTtcXG4gIHBhZGRpbmctbGVmdDogNzVweDtcXG4gIHBhZGRpbmctcmlnaHQ6IDc1cHg7XFxufVxcblxcbmxpIHtcXG4gIGRpc3BsYXk6IGlubGluZTtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogY2lyY2xlO1xcbn1cXG5cXG5idXR0b24ge1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICBwYWRkaW5nOiAzcHg7XFxuICBtYXJnaW46IDNweDtcXG59XFxuXFxuaHIge1xcbiAgaGVpZ2h0OiAxNXB4O1xcbiAgbWFyZ2luOiAzMHB4IC0yMHB4IDIwcHg7XFxuICBib3JkZXI6IDA7XFxuICBib3gtc2hhZG93OiBpbnNldCAwIDEycHggMTJweCAtMTJweCByZ2JhKDAsIDAsIDAsIDAuNSk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTU2LCAyNTUsIDEwNyk7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG4iXSwic291cmNlUm9vdCI6IiJ9